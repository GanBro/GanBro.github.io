<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023暑假日程备忘录</title>
    <url>/2023/07/23/2023-2023%E6%9A%91%E5%81%87%E6%97%A5%E7%A8%8B%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h1><p><strong>第4讲</strong>4.10</p>
<h1 id="计算机三级"><a href="#计算机三级" class="headerlink" title="计算机三级"></a>计算机三级</h1><h2 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h2><p>第7套卷子18题</p>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="传输速度"><a href="#传输速度" class="headerlink" title="传输速度"></a>传输速度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. OC-1 对应 51.84 Mbps</span><br></pre></td></tr></table></figure>

<h1 id="计算机四级"><a href="#计算机四级" class="headerlink" title="计算机四级"></a>计算机四级</h1><h2 id="进度-1"><a href="#进度-1" class="headerlink" title="进度"></a>进度</h2><p>真题试卷4</p>
<h2 id="操作系统笔记"><a href="#操作系统笔记" class="headerlink" title="操作系统笔记"></a>操作系统笔记</h2><h3 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151610196.png" alt="image-20230815161045108"></p>
<p>2.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820150129121.png" alt="image-20230820150129121"></p>
<p>3.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820150216880.png" alt="image-20230820150216880"></p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><ol>
<li>串口数据到达说明中断</li>
</ol>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ol>
<li>并发程序执行结果不可再现</li>
<li>并发程序与计算过程无法一一对应</li>
<li>并发程序在执行期间具有相互制约关系</li>
<li>并发程序在执行过程失去了封闭性</li>
</ol>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ol>
<li>函数fork()<strong>进程控制类</strong>系统调用</li>
</ol>
<h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><ol>
<li>PCB内容</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241121124.png" alt="image-20230724112156055"></p>
<ol start="2">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241629029.png" alt="image-20230724162957947"></li>
</ol>
<h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241612970.png" alt="image-20230724161251867"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241614023.png" alt="image-20230724161440935"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171028068.png" alt="image-20230817102837957"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171031774.png" alt="image-20230817103104681"></li>
<li><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230819120840584.png" alt=" "></li>
</ol>
<h3 id="平均周转时间"><a href="#平均周转时间" class="headerlink" title="平均周转时间"></a>平均周转时间</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241617747.png" alt="image-20230724161756677"></li>
<li></li>
</ol>
<h3 id="多道程序设计"><a href="#多道程序设计" class="headerlink" title="多道程序设计"></a>多道程序设计</h3><ol>
<li>特点：</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241624300.png" alt="image-20230724162435250"></p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol>
<li>linux进程状态有：运行状态、中断状态、不可中断状态、僵尸状态、停止状态。</li>
<li></li>
</ol>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241858000.png" alt="image-20230724185823922"></li>
<li>创建新进程过程：</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307251843824.png" alt="image-20230725184331728"></p>
<ol start="3">
<li>进程间制约关系</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261938159.png" alt="image-20230726193802100"></p>
<ol start="4">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271807751.png" alt="image-20230727180758648"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161040757.png" alt="image-20230816104018629"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161507748.png" alt="image-20230816150739661"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161509517.png" alt="image-20230816150942427"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161515084.png" alt="image-20230816151508996"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161525307.png" alt="image-20230816152558204"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171425662.png" alt="image-20230817142543573"></li>
</ol>
<h3 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h3><ol>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261406944.png" alt="image-20230726140645835"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261419007.png" alt="image-20230726141940922"></p>
</li>
<li><p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230726142008834.png" alt="image-20230726142008834"></p>
</li>
</ol>
<h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261944884.png" alt="image-20230726194413789"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271355354.png" alt="image-20230727135559270"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271358795.png" alt="image-20230727135837704"></p>
<p>4.LRU缺页率</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271812045.png" alt="image-20230727181212974"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271822587.png" alt="image-20230727182223511"></p>
<p>5.缺页中断</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271829541.png" alt="image-20230727182948458"></p>
<p>6.缺页次数</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307272013385.png" alt="image-20230727201308280"></p>
<p>7.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281001896.png" alt="image-20230728100148788"></p>
<p>8.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281010172.png" alt="image-20230728101026070"></p>
<p>9.缺页中断</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281145136.png" alt="image-20230728114559043"></p>
<p>10.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307312000669.png" alt="image-20230731200028554"></p>
<ol start="11">
<li></li>
</ol>
<blockquote>
<p>后和前不一样</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307312003821.png" alt="image-20230731200359729"></p>
<p>12.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307312045328.png" alt="image-20230731204540227"></p>
<h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><h4 id="NRU"><a href="#NRU" class="headerlink" title="NRU"></a>NRU</h4><ol>
<li><p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230727133203093.png" alt="image-20230727133203093"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271332061.png" alt="image-20230727133220006"></p>
</li>
</ol>
<h4 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h4><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281013112.png" alt="image-20230728101336020"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281027959.png" alt="image-20230728102700897"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281027616.png" alt="image-20230728102723540"></p>
<h4 id="CLOCK"><a href="#CLOCK" class="headerlink" title="CLOCK"></a>CLOCK</h4><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281014228.png" alt="image-20230728101437160"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281014411.png" alt="image-20230728101452339"></p>
<h4 id="OPT"><a href="#OPT" class="headerlink" title="OPT"></a>OPT</h4><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281019007.png" alt="image-20230728101919935"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281019612.png" alt="image-20230728101937547"></p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271346156.png" alt="image-20230727134638072"></p>
<h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281515768.png" alt="image-20230728151553682"></p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281655506.png" alt="image-20230728165544415"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281720310.png" alt="image-20230728172052224"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281727380.png" alt="image-20230728172738286"></p>
<p>4.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820201241949.png" alt="image-20230820201241949"></p>
<h3 id="外存储设备"><a href="#外存储设备" class="headerlink" title="外存储设备"></a>外存储设备</h3><ol>
<li>存取过程<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281704835.png" alt="image-20230728170446755"></li>
</ol>
<h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151134788.png" alt="image-20230815113408668"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151134364.png" alt="image-20230815113427311"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151149106.png" alt="image-20230815114936007"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151149158.png" alt="image-20230815114952105"></p>
<h3 id="外碎片"><a href="#外碎片" class="headerlink" title="外碎片"></a>外碎片</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171437827.png" alt="image-20230817143729738"></p>
<h3 id="可变分区"><a href="#可变分区" class="headerlink" title="可变分区"></a>可变分区</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230819104326606.png" alt="image-20230819104326606"></p>
<h3 id="FAT"><a href="#FAT" class="headerlink" title="FAT"></a>FAT</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820175108120.png" alt="image-20230820175108120"></p>
<p>2.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820175215199.png" alt="image-20230820175215199"></p>
<h3 id="SPOOLing"><a href="#SPOOLing" class="headerlink" title="SPOOLing"></a>SPOOLing</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821100631823.png" alt="image-20230821100631823"></p>
<h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821115022788.png" alt="image-20230821115022788"></p>
<h3 id="SDT"><a href="#SDT" class="headerlink" title="SDT"></a>SDT</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821150343582.png" alt="image-20230821150343582"></p>
<h3 id="DCT"><a href="#DCT" class="headerlink" title="DCT"></a>DCT</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821150434947.png" alt="image-20230821150434947"></p>
<h3 id="COCT"><a href="#COCT" class="headerlink" title="COCT"></a>COCT</h3><p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821150540413.png" alt="image-20230821150540413"></p>
<h2 id="计算机网络笔记"><a href="#计算机网络笔记" class="headerlink" title="计算机网络笔记"></a>计算机网络笔记</h2><h3 id="协议标准"><a href="#协议标准" class="headerlink" title="协议标准"></a>协议标准</h3><h4 id="IEEE-802-1"><a href="#IEEE-802-1" class="headerlink" title="IEEE 802.1"></a>IEEE 802.1</h4><p>定义局域网体系结构、网络互联、网络管理与性能测试。</p>
<h4 id="IEEE-802-3"><a href="#IEEE-802-3" class="headerlink" title="IEEE 802.3"></a>IEEE 802.3</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义CSMA/CD总线介质访问控制子层与物理层标准。</span><br><span class="line">2. 传统以太网(Ethernet)采用IEEE 802.3标准。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-4"><a href="#IEEE-802-4" class="headerlink" title="IEEE 802.4"></a>IEEE 802.4</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义了总线拓扑结构的令牌总线介质访问控制方法与相应的物理规范。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-5"><a href="#IEEE-802-5" class="headerlink" title="IEEE 802.5"></a>IEEE 802.5</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义了总线型Token Ring介质访问控制方法与相应的物理规范。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-3u"><a href="#IEEE-802-3u" class="headerlink" title="IEEE 802.3u"></a>IEEE 802.3u</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 快速以太网(Fast Ethernet)采用IEEE 802.3u标准。其最大传输速率是传统以太网的10倍，支持的传输介质为双绞线和光纤。</span><br><span class="line">2. 100Base-FX是快速以太网(Fast Ethernet, 采用IEEE802.3u)相关传输介质中的一种，它支持2芯的多模或单模光纤，提供高速主干网使用，它是一个全双工系统。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-3z"><a href="#IEEE-802-3z" class="headerlink" title="IEEE 802.3z"></a>IEEE 802.3z</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 千兆以太网(Gigabit Ethernet)采用IEEE 802.3z标准。</span><br><span class="line">2. 1000 BASE-T使用5类非屏蔽双绞线作为传输介质，双绞线长度可达100m，它是IEEE 802.3z的以太网物理层标准之一。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-ae"><a href="#IEEE-802-ae" class="headerlink" title="IEEE 802.ae"></a>IEEE 802.ae</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 万兆以太网(10 Gigabit Ethernet)采用IEEE 802.ae标准</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-11"><a href="#IEEE-802-11" class="headerlink" title="IEEE 802.11"></a>IEEE 802.11</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 无线局域网(WLAN)的介质访问控制协议及物理层技术规范。</span><br><span class="line">2. IEEE 802.11主要用于解决办公室局域网和校园网中用户与用户终端的无线接入。</span><br><span class="line">3. IEEE 802.11协议的帧头有4个地址字段，这4个地址共同表示基本服务集BSS的ID、源地址、目的地址、发送结点地址与接受结点地址。这里面的地址是硬件地址。</span><br><span class="line">4. IEEE 802.11的MAC层采用一种虚拟监听(VCS)机制，用于进一步减少发生冲突的概率。</span><br><span class="line">5. IEEE 802.11数据帧最特殊的地方是帧头有4个地址字段，但这4个地址字段并不是都出现在所有帧中。</span><br></pre></td></tr></table></figure>

<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301435216.png" alt="image-20230730143514164"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308081114057.png" alt="image-20230808111401943"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308101023294.png" alt="image-20230810102316185"></p>
<h4 id="IEEE-802-11a"><a href="#IEEE-802-11a" class="headerlink" title="IEEE 802.11a"></a>IEEE 802.11a</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. IEEE 802.11a将传输速率提高到54Mbps。</span><br></pre></td></tr></table></figure>



<h4 id="IEEE-802-11b"><a href="#IEEE-802-11b" class="headerlink" title="IEEE 802.11b"></a>IEEE 802.11b</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 采用2.4GHz频段，数据传输速率为11Mbps，是无线局域网协议标准。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-11g"><a href="#IEEE-802-11g" class="headerlink" title="IEEE 802.11g"></a>IEEE 802.11g</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 在2.4GHz频段使用正交频分复用(OFDM)调制技术，使数据传输速率提高到20Mbps以上；能够与IEEE 802.11b的Wi-Fi系统互联互通，可共存于同一AP的网络里，从而保障了后向兼容性。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-11n"><a href="#IEEE-802-11n" class="headerlink" title="IEEE 802.11n"></a>IEEE 802.11n</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. IEEE 802.11n是无线局域网传输标准，工作在5GHz波段，最大传送速率达600Mbps，采用无线局域网物理层与介质访问控制层规范。</span><br></pre></td></tr></table></figure>



<h4 id="IEEE-802-12"><a href="#IEEE-802-12" class="headerlink" title="IEEE 802.12"></a>IEEE 802.12</h4><p>需求优先的介质访问控制协议</p>
<h4 id="IEEE-802-15"><a href="#IEEE-802-15" class="headerlink" title="IEEE 802.15"></a>IEEE 802.15</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义近距离个人无线网络访问控制子层与物理层标准。</span><br><span class="line">2. 采用蓝牙技术的无线个人网技术规范。</span><br></pre></td></tr></table></figure>

<h4 id="IEEE-802-16"><a href="#IEEE-802-16" class="headerlink" title="IEEE 802.16"></a>IEEE 802.16</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义宽带无线局域网访问控制子层与物理层标准。</span><br><span class="line">2. 宽带无线连接工作组，开发2~66GHz的无线接入系统空中接口。</span><br></pre></td></tr></table></figure>

<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><ol>
<li>WSN(Wireless Sensor Network) 无线传感网</li>
<li>WAN(Wide Area Network) 广域网</li>
<li>WMN(Wiress Mesh Network) 无线网状网络</li>
<li>LAN(Local Area Network) 局域网</li>
<li>Ad hoc 无线自组网</li>
</ol>
<h3 id="杂记-1"><a href="#杂记-1" class="headerlink" title="杂记"></a>杂记</h3><ol>
<li>IEEE802.3u的最大传输速率</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307292212669.png" alt="image-20230729221213560"></p>
<p>2.<strong>Unix操作系统</strong>主要包括:IBM公司的<strong>AIX</strong>系统、Sun公司的<strong>Solaris</strong>系统、HP公司的<strong>HP-UX</strong>等</p>
<p>3.在 <strong>Ethernet</strong>帧中，前导码由**64位(8字节)**的比特序列组成</p>
<p>4.以太网帧中的前导码与帧前定界符字段的长度之和是<strong>8字节</strong></p>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301131334.png" alt="image-20230730113116253"></p>
<p>6.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301227946.png" alt="image-20230730122739899"></p>
<p>7.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301340895.png" alt="image-20230730134045831"></p>
<p>8.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301342805.png" alt="image-20230730134202757"></p>
<ol start="9">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301353017.png" alt="image-20230730135315958"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301355188.png" alt="image-20230730135534104"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301558517.png" alt="image-20230730155838468"></li>
</ol>
<p>12.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302325733.png" alt="image-20230730232509660"></p>
<p>13.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302327376.png" alt="image-20230730232758318"></p>
<p>14.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302350242.png" alt="image-20230730235008194"></p>
<p>15.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302355933.png" alt="image-20230730235519872"></p>
<p>16.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307310008317.png" alt="image-20230731000833259"></p>
<p>17.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311807536.png" alt="image-20230731180746485"></p>
<p>18.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011006241.png" alt="image-20230801100611133"></p>
<p>19.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011029817.png" alt="image-20230801102909739"></p>
<p>20.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011138703.png" alt="image-20230801113812598"></p>
<p>21.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011139543.png" alt="image-20230801113948433"></p>
<p>22.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308012101163.png" alt="image-20230801210125070"></p>
<p>23.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308012117860.png" alt="image-20230801211724799"></p>
<p>24.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021032144.png" alt="image-20230802103235053"></p>
<p>25.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021208354.png" alt="image-20230802120831309"></p>
<p>26.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062126791.png" alt="image-20230806212601701"></p>
<p>27.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062129249.png" alt="image-20230806212919177"></p>
<p>28.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062300417.png" alt="image-20230806230056331"></p>
<p>29.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122242065.png" alt="image-20230812224215965"></p>
<p>30.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122249043.png" alt="image-20230812224939942"></p>
<h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>1.OSI和TCP&#x2F;IP模型</p>
<p>​	<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307291945686.png" alt="image-20230729194532595"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308111149770.png" alt="image-20230811114919670"></p>
<h3 id="WSN"><a href="#WSN" class="headerlink" title="WSN"></a>WSN</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307291602219.png" alt="image-20230729160214092"></p>
<h3 id="计算公式-1"><a href="#计算公式-1" class="headerlink" title="计算公式"></a>计算公式</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307291648662.png" alt="image-20230729164820560"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311425240.png" alt="image-20230731142517133"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311518586.png" alt="image-20230731151823494"></p>
<h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311246603.png" alt="image-20230731124623513"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308111157822.png" alt="image-20230811115702726"></p>
<h3 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311429218.png" alt="image-20230731142950117"></p>
<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011147806.png" alt="image-20230801114708709"></p>
<h3 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011153660.png" alt="image-20230801115349592"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011442060.png" alt="image-20230801144246994"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308012002191.png" alt="image-20230801200241090"></p>
<p>4.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308111835296.png" alt="image-20230811183514199"></p>
<h3 id="IM系统"><a href="#IM系统" class="headerlink" title="IM系统"></a>IM系统</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011952792.png" alt="image-20230801195219685"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011953969.png" alt="image-20230801195333883"></p>
<h3 id="SIP"><a href="#SIP" class="headerlink" title="SIP"></a>SIP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021012360.png" alt="image-20230802101228218"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021040145.png" alt="image-20230802104037053"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021131162.png" alt="image-20230802113137075"></p>
<p>4.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230802113555962.png" alt="image-20230802113555962"></p>
<h3 id="XMPP"><a href="#XMPP" class="headerlink" title="XMPP"></a>XMPP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021037803.png" alt="image-20230802103701717"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021154953.png" alt="image-20230802115432877"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021543300.png" alt="image-20230802154351203"></p>
<p>4.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021545987.png" alt="image-20230802154551893"></p>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021555528.png" alt="image-20230802155543439"></p>
<h3 id="Skype"><a href="#Skype" class="headerlink" title="Skype"></a>Skype</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021038456.png" alt="image-20230802103846384"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031740717.png" alt="image-20230803174033632"></p>
<p>3.Skype是融合了VoIP技术和P2P技术，而不是Skype制定的标准</p>
<p>4.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121714383.png" alt="image-20230812171422304"></p>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121715736.png" alt="image-20230812171532647"></p>
<p>6.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121719927.png" alt="image-20230812171901856"></p>
<p>7.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121724554.png" alt="image-20230812172400478"></p>
<p>8.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121725276.png" alt="image-20230812172558185"></p>
<h3 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a>P2P</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021210571.png" alt="image-20230802121042495"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121659670.png" alt="image-20230812114607661"></p>
<h3 id="SIMPLE"><a href="#SIMPLE" class="headerlink" title="SIMPLE"></a>SIMPLE</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021558112.png" alt="image-20230802155813032"></p>
<h3 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308030951034.png" alt="image-20230803095105927"></p>
<h3 id="IPTV"><a href="#IPTV" class="headerlink" title="IPTV"></a>IPTV</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031048490.png" alt="image-20230803104832388"></p>
<h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031050505.png" alt="image-20230803105029420"></p>
<h3 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031353935.png" alt="image-20230803135342828"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031739457.png" alt="image-20230803173954365"></p>
<h3 id="eDonkey2000"><a href="#eDonkey2000" class="headerlink" title="eDonkey2000"></a>eDonkey2000</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031743310.png" alt="image-20230803174341229"></p>
<h3 id="VOD"><a href="#VOD" class="headerlink" title="VOD"></a>VOD</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031747789.png" alt="image-20230803174716702"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121659797.png" alt="image-20230812165928714"></p>
<h3 id="X-509"><a href="#X-509" class="headerlink" title="X.509"></a>X.509</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062131206.png" alt="image-20230806213147135"></p>
<h3 id="X-800"><a href="#X-800" class="headerlink" title="X.800"></a>X.800</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308041206942.png" alt="image-20230804120645819"></p>
<h3 id="CMIP"><a href="#CMIP" class="headerlink" title="CMIP"></a>CMIP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308041212144.png" alt="image-20230804121234049"></p>
<h3 id="E1Gamal"><a href="#E1Gamal" class="headerlink" title="E1Gamal"></a>E1Gamal</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062120919.png" alt="image-20230806212021815"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122234282.png" alt="image-20230812223432188"></p>
<h3 id="Blowfish"><a href="#Blowfish" class="headerlink" title="Blowfish"></a>Blowfish</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062130163.png" alt="image-20230806213050093"></p>
<h3 id="KDC"><a href="#KDC" class="headerlink" title="KDC"></a>KDC</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062134490.png" alt="image-20230806213404395"></p>
<h3 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308071154673.png" alt="image-20230807115411555"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122232530.png" alt="image-20230812223205416"></p>
<h3 id="VoIP"><a href="#VoIP" class="headerlink" title="VoIP"></a>VoIP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121144611.png" alt="image-20230812114411494"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121703827.png" alt="image-20230812170318734"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121720081.png" alt="image-20230812172045008"></p>
<h3 id="RTCP"><a href="#RTCP" class="headerlink" title="RTCP"></a>RTCP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122046657.png" alt="image-20230812204645572"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122052065.png" alt="image-20230812205212973"></p>
<h3 id="S-MIME"><a href="#S-MIME" class="headerlink" title="S&#x2F;MIME"></a>S&#x2F;MIME</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122056698.png" alt="image-20230812205621607"></p>
<h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122232525.png" alt="image-20230812223251434"></p>
<h3 id="认证函数"><a href="#认证函数" class="headerlink" title="认证函数"></a>认证函数</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122237891.png" alt="image-20230812223720782"></p>
<h3 id="认证中心"><a href="#认证中心" class="headerlink" title="认证中心"></a>认证中心</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122332981.png" alt="image-20230812233212893"></p>
<h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308131624559.png" alt="image-20230813162435448"></p>
<h3 id="PGP"><a href="#PGP" class="headerlink" title="PGP"></a>PGP</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308131635990.png" alt="image-20230813163520898"></p>
<h1 id="四级错题"><a href="#四级错题" class="headerlink" title="四级错题"></a>四级错题</h1><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291023951.png" alt="image-20230829100951887"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291023961.png" alt="image-20230829101933493"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291022685.png" alt="image-20230829102246796"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291026239.png" alt="image-20230829102600836"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291028796.png" alt="image-20230829102758407"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291030091.png" alt="image-20230829103026013"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291029768.png" alt="image-20230829102942692"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291036369.png" alt="image-20230829103651292"></li>
<li><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230829104051756.png" alt="image-20230829104051756"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291048041.png" alt="image-20230829104820957"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291052297.png" alt="image-20230829105220205"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011506001.png" alt="image-20230901150650889"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011508623.png" alt="image-20230901150845545"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011509339.png" alt="image-20230901150909271"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011510190.png" alt="image-20230901151024104"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011511197.png" alt="image-20230901151153121"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011513412.png" alt="image-20230901151302321"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011514970.png" alt="image-20230901151427888"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011515736.png" alt="image-20230901151519655"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011517569.png" alt="image-20230901151738479"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011518280.png" alt="image-20230901151843194"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011520711.png" alt="image-20230901152006625"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011522038.png" alt="image-20230901152231937"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011523492.png" alt="image-20230901152330409"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011525636.png" alt="image-20230901152533529"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011528233.png" alt="image-20230901152842129"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011530348.png" alt="image-20230901153027250"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011533708.png" alt="image-20230901153329618"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021744158.png" alt="image-20230902174439040"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021745840.png" alt="image-20230902174500766"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021745685.png" alt="image-20230902174554612"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021746979.png" alt="image-20230902174639909"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021747465.png" alt="image-20230902174718380"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031731347.png" alt="image-20230903173158219"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031738346.png" alt="image-20230903173834252"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031741801.png" alt="image-20230903174123723"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031742108.png" alt="image-20230903174230020"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031744530.png" alt="image-20230903174407435"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032126156.png" alt="image-20230903212611073"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032127596.png" alt="image-20230903212720512"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032129680.png" alt="image-20230903212925607"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032130186.png" alt="image-20230903213050111"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032132859.png" alt="image-20230903213218782"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032132025.png" alt="image-20230903213233958"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032132385.png" alt="image-20230903213247303"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032133571.png" alt="image-20230903213343495"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032137761.png" alt="image-20230903213701687"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309042212895.png" alt="image-20230904221254780"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309042227216.png" alt="image-20230904222755128"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062151586.png" alt="image-20230906215134458"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062152612.png" alt="image-20230906215238516"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062202968.png" alt="image-20230906220257853"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062203005.png" alt="image-20230906220354898"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062204121.png" alt="image-20230906220412017"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062214457.png" alt="image-20230906221448327"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062216426.png" alt="image-20230906221618321"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062317093.png" alt="image-20230906231731973"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141541938.png" alt="image-20230914154113824"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141543899.png" alt="image-20230914154304821"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141544444.png" alt="image-20230914154439366"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141546255.png" alt="image-20230914154615157"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141546797.png" alt="image-20230914154645718"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141855415.png" alt="image-20230914185546351"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141856431.png" alt="image-20230914185621367"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141903873.png" alt="image-20230914190330802"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141913026.png" alt="image-20230914191326952"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141914863.png" alt="image-20230914191409784"></li>
</ol>
<h1 id="三级错题"><a href="#三级错题" class="headerlink" title="三级错题"></a>三级错题</h1><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308302015307.png" alt="image-20230830201504175"></li>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308302019861.png" alt="image-20230830201948812"></p>
<ol start="3">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308302022734.png" alt="image-20230830202242644"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091635587.png" alt="image-20230909163506432"></li>
</ol>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091648697.png" alt="image-20230909164800581"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091648164.png" alt="image-20230909164813100"></p>
<ol start="6">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091702797.png" alt="image-20230909170203709"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141851640.png" alt="image-20230914185107561"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141854457.png" alt="image-20230914185454384"></li>
<li>​       <img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309161219879.png" alt="image-20230916121954783"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309161222176.png" alt="image-20230916122225094"></li>
</ol>
<h1 id="四级多选"><a href="#四级多选" class="headerlink" title="四级多选"></a>四级多选</h1><ol>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141554662.png" alt="image-20230914155421575"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141555826.png" alt="image-20230914155531719"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141556596.png" alt="image-20230914155639509"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141558461.png" alt="image-20230914155844382"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141600999.png" alt="image-20230914160030926"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141601482.png" alt="image-20230914160106405"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141604576.png" alt="image-20230914160424493"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141914317.png" alt="image-20230914191440249"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141919770.png" alt="image-20230914191905688"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141921330.png" alt="image-20230914192134257"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>日程表</tag>
      </tags>
  </entry>
  <entry>
    <title>2024唐迟考研英语</title>
    <url>/2023/10/04/2023-2024%E5%94%90%E8%BF%9F%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h1 id="好句"><a href="#好句" class="headerlink" title="好句"></a>好句</h1><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310041035654.png" alt="image-20231004103551500"></p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><ol>
<li>当真题看到一个不会的词时，去有道翻译看牛津的<strong>英英释义</strong></li>
<li><strong>come to</strong>现在开始….。代表以前的不重要<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310081444061.png" alt="image-20231008144451977"></li>
<li>关注<strong>代词</strong>，获取充分信息</li>
<li><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20231010203035052.png" alt="image-20231010203035052"></li>
</ol>
<p>例子在前，<strong>yet</strong>说明前后意思相反，答案是yet后意思的相反的意思</p>
<ol start="5">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310141928665.png" alt="image-20231014192820339"></li>
</ol>
<p>有<strong>But</strong>取反</p>
<ol start="6">
<li>考研文章中的斜体字表示书名，<strong>尽量读懂</strong></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考研英语</tag>
      </tags>
  </entry>
  <entry>
    <title>2025考研</title>
    <url>/2023/10/27/2023-2025%E8%80%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h1><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311051516460.png" alt="image-20231105151620255"></p>
]]></content>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/05/11/2023-Docker/</url>
    <content><![CDATA[<h1 id="Docker基本操作命令"><a href="#Docker基本操作命令" class="headerlink" title="Docker基本操作命令"></a>Docker基本操作命令</h1><p>其实没什么记录必要，只需查看帮助文档就行了</p>
<p>不知道的命令，可以去<a href="">docker hub</a>查看命令</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>systemctl start docker</code></p>
<h2 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h2><p><code>docker --help</code></p>
<h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><p><code>docker images</code></p>
<h2 id="查看容器状态"><a href="#查看容器状态" class="headerlink" title="查看容器状态"></a>查看容器状态</h2><p><code>docker ps</code></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE</title>
    <url>/2023/09/03/2023-JavaEE/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>1.如果不能创建.java文件，那么就是项目的src文件没有被当成sources文件，解决方法如下<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031942306.png" alt="img"></p>
<ol start="2">
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java程序设计</title>
    <url>/2023/03/03/2023-Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="散记"><a href="#散记" class="headerlink" title="散记"></a>散记</h3><ol>
<li>一个源文件最多只有一个public类, 其他类的个数不限，如果一个源文件包含一个public类，那么该文件要以该public类名命名</li>
<li>关键字中所有字母都为小写</li>
<li>Java中不能用0和非0来表示真和假</li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303031047259.png"></p>
<h4 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303031107093.png"></p>
<p>其中,当把任何基本类型的值和字符串值进行连接运算时(+)，基本类型的值将自动转化为字符串类型。</p>
<p>对其进行样例解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> + <span class="string">&quot;Hello&quot;</span>); <span class="comment">// 98Hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello!&quot;</span> + <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>); <span class="comment">// Hello!a1</span></span><br></pre></td></tr></table></figure>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ol>
<li>boolean类型不可以转换为其它的数据类型。</li>
</ol>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol>
<li>数组是引用类型</li>
<li>对于基本数据类型而言，默认初始化值各有不同</li>
<li>对于引用数据类型而言，默认初始化值为null(注意与0不同)</li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303310832353.png"></li>
<li>特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组。</li>
<li>局部变量声明时不指定权限修饰符，与所在方法修饰符一样</li>
</ol>
<h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120829731.png" alt="image-20230512082941627"></p>
<h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120858659.png" alt="image-20230512085802559"></p>
<h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120909328.png" alt="image-20230512090910259"></p>
<h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><ol>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120916994.png" alt="image-20230512091604925"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120918302.png" alt="image-20230512091849225"></p>
<p>3.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230512091920488.png" alt="image-20230512091920488"></p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol>
<li><p>static方法访问非static,编译不通过</p>
</li>
<li><p>局部变量声明时不指定权限修饰符，与所在方法修饰符一样</p>
</li>
<li><p>类里面有属性和方法，不能有单独的语句</p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304070858050.png"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304070941164.png"></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304071048269.png"></p>
</li>
</ol>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="散记-1"><a href="#散记-1" class="headerlink" title="散记"></a>散记</h3><p>1.Java只支持<strong>单继承</strong>,不允许多继承</p>
<p>2.方法的重写</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304101542067.png"></p>
<p>3.接口也可以继承另一个接口，使用extends关键字。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305121050303.png" alt="image-20230512105057220"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/04/29/2023-Linux/</url>
    <content><![CDATA[<h1 id="FinalShell"><a href="#FinalShell" class="headerlink" title="FinalShell"></a>FinalShell</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://blog.csdn.net/weixin_57349957/article/details/125103677?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169889151516800227424303%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169889151516800227424303&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125103677-null-null.142%5Ev96%5Epc_search_result_base7&utm_term=%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AEip&spm=1018.2226.3001.4187">csdn</a></p>
<h2 id="连接服务器步骤"><a href="#连接服务器步骤" class="headerlink" title="连接服务器步骤"></a>连接服务器步骤</h2><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291608049.png" alt="image-20230429160825573"></p>
<h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>用<strong>ssh</strong>连接</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291608230.png" alt="image-20230429160853178"></p>
<h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>ip查看命令为 <code>ip addr</code></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291615991.png" alt="image-20230429161516931"></p>
<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291630467.png" alt="image-20230429163048404"></p>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291632142.png" alt="image-20230429163213076"></p>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291633780.png" alt="image-20230429163335709"></p>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291635349.png" alt="image-20230429163545273"></p>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291636915.png" alt="image-20230429163607837"></p>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291637686.png" alt="image-20230429163733620"></p>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291639391.png" alt="image-20230429163915317"></p>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291641936.png" alt="image-20230429164150844"></p>
<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>1. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291645470.png" alt="image-20230429164544389"></p>
<p>2. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291651684.png" alt="image-20230429165135574"></p>
<h2 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h2><ol>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291703853.png" alt="image-20230429170302737"></p>
<ol start="2">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291705972.png" alt="image-20230429170521895"></p>
<p>3. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291705647.png" alt="image-20230429170557582"></p>
<p>4. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291707511.png" alt="image-20230429170720447"></p>
<p>5. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291707178.png" alt="image-20230429170753103"></p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291710533.png" alt="image-20230429171024457"></p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291711246.png" alt="image-20230429171144151"></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301450456.png" alt="image-20230430145023347"></p>
<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><h3 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301536746.png" alt="image-20230430153655637"></p>
<h3 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301540239.png" alt="image-20230430154028133"></p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="切换到root，并更改普通用户权限"><a href="#切换到root，并更改普通用户权限" class="headerlink" title="切换到root，并更改普通用户权限"></a>切换到root，并更改普通用户权限</h2><p><a href="https://blog.csdn.net/weixin_50589168/article/details/121576786?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169889067316777224436660%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169889067316777224436660&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121576786-null-null.142%5Ev96%5Epc_search_result_base7&utm_term=student%20%E4%B8%8D%E5%9C%A8%20sudoers%20%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82%E6%AD%A4%E4%BA%8B%E5%B0%86%E8%A2%AB%E6%8A%A5%E5%91%8A%E3%80%82&spm=1018.2226.3001.4187">csdn</a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>su - root</li>
<li>chmod u+w &#x2F;etc&#x2F;sudoers</li>
<li>vim &#x2F;etc&#x2F;sudoers</li>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311021013959.png" alt="img"></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MakeDown格式笔记</title>
    <url>/2023/01/27/2023-MakeDown%E6%A0%BC%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="常用方法博客链接"><a href="#常用方法博客链接" class="headerlink" title="常用方法博客链接"></a>常用方法博客链接</h3><ul>
<li><a href="https://blog.csdn.net/qq_43732429/article/details/108034518?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167498604716782429779685%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167498604716782429779685&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108034518-null-null.142%5Ev71%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=makedown%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2&spm=1018.2226.3001.4187">字体颜色大小及文字底色设置</a></li>
<li><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167481263716800192266470%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167481263716800192266470&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-79207643-null-null.142%5Ev71%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=makedown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%A4%A7%E5%85%A8&spm=1018.2226.3001.4187">数学符号博客1</a></li>
<li><a href="http://events.jianshu.io/p/4bf8d083b8ab">数学符号博客2</a></li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>加粗 <code>Ctrl + B</code></li>
<li>斜体 <code>Ctrl + B</code></li>
<li>引用 <code>Ctrl + Q</code></li>
<li>插入链接 <code>Ctrl + L</code></li>
<li>插入代码 <code>Ctrl + K</code></li>
<li>插入图片 <code>Ctrl + G</code></li>
<li>提升标题 <code>Ctrl + H</code></li>
<li>有序列表 <code>Ctrl + O</code></li>
<li>无序列表 <code>Ctrl + U</code></li>
<li>横线 <code>Ctrl + R</code></li>
<li>撤销 <code>Ctrl + Z</code></li>
<li>重做 <code>Ctrl + Y</code></li>
</ul>
<h2 id="语法标题"><a href="#语法标题" class="headerlink" title="语法标题"></a>语法标题</h2><ol>
<li>一级标题使用<code># 标题名</code>,其中<code>#</code> 后面有个空格</li>
<li>二级标题使用<code>## 标题名</code>，以此类推</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用<code>* 名字</code></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><code>![图片描述](图片路径)</code></p>
<p>其中</p>
<ul>
<li>图片描述可省略</li>
<li>图片路径可为本地路径或者网络下载路径</li>
</ul>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><ul>
<li>三个以上<code>---</code>或<code>***</code></li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用<code>三个反引号</code></p>
<hr>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p><code>&lt;br /&gt;</code></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标题</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">## 目录</span><br><span class="line">1. [目录1](#jump1)</span><br><span class="line">2. [目录2](#jump2)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">### &lt;span id=&quot;jump1&quot;&gt;1. 目录1&lt;/span&gt;</span><br><span class="line">---</span><br><span class="line">### &lt;span id=&quot;jump2&quot;&gt;2. 目录2&lt;/span&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><code>[名字](链接)</code></p>
<h2 id="打空格"><a href="#打空格" class="headerlink" title="打空格"></a>打空格</h2><p><code>$~~~$</code> **注:**其中<code>~</code>根据需求添加</p>
<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><p>单行数学符号用**$<strong>左右包起来<br>多行数学符号用</strong>$$**上下包起来</p>
]]></content>
      <categories>
        <category>MakeDown</category>
      </categories>
      <tags>
        <tag>MakeDown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2023/03/10/2023-Mysql/</url>
    <content><![CDATA[<h1 id="MySQL常用操作"><a href="#MySQL常用操作" class="headerlink" title="MySQL常用操作"></a>MySQL常用操作</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. show character set;				- 查看MySQL支持的字符集以及对应的校对规则</span><br><span class="line">2. show variables like &#x27;char%&#x27;;  	- 查看当前连接系统的参数</span><br><span class="line">3. status;							- 查看MySQL的状态信息</span><br><span class="line">4. show engines \G;					- 查看该版本支持的数据库存储引擎</span><br><span class="line">5. show create database 数据库名\G;	  - 显示数据库的创建信息</span><br></pre></td></tr></table></figure>

<h1 id="散记"><a href="#散记" class="headerlink" title="散记"></a>散记</h1><ol>
<li>主键字段的值不允许为<strong>null</strong>,而UNIQUE字段的值可取null，但是必须使用null声明，只是null值最多有一个。</li>
<li>WHERE操作是从数据表中获取数据符合条件的数据，而HAVING是根据条件对已分组的数据进行操作</li>
<li>HAVING位于GROUPBY BY子句后，而WHERE位于GROUP BY子句前</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2023/11/03/2023-Vue/</url>
    <content><![CDATA[<p><a href="https://cn.vuejs.org/">Vue2官网</a></p>
<p><a href="https://vuejs.org/">Vue3官网</a></p>
<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031400369.png" alt="image-20231103140044273"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&#x27;Hello 黑马&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">666</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p><a href="https://v2.cn.vuejs.org/v2/api/">API文档</a></p>
<h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><p><code>&#123;&#123;&#125;&#125;</code></p>
<h3 id="错误用法"><a href="#错误用法" class="headerlink" title="错误用法"></a>错误用法</h3><p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031403952.png" alt="image-20231103140301867"></p>
<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p><strong>示例</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031439041.png" alt="image-20231103143908920"></p>
<p>注意<code>link</code>那里的值用<strong>单引号</strong>包起来的</p>
<p><strong>效果</strong><br><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031445226.png" alt="image-20231103144507162"></p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031445462.png" alt="image-20231103144546401"></p>
<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031446667.png" alt="image-20231103144606617"></p>
<p>v-show和v-if的区别：<br><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031448371.png" alt="image-20231103144806304"></p>
<p>所以v-show适合频繁切换的场景</p>
<p>v-if要么显示，要么隐藏，不频繁切换</p>
<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><h3 id="v-on-click"><a href="#v-on-click" class="headerlink" title="v-on:click"></a>v-on:click</h3><p><strong>操作代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button v-on:click=&quot;cnt++&quot;&gt;+&lt;/button&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cnt++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;cnt&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cnt--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cnt</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果:</strong></p>
<p><video src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311032152508.mp4" controls="controls">您的浏览器不支持播放该视频！</video></p>
<blockquote>
<p>v-on:click可以用@click代替</p>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- func是一个函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;func&quot;</span>&gt;</span>点击切换显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;is_show&quot;</span>&gt;</span>GanBro<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">is_show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">func</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">is_show</span> = !<span class="variable language_">this</span>.<span class="property">is_show</span></span></span><br><span class="line"><span class="language-javascript">                &#125;   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>像<code>&lt;h1 v-show=&quot;is_show&quot;&gt;GanBro&lt;/h1&gt;</code>一样内联调用不用加this，函数里面调用要加this</p>
<p>其中<code>&lt;button @click=&quot;func&quot;&gt;点击切换显示&lt;/button&gt; </code>，点击的时候调用func函数。</p>
<blockquote>
<p>最好直接用<code>函数名+()</code>的形式，比较直观</p>
</blockquote>
<h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/* 设置元素内容与边框之间的内边距。 */</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/* 设置元素与周围元素之间的外边距。 */</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>GanBro售货机<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(-milk_price)&quot;</span>&gt;</span>购买牛奶<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(-bread_price)&quot;</span>&gt;</span>购买面包<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(-milkTea_price)&quot;</span>&gt;</span>购买奶茶<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;money+=100&quot;</span>&gt;</span>银行卡余额增加100元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>银行卡余额为&#123;&#123;money&#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input_milk_price&quot;</span>&gt;</span>请输入牛奶的价格：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_milk_price&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;milk_price&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input_milk_bread&quot;</span>&gt;</span>请输入面包的价格：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_milk_bread&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bread_price&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input_milkTea_price&quot;</span>&gt;</span>请输入奶茶的价格：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_milk_price&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;milkTea_price&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">money</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">milk_price</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">bread_price</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">milkTea_price</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">buy</span>(<span class="params">x</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">money</span> += x</span></span><br><span class="line"><span class="language-javascript">                &#125;   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在输入框上使用 <code>v-model=&quot;demo&quot;</code> 指令，将输入框的值与 Vue 实例中的 <code>demo</code>数据进行双向绑定。当用户输入文本时，Vue 将自动更新 <code>demo</code>的值，并在页面上显示出来。</p>
</blockquote>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;img v-bind:src=&quot;img&quot;&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">img</span>: <span class="string">&quot;https://img2.baidu.com/it/u=1684257589,389141728&amp;fm=253&amp;fmt=auto?w=1423&amp;h=800&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>v-bind可以直接省略不写，例如v-bind:src可以写成:src</p>
</blockquote>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;index &gt; 0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;func(-1)&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;list[index]&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;index &lt; list.length-1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;func(1)&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">index</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-00.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-01.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-02.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-03.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-04.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-05.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">func</span>(<span class="params">x</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">index</span> += x</span></span><br><span class="line"><span class="language-javascript">                &#125;   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>GanBro水果店<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;li v-for=&quot;(item, index) in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;梨子&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下用了<code>this.booksList = this.booksList.filter(item =&gt; item.id !== id)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>GanBro的书架<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in booksList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.author&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">booksList</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;《红楼梦》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;曹雪芹&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;《西游记》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;吴承恩&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;《水浒传》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span> &#125;,    </span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;《三国演义》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;罗贯中&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// booksList数组中每一项的id不等于传入的id时，保留</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// filter不会改变原数组，只会保存到新数组里面， 所以有赋值操作</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">booksList</span> = <span class="variable language_">this</span>.<span class="property">booksList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311041325561.png" alt="image-20231104132539439"></p>
<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>双向绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reset()&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>案例：小黑记事本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主体区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>小黑记事本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;todoName&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入任务&quot;</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 列表区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 统计和清空 → 如果没有任务了，底部隐藏掉 → v-show --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;list.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 统计 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span>合 计:<span class="tag">&lt;<span class="name">strong</span>&gt;</span> &#123;&#123; list.length &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 清空 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clear-completed&quot;</span>&gt;</span></span><br><span class="line">      清空任务</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加功能</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 通过 v-model 绑定 输入框 → 实时获取表单元素的内容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 点击按钮，进行新增，往数组最前面加 unshift</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">todoName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;跑步一公里&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;跳绳200个&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;游泳100米&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      del (id) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(id) =&gt; filter 保留所有不等于该 id 的项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      add () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">todoName</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;请输入任务名称&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">todoName</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">todoName</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      clear () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span> = []</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>unshift()</code>是JavaScript数组的一个方法，它可以在数组的开头插入一个或多个元素，并返回新数组的长度。与<code>push()</code>方法不同，<code>unshift()</code>方法会修改原始数组而不是在末尾添加新元素。</p>
<p><code>unshift()</code>方法接受一个或多个参数，在数组的开头插入这些参数，并将已有的元素向后移动。插入的元素的顺序与它们在参数列表中的顺序相同。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>codeforces做题记录</title>
    <url>/2023/01/31/2023-codeforces%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="constructive-algorithms"><a href="#constructive-algorithms" class="headerlink" title="constructive algorithms"></a>constructive algorithms</h1><h2 id="1426D-Non-zero-Segments-1500"><a href="#1426D-Non-zero-Segments-1500" class="headerlink" title="1426D - Non-zero Segments(1500)"></a><a href="https://codeforces.com/problemset/problem/1426/D">1426D - Non-zero Segments(1500)</a></h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>任意子段内无<strong>和为0</strong>的段，那么便通过前缀和，存入set，如果有和为0的子段，那么前缀和必有两段是相等的。</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, n, res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    unordered_set&lt;LL&gt; et;</span><br><span class="line">    et.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        s += x;</span><br><span class="line">        <span class="keyword">if</span> (et.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            et.<span class="built_in">clear</span>();</span><br><span class="line">            et.<span class="built_in">insert</span>(<span class="number">0</span>); </span><br><span class="line">            s = x;</span><br><span class="line">        &#125;</span><br><span class="line">        et.<span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) solve();</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="1396A-Multiples-of-Length-1600"><a href="#1396A-Multiples-of-Length-1600" class="headerlink" title="1396A - Multiples of Length(1600)"></a><a href="https://codeforces.com/contest/1396/problem/A">1396A - Multiples of Length(1600)</a></h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>要三次内把数组中所有元素变为0，那么可以第一次让第一个数为0，第二次选中1<del>n，使它们减去自身的n倍，得到**(n-1)a[i]**,再选中2</del>n,加上各自的n-1倍，那么就让全数组为0了</p>
<h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;LL&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 1\n0\n1 1\n0\n1 1 %lld\n&quot;</span>, -a[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 1 \n%lld\n&quot;</span>, -a[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 %d\n&quot;</span>, n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cout &lt;&lt; -a[i] * n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n2 %d\n&quot;</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (LL)(n - <span class="number">1</span>) * a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1365B-Trouble-Sort-1700"><a href="#1365B-Trouble-Sort-1700" class="headerlink" title="1365B - Trouble Sort(1700)"></a><a href="https://codeforces.com/contest/1365/problem/B">1365B - Trouble Sort(1700)</a></h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>贪心加bfs，想要让换人不跑出去，最佳决策是将坏人周围全部围起来，如果换人旁边有好人，那么如果要围住坏人必然会将好人围住，即为No，如果不然，从终点开始bfs，看是否能够找到每一个好人。</p>
<h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = dx[i] + u, y = dy[i] + v;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;.&#x27;</span>) g[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;PII&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(&#123;n, m&#125;);</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		PII t = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="type">int</span> x = t.fi, y = t.se;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line">			<span class="keyword">if</span> (st[xx][yy] || g[xx][yy] == <span class="string">&#x27;#&#x27;</span> || xx &lt; <span class="number">1</span> || xx &gt; n || yy &lt; <span class="number">1</span> || yy &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (g[xx][yy] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">				cnt --;</span><br><span class="line">				<span class="keyword">if</span> (!cnt) <span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			st[xx][yy] = <span class="literal">true</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(&#123;xx, yy&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">				cin &gt;&gt; g[i][j];</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;G&#x27;</span>) cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// cout &lt;&lt; &quot;cnt = &quot; &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;B&#x27;</span>) <span class="built_in">gan</span>(i, j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// cout &lt;&lt; &quot;flag = &quot; &lt;&lt; flag &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (g[n][m] != <span class="string">&#x27;#&#x27;</span>) <span class="built_in">bfs</span>();</span><br><span class="line">		<span class="comment">// cout &lt;&lt; &quot;cnt = &quot; &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">		cout &lt;&lt; (!cnt ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Phoenix-and-Distribution（1600）"><a href="#C-Phoenix-and-Distribution（1600）" class="headerlink" title="C. Phoenix and Distribution（1600）"></a><a href="https://codeforces.com/problemset/problem/1348/C">C. Phoenix and Distribution（1600）</a></h2><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>先排序毋庸置疑，如果前面k个字母不是同一个字母，说明由第k个字母单独组成的字符串字典序最大，因为分成k组每一组都至少一个字母，那么第k个字母的字典序最大，所以要让它最小，便只输出这一个字母。如果前k个字符是同一个字母，就看第k+1个字母和最后一个字母是否是同一个，如果是，那么便让该字母个数分配给k组，如果有剩余，那么输出一个该字母，剩下的分给其他组。如果不是同一个，那么如果要让最大字典序最小，只能让其输出剩下的所有字母，不然总会给一个组分配一个字典序比较大的字母，导致最大字典序变大，不是题意所要求的结果。</p>
<h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	<span class="type">int</span> n, k;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (s[<span class="number">0</span>] != s[k - <span class="number">1</span>]) &#123;</span><br><span class="line">		cout &lt;&lt; s[k - <span class="number">1</span>];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; s[k - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s[k] == s[len - <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="type">int</span> sum = (len - k) / k + ((len - k) % k != <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">while</span> (sum--) &#123;</span><br><span class="line">				cout &lt;&lt; s[k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; len; i++) cout &lt;&lt; s[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D2-Sage’s-Birthday-hard-version-1500"><a href="#D2-Sage’s-Birthday-hard-version-1500" class="headerlink" title="D2. Sage’s Birthday (hard version)(1500)"></a><a href="https://codeforces.com/problemset/problem/1419/D2">D2. Sage’s Birthday (hard version)(1500)</a></h2><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><p>贪心策略，要让cnt尽可能大，那么让数组先排序，不管数组长度奇偶，都让大的序列有<strong>int t &#x3D; n &#x2F; 2 + 1</strong>个，这样能尽可能让结果大，比如序列为<strong>1 2 2 4</strong>，结果序列是<strong>2142</strong>，如果是<strong>1 2 2 4 5</strong>，结果序列是<strong>21425</strong></p>
<h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(N)</span>, <span class="title">b</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">begin</span>() + <span class="number">1</span> + n);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> t = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = t; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">		b[i] = a[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">		b[i] = a[j++];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b[i] &lt; b[i - <span class="number">1</span>] &amp;&amp; b[i] &lt; b[i + <span class="number">1</span>]) cnt++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) &#123;</span></span><br><span class="line">	<span class="comment">// 	solve();</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Even-Picture-1500"><a href="#C-Even-Picture-1500" class="headerlink" title="C. Even Picture(1500)"></a><a href="https://codeforces.com/problemset?order=BY_SOLVED_DESC&tags=constructive+algorithms,1500-1800">C. Even Picture(1500)</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><p>题目看起来很绕，但总结下来发现规律就很简单。</p>
<p>题目要求：</p>
<ul>
<li>所有灰块为一个连通块</li>
<li>每个灰块与偶数个灰块相邻</li>
<li>恰有 <strong>n</strong> 个灰块四周都有灰块</li>
</ul>
<p>根据这个特性，只要构造出如下图类型的图便可AC</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071909699.png"></p>
<h3 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(N)</span>, <span class="title">b</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> r = <span class="number">2</span> + n, c = r;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n * <span class="number">3</span> + <span class="number">4</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0 0\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1 0\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; c - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = t; j &lt;= t + <span class="number">2</span>; j++) &#123;</span><br><span class="line">			cout &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		t++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, r - <span class="number">2</span>, c - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, r - <span class="number">1</span>, c - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) &#123;</span></span><br><span class="line">	<span class="comment">// 	solve();</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Trouble-Sort"><a href="#B-Trouble-Sort" class="headerlink" title="B. Trouble Sort"></a><a href="https://codeforces.com/problemset/problem/1365/B">B. Trouble Sort</a></h2><h3 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h3><p>如果至少有一个0并且至少有一个1，那么就可以随意交换两个数（细品）</p>
<h3 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> x, last = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">bool</span> sorted = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">bool</span> s0 = <span class="literal">false</span>, s1 = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (~last &amp;&amp; last &gt; x) &#123;</span><br><span class="line">			sorted = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		last = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x) s1 = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> s0 = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sorted || (s1 &amp;&amp; s0)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="A1-Prefix-Flip-Easy-Version"><a href="#A1-Prefix-Flip-Easy-Version" class="headerlink" title="A1. Prefix Flip (Easy Version)"></a><a href="https://codeforces.com/problemset/problem/1381/A1">A1. Prefix Flip (Easy Version)</a></h2><h3 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h3><p>先操作1到i，再操作1，最后再操作1到i，即可将第i位改变，而1到i-1不变,最多操作3*n次</p>
<h3 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; op;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] != s2[i]) &#123;</span><br><span class="line">            op.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">            op.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            op.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; op.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : op) cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Epic-Transformation"><a href="#D-Epic-Transformation" class="headerlink" title="D. Epic Transformation"></a><a href="https://codeforces.com/problemset/problem/1506/D">D. Epic Transformation</a></h2><h3 id="思路：-7"><a href="#思路：-7" class="headerlink" title="思路："></a>思路：</h3><p>先用mp存每个数的出现次数，再把每个数的出现次数入优先队列。遍历时每次拿出两个最大的出现次数，因为优先队列里的保存的是每个数的出现次数，所以每个出现次数都对应不同的数，可以直接消去。最后的结果要么是全部消除，要么是队头的出现次数，不可能还有队列的其他出现次数，假设有，那么必定会被队头的出现次数消去。</p>
<h3 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; heap;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        cnt[x]++;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = cnt.<span class="built_in">begin</span>(); it != cnt.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        heap.<span class="built_in">push</span>(it-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = n;</span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">int</span> t1 = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> t2 = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        res -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 - <span class="number">1</span>) heap.<span class="built_in">push</span>(t1 - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t2 - <span class="number">1</span>) heap.<span class="built_in">push</span>(t2 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (heap.<span class="built_in">size</span>() == <span class="number">0</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; heap.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="比赛补题："><a href="#比赛补题：" class="headerlink" title="比赛补题："></a>比赛补题：</h1><h2 id="B-Sum-of-Two-Numbers"><a href="#B-Sum-of-Two-Numbers" class="headerlink" title="B. Sum of Two Numbers"></a><a href="https://codeforces.com/contest/1788/problem/B">B. Sum of Two Numbers</a></h2><h3 id="思路：-8"><a href="#思路：-8" class="headerlink" title="思路："></a>思路：</h3><p>昨晚脑抽了，这道题很简单，就依次遍历每一位，保持a,b的数位和不超过一，让a成为大的数，如果b的数位和大于a就交换ab</p>
<h3 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x) &#123;</span><br><span class="line">		ret += x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		string s;</span><br><span class="line">		cin &gt;&gt; s;</span><br><span class="line">		<span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			num = num * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; num / <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">				<span class="type">int</span> t = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				<span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">					a = a * <span class="number">10</span> + t / <span class="number">2</span>;</span><br><span class="line">					b = b * <span class="number">10</span> + t / <span class="number">2</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					a = a * <span class="number">10</span> + t / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">					b = b * <span class="number">10</span> + t / <span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">get</span>(a) &gt; <span class="built_in">get</span>(b)) <span class="built_in">swap</span>(a, b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Phoenix-and-Beauty"><a href="#B-Phoenix-and-Beauty" class="headerlink" title="B. Phoenix and Beauty"></a><a href="https://codeforces.com/problemset/problem/1348/B">B. Phoenix and Beauty</a></h2><h3 id="思路：-9"><a href="#思路：-9" class="headerlink" title="思路："></a>思路：</h3><p>每个子序列和相同，一眼丁真，考虑周期序列，如果非重复元素数量大于k，说明不可能构造一个k个数循环的序列。如果小于k，补数。</p>
<h3 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		S.<span class="built_in">insert</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">size</span>() &gt; m) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; n * m &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> x : S) &#123;</span><br><span class="line">			cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = S.<span class="built_in">size</span>(); i &lt; m; i++) cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Candy-Store"><a href="#C-Candy-Store" class="headerlink" title="C. Candy Store"></a><a href="https://codeforces.com/contest/1798/problem/C">C. Candy Store</a></h2><h3 id="思路：-10"><a href="#思路：-10" class="headerlink" title="思路："></a>思路：</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303271234768.png"></p>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lcm</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (LL)a * b / <span class="built_in">gcd</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	LL g = <span class="number">0</span>, m = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">gcd</span>(g, <span class="number">1ll</span> * a[i] * b[i]) % <span class="built_in">lcm</span>(m, <span class="number">1ll</span> * b[i]) != <span class="number">0</span>) &#123;</span><br><span class="line">			res ++;</span><br><span class="line">			g = <span class="number">0</span>, m = <span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		g = <span class="built_in">gcd</span>(g, <span class="number">1ll</span> * a[i] * b[i]);</span><br><span class="line">		m = <span class="built_in">lcm</span>(m, <span class="number">1ll</span> * b[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="VP"><a href="#VP" class="headerlink" title="VP"></a>VP</h1><h2 id="div2"><a href="#div2" class="headerlink" title="div2"></a>div2</h2><h3 id="2023-3-21"><a href="#2023-3-21" class="headerlink" title="2023.3.21"></a><a href="https://codeforces.com/contest/1806">2023.3.21</a></h3><h4 id="B-Mex-Master"><a href="#B-Mex-Master" class="headerlink" title="B. Mex Master"></a><a href="https://codeforces.com/contest/1806/problem/B">B. Mex Master</a></h4>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces题目常见词汇</title>
    <url>/2023/03/12/2023-codeforces%E9%A2%98%E7%9B%AE%E5%B8%B8%E8%A7%81%E8%AF%8D%E6%B1%87/</url>
    <content><![CDATA[<h1 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h1><ol>
<li>divisor			除数</li>
<li>product          乘积</li>
<li></li>
</ol>
<h1 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. composite number 	合数</span><br><span class="line">2. alternating sum      交替和</span><br><span class="line">3. </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>github笔记</title>
    <url>/2023/01/31/2023-github%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="通过hosts访问github方法-下载软件之后"><a href="#通过hosts访问github方法-下载软件之后" class="headerlink" title="通过hosts访问github方法(下载软件之后)"></a>通过hosts访问github方法(下载软件之后)</h1><ol>
<li>进入<code>D:\SoftWare\hosts-server-pkg-win-x64</code></li>
<li>在<code>cmd</code>窗口输入<code>.\hosts-server.exe --port=8888</code></li>
<li>在浏览器输入<code>http://localhost:8888</code>查看最新hosts</li>
<li>进入<code>C:\Windows\System32\drivers\etc</code></li>
<li>在HOSTS中添加最新的hosts即可本地访问github</li>
</ol>
<h1 id="Whale加速器"><a href="#Whale加速器" class="headerlink" title="Whale加速器"></a>Whale加速器</h1><p>把<code>C:\ProgramData\Whale</code>里面的内容删除即可无限注册</p>
<h1 id="GitHub常用命令"><a href="#GitHub常用命令" class="headerlink" title="GitHub常用命令"></a>GitHub常用命令</h1><p><a href="https://zhuanlan.zhihu.com/p/193140870">博客链接</a></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304212232054.jpeg"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304211318815.png"></p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><blockquote>
<p>来源于黑马程序员视频</p>
</blockquote>
<h2 id="常用操作步骤"><a href="#常用操作步骤" class="headerlink" title="常用操作步骤"></a>常用操作步骤</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290858644.png" alt="image-20230429085858530"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290908565.png" alt="image-20230429090848475"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290913300.png" alt="image-20230429091338219"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290920557.png" alt="image-20230429092012459"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290920494.png" alt="image-20230429092045403"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290930764.png" alt="image-20230429093022653"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290936814.png" alt="image-20230429093655725"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290939549.png" alt="image-20230429093928453"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291007140.png" alt="image-20230429100703079"></li>
</ol>
<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p><a href="https://blog.csdn.net/Heikepengmu/article/details/125801243">csdn</a></p>
<h1 id="在IDEA上推送代码到github"><a href="#在IDEA上推送代码到github" class="headerlink" title="在IDEA上推送代码到github"></a>在IDEA上推送代码到github</h1><p><a href="https://www.bilibili.com/video/BV13a411q753/?p=157&spm_id_from=pageDriver&vd_source=a76b9df816154c5c105a543f1d93bb5b">视频教程链接</a></p>
<h1 id="Picgo"><a href="#Picgo" class="headerlink" title="Picgo"></a>Picgo</h1><h2 id="图床配置"><a href="#图床配置" class="headerlink" title="图床配置"></a>图床配置</h2><p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202310301721534.png" alt="image-20231030172154457"></p>
<p><strong>cdn加速：</strong>添加前缀<a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a></p>
<h1 id="SSH连接配置"><a href="#SSH连接配置" class="headerlink" title="SSH连接配置"></a>SSH连接配置</h1><p><a href="https://blog.csdn.net/qq_30049011/article/details/121182065?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-121182065-blog-131951858.235%5Ev38%5Epc_relevant_anti_vip&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-121182065-blog-131951858.235%5Ev38%5Epc_relevant_anti_vip&utm_relevant_index=6">csdn</a></p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用操作记录</title>
    <url>/2023/01/27/2023-hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是我的第一篇<code>Hexo</code>博客文章。</p>
<p>主题：<a href="https://github.com/D-Sketon/hexo-theme-reimu">https://github.com/D-Sketon/hexo-theme-reimu</a></p>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><a href="https://blog.csdn.net/qq_40590778/article/details/104606611?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167498271516800182128778%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167498271516800182128778&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104606611-null-null.142%5Ev71%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=hexo%20next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96&spm=1018.2226.3001.4187">美化</a></p>
<p><a href="https://removeif.github.io/theme/%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%86%E4%BA%AB.html">主题</a></p>
<p><a href="https://blog.csdn.net/a3212/article/details/77163817">评论系统</a></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><p><code>&lt;video src=&quot;视频链接&quot; controls=&quot;controls&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;您的浏览器不支持播放该视频！&lt;/video&gt;</code></p>
<h1 id="运行本地hexo服务器"><a href="#运行本地hexo服务器" class="headerlink" title="运行本地hexo服务器"></a>运行本地hexo服务器</h1><p>在<code>Git Bash Here</code>输入<code>hexo s</code></p>
<h1 id="创建一个-md文本文件"><a href="#创建一个-md文本文件" class="headerlink" title="创建一个.md文本文件"></a>创建一个.md文本文件</h1><ul>
<li>在<code>Git Bash Here</code>输入<code>hexo new post 你所想要生成的文件名</code></li>
<li>如果是生成草稿文件，则输入<code>hexo new draft 你所想生成的草稿文件名</code></li>
</ul>
<h1 id="把更新后的代码同步到github方法"><a href="#把更新后的代码同步到github方法" class="headerlink" title="把更新后的代码同步到github方法"></a>把更新后的代码同步到github方法</h1><ol>
<li>先<code>hexo clean</code></li>
<li>先使用<code>hexo -g</code>把本地代码更新，等同于写<code>hexo -generate</code></li>
<li>使用<code>hexo -d</code>把本地代码部署到GitHub，等于于写<code>hexo -deploy</code></li>
</ol>
<p>推荐一个博客：<a href="https://cloud.tencent.com/developer/article/2063322">https://cloud.tencent.com/developer/article/2063322</a> </p>
<h1 id="配置分类、标签和关于"><a href="#配置分类、标签和关于" class="headerlink" title="配置分类、标签和关于"></a>配置分类、标签和关于</h1><ol>
<li><code>hexo new page tags</code></li>
<li><code>hexo new pae categories</code></li>
<li><code>hexo new page about</code></li>
</ol>
<h1 id="内容摘要"><a href="#内容摘要" class="headerlink" title="内容摘要"></a>内容摘要</h1><p>文章某一行输入<code>&lt;!--more--&gt;</code>，即可在首页只显示该行以上的文字</p>
<h5 id="结语：停更了，下次再写。"><a href="#结语：停更了，下次再写。" class="headerlink" title="结语：停更了，下次再写。"></a>结语：停更了，下次再写。</h5><p><code>date: 2023/1/27 14:31</code></p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p><code>&#123;&#123;&#125;&#125;</code>不能单独写在文档里，会报错，因为这是vue的语法，会被解析</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>ipad键盘快捷键</title>
    <url>/2023/03/14/2023-ipad%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141526777.jpg"></p>
]]></content>
      <tags>
        <tag>ipad</tag>
        <tag>键盘</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2023/05/01/2023-redis/</url>
    <content><![CDATA[<h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><h2 id="字符创string操作命令"><a href="#字符创string操作命令" class="headerlink" title="字符创string操作命令"></a>字符创string操作命令</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010905755.png" alt="image-20230501090509663"></p>
<h2 id="哈希hash操作命令"><a href="#哈希hash操作命令" class="headerlink" title="哈希hash操作命令"></a>哈希hash操作命令</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010906654.png" alt="image-20230501090607557"></p>
<h2 id="列表list常用命令"><a href="#列表list常用命令" class="headerlink" title="列表list常用命令"></a>列表list常用命令</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010909485.png" alt="image-20230501090941405"></p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010915059.png" alt="image-20230501091525972"></p>
<h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010918125.png" alt="image-20230501091805030"></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot笔记</title>
    <url>/2023/10/20/2023-springboot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ol>
<li>sprintboot的启动类所管理的Bean是它所在包下面的所有Bean</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310201541912.png" alt="image-20231020154140758"></p>
<p>​		这里启动类就是管理<strong>itheima</strong>下面的类</p>
<ol start="2">
<li><p>当项目要上线时，如果要修改配置，可以在resource下创建config包，并添加一个application.yml文件。这里的配置文件优先级更高<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310261654842.png" alt="image-20231026165423612"></p>
</li>
<li><p><strong>@ConfigurationProperties</strong>绑定属性支持属性名宽松绑定<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310271444299.png" alt="image-20231027144408175"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文档</title>
    <url>/2023/01/28/2023-test/</url>
    <content><![CDATA[<br >

<span id="more"></span>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#%E9%87%8D%E8%A6%81%E5%85%AC%E5%BC%8F">重要公式</a><ol>
<li><a href="#%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F">泰勒公式</a></li>
<li><a href="#%E9%87%8D%E8%A6%81%E7%BB%93%E8%AE%BA">重要结论</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F">常用的等价无穷小</a></li>
</ol>
</li>
</ol>
<!-- 视频 -->

<iframe width="100%" height="500" src="//player.bilibili.com/player.html?aid=215804925&bvid=BV1na411n7YK&cid=771746351&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<br>

<!-- 音频 -->

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=1876909269&auto=0&height=66"></iframe> 
]]></content>
  </entry>
  <entry>
    <title>天梯赛题</title>
    <url>/2023/03/19/2023-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E9%A2%98/</url>
    <content><![CDATA[<h1 id="7-14-重排链表"><a href="#7-14-重排链表" class="headerlink" title="7-14 重排链表"></a><a href="https://pintia.cn/problem-sets/1635630784604745728/exam/problems/1635648710732869633">7-14 重排链表</a></h1><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>数组模拟大法即可，选拔赛时间紧脑抽了没做出来，方才做了10几分钟样例过了，只不过还没提交，正确性待定</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	string address;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	string next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map&lt;string, pair&lt;<span class="type">int</span>, string&gt; &gt; mp;</span><br><span class="line"></span><br><span class="line">Node node1[N], node2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string start;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; start &gt;&gt; n;</span><br><span class="line">	string address;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	string next;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; address &gt;&gt; data &gt;&gt; next;</span><br><span class="line">		mp[address] = &#123;data, next&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		node1[idx++] = &#123;start, mp[start].fi, mp[start].se&#125;;</span><br><span class="line">		start = mp[start].se;</span><br><span class="line">		<span class="keyword">if</span> (start == <span class="string">&quot;-1&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	cout &lt;&lt; node1[i].address &lt;&lt; &quot; &quot; &lt;&lt; node1[i].val &lt;&lt; &quot; &quot; &lt;&lt; node1[i].next &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = idx - <span class="number">1</span>; i &gt;= n / <span class="number">2</span>; i--) &#123;</span><br><span class="line">		cout &lt;&lt; node1[i].address &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[i].val &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[cnt].address &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (cnt != n / <span class="number">2</span> - <span class="number">1</span>) cout &lt;&lt; node1[cnt].address &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[cnt].val &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[i - <span class="number">1</span>].address &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; node1[cnt].address &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[cnt].val &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) &#123;</span></span><br><span class="line">	<span class="comment">// 	solve();</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>密码</title>
    <url>/2023/10/19/2023-%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="rhel-8-2-x86-64-dvd"><a href="#rhel-8-2-x86-64-dvd" class="headerlink" title="rhel-8.2-x86_64-dvd"></a>rhel-8.2-x86_64-dvd</h2><h3 id="登录密码"><a href="#登录密码" class="headerlink" title="登录密码"></a>登录密码</h3><p>1433223</p>
<h3 id="用户密码"><a href="#用户密码" class="headerlink" title="用户密码"></a>用户密码</h3><p>1433223</p>
]]></content>
  </entry>
  <entry>
    <title>学成在线</title>
    <url>/2023/07/07/2023-%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="虚拟机Centos配置"><a href="#虚拟机Centos配置" class="headerlink" title="虚拟机Centos配置"></a>虚拟机Centos配置</h1><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307072108107.png" alt="image-20230707210839013"></p>
<h2 id="账号密码"><a href="#账号密码" class="headerlink" title="账号密码"></a>账号密码</h2><h2 id="虚拟机的MySQL"><a href="#虚拟机的MySQL" class="headerlink" title="虚拟机的MySQL"></a>虚拟机的MySQL</h2><p>账号：root	</p>
<p>密码：mysql</p>
<h2 id="gogs"><a href="#gogs" class="headerlink" title="gogs"></a>gogs</h2><p>账号：gogs</p>
<p>密码：gogs</p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><ol>
<li>很奇怪，必须要用whale推送代码才能成功，不然连接不上git</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>数据结构实验</title>
    <url>/2023/02/27/2023-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_SIZE 5     <span class="comment">/*初始分配的顺序表长度*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCREM 5        <span class="comment">/*溢出时，顺序表长度的增量*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  <span class="comment">/*定义表元素的类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sqlist</span>&#123;</span></span><br><span class="line">	ElemType *slist;      <span class="comment">/*存储空间的基地址*/</span></span><br><span class="line">	<span class="type">int</span> length;           <span class="comment">/*顺序表的当前长度*/</span></span><br><span class="line">	<span class="type">int</span> listsize;         <span class="comment">/*当前分配的存储空间*/</span></span><br><span class="line">&#125;Sqlist;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InitList_sq</span><span class="params">(Sqlist *L)</span>; <span class="comment">/*                             */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CreateList_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> n)</span>; <span class="comment">/*                     */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListInsert_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i,ElemType e)</span>;<span class="comment">/*                 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">PrintList_sq</span><span class="params">(Sqlist *L)</span>;  <span class="comment">/*输出顺序表的元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListDelete_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i)</span>; <span class="comment">/*删除第i个元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLocate</span><span class="params">(Sqlist *L,ElemType e)</span>; <span class="comment">/*查找值为e的元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InitList_sq</span><span class="params">(Sqlist *L)</span>&#123;</span><br><span class="line">    L-&gt;slist=(ElemType*)<span class="built_in">malloc</span>(INIT_SIZE*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span>(!L-&gt;slist) <span class="keyword">return</span> ERROR;      </span><br><span class="line">    L-&gt;length=<span class="number">0</span>;                     </span><br><span class="line">    L-&gt;listsize=INIT_SIZE;           </span><br><span class="line">    <span class="keyword">return</span> OK;                   </span><br><span class="line">&#125;<span class="comment">/*InitList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">CreateList_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input data %d: &quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">        <span class="keyword">if</span>(!ListInsert_sq(L,i+<span class="number">1</span>,e))</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*CreateList*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出顺序表中的元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">PrintList_sq</span><span class="params">(Sqlist *L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=L-&gt;length;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,L-&gt;slist[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*PrintList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListInsert_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length+<span class="number">1</span>) </span><br><span class="line">	<span class="keyword">return</span> ERROR;    </span><br><span class="line">	<span class="keyword">if</span>(L-&gt;length&gt;=L-&gt;listsize)&#123;  </span><br><span class="line">		L-&gt;slist=(ElemType*)<span class="built_in">realloc</span>(L-&gt;slist,</span><br><span class="line">		(INIT_SIZE+INCREM)*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">				<span class="keyword">if</span>(!L-&gt;slist) </span><br><span class="line">		<span class="keyword">return</span> ERROR; </span><br><span class="line">		L-&gt;listsize+=INCREM;                </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>;k&gt;=i<span class="number">-1</span>;k--)&#123;         </span><br><span class="line">        L-&gt;slist[k+<span class="number">1</span>]= L-&gt;slist[k];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;slist[i<span class="number">-1</span>]=e;                     </span><br><span class="line">    L-&gt;length++;                         </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*ListInsert*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*在顺序表中删除第i个元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListDelete_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="type">int</span> k;</span><br><span class="line">	i--;</span><br><span class="line">	<span class="keyword">for</span> (k = i; k &lt; L-&gt;length - <span class="number">1</span>; k++) &#123;</span><br><span class="line">		L-&gt;slist[k] = L-&gt;slist[k + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;length--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在顺序表中查找指定值元素，返回其序号*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLocate</span><span class="params">(Sqlist *L,ElemType e)</span>&#123;    </span><br><span class="line">	<span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; L-&gt;length; k++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;slist[k] == e) <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    Sqlist sl;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input n:&quot;</span>);  <span class="comment">/*输入顺序表的元素个数*/</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n1-Create Sqlist:\n&quot;</span>);</span><br><span class="line">        InitList_sq(&amp;sl);</span><br><span class="line">        CreateList_sq(&amp;sl,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n2-Print Sqlist:\n&quot;</span>);</span><br><span class="line">        PrintList_sq(&amp;sl);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nplease input insert location and data:(location,data)\n&quot;</span>);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;m,&amp;k);</span><br><span class="line">	    ListInsert_sq(&amp;sl,m,k);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;\n3-Print Sqlist:\n&quot;</span>);</span><br><span class="line">	    PrintList_sq(&amp;sl);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\nplease input delete location:(location)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		ListDelete_sq(&amp;sl, m);</span><br><span class="line">		PrintList_sq(&amp;sl);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\nplease input find data:(data)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ListLocate(&amp;sl, m));</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> ElemType; <span class="comment">/*定义表元素的类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  <span class="comment">/*线性表的单链表存储*/</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span>; <span class="comment">/*                                   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(LinkList L)</span>; <span class="comment">/*输出带头结点单链表的所有元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span>; <span class="comment">/*               */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertElem</span><span class="params">(LinkList L, <span class="type">int</span> i, <span class="type">int</span> e)</span>;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    LNode *p,*q,*head;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    head=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));        head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    p=head;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">       q=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));       <span class="built_in">printf</span>(<span class="string">&quot;input data %i:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q-&gt;data);            <span class="comment">/*输入元素值*/</span></span><br><span class="line">       q-&gt;next=<span class="literal">NULL</span>;                    <span class="comment">/*结点指针域置空*/</span></span><br><span class="line">       p-&gt;next=q;                       <span class="comment">/*新结点连在表末尾*/</span></span><br><span class="line">       p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;<span class="comment">/*CreateList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p=L-&gt;next;  <span class="comment">/*p指向单链表的第1个元素*/</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*PrintList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span>&#123;</span><br><span class="line">    LNode *p;<span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i)&#123;                      </span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p||j&gt;i)</span><br><span class="line">        <span class="keyword">return</span> ERROR;                  </span><br><span class="line">    *e=p-&gt;data;                       </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*GetElem*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertElem</span><span class="params">(LinkList L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    LinkList p, q, t;</span><br><span class="line">    t = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    t-&gt;data = e;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = t;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,i;ElemType e;</span><br><span class="line">    LinkList L=<span class="literal">NULL</span>;            <span class="comment">/*定义指向单链表的指针*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input n:&quot;</span>);  <span class="comment">/*输入单链表的元素个数*/</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n1-Create LinkList:\n&quot;</span>);</span><br><span class="line">        L=CreateList(n);        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n2-Print LinkList:\n&quot;</span>);</span><br><span class="line">        PrintList(L);           </span><br><span class="line">        <span class="comment">// printf(&quot;\n3-GetElem from LinkList:\n&quot;);</span></span><br><span class="line">        <span class="comment">// printf(&quot;input i=&quot;);</span></span><br><span class="line">        <span class="comment">// scanf(&quot;%d&quot;,&amp;i);</span></span><br><span class="line">        <span class="comment">// if(GetElem(L,i,&amp;e))     </span></span><br><span class="line">        <span class="comment">//     printf(&quot;No%i is %d&quot;,i,e);</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">//     printf(&quot;not exists&quot;);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n4-DeleteElem LinkList:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input i = &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">        DeleteElem(L, i);</span><br><span class="line">        PrintList(L);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n5-InsertElem LinkList:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input i = &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input e = &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">        InsertElem(L, i, e);</span><br><span class="line">        PrintList(L);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h1><p>用dev打开</p>
<h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN sizeof(LNode)</span></span><br><span class="line"><span class="type">int</span> seat;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>   //通讯录结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> number;</span><br><span class="line">  <span class="type">char</span> name[<span class="number">20</span>];    </span><br><span class="line">  <span class="type">double</span> telenum;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span></span><br><span class="line">&#123;    <span class="comment">// 打印头结点地址为L的通讯录</span></span><br><span class="line">   LinkList p=L;<span class="comment">////</span></span><br><span class="line">   <span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n          ---------------------------------------\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;               学号       姓名     电话号码\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;          ----------------------------------------\n&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(L==<span class="literal">NULL</span> || L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">	     <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素\n&quot;</span>);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">while</span>(p-&gt;next !=<span class="literal">NULL</span>)</span><br><span class="line">	   &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;          %2d   %-9d&quot;</span>,n,p-&gt;next-&gt;number);</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;    %-5s  %.0f\n&quot;</span>,p-&gt;next-&gt;name,p-&gt;next-&gt;telenum);</span><br><span class="line">         p=p-&gt;next;</span><br><span class="line">         n++;</span><br><span class="line">	   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;          ----------------------------------------\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L,LinkList p)</span></span><br><span class="line">&#123;  <span class="comment">// 查找位于当前地址元素的前一元素的地址</span></span><br><span class="line">   LinkList p_prior=L;</span><br><span class="line">   <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">	  <span class="keyword">return</span>(L);</span><br><span class="line">   <span class="keyword">while</span>(p_prior-&gt;next != p)</span><br><span class="line">   &#123;</span><br><span class="line">      p_prior=p_prior-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (p_prior);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertYouXu</span><span class="params">(LinkList L,LinkList Elem)</span></span><br><span class="line">&#123;              <span class="comment">//插入一个元素，使原有序表仍为有序</span></span><br><span class="line">	LinkList p=L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; Elem-&gt;number&gt;=p-&gt;number)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;number==Elem-&gt;number)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;重复输入！！\n&quot;</span>);<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;         <span class="comment">//确定Elem插入的位置</span></span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=prior(L,p); Elem-&gt;next=<span class="literal">NULL</span>;p-&gt;next=Elem;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>       <span class="comment">//若为空表，插到头结点之后</span></span><br><span class="line">	&#123;</span><br><span class="line">		p=prior(L,p); Elem-&gt;next=p-&gt;next; p-&gt;next=Elem;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">creatIncreLink</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">//创建一个存放通讯录成员的非递减有序表，返回头结点地址</span></span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> num=<span class="number">1</span>,number;</span><br><span class="line">   <span class="type">double</span> telenum;</span><br><span class="line">   <span class="type">char</span> name[<span class="number">20</span>],temp;</span><br><span class="line">   LinkList L,p;</span><br><span class="line">   L=(LinkList)<span class="built_in">malloc</span>(LEN);    <span class="comment">//头结点</span></span><br><span class="line">   L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入学生学号、姓名和电话号码，建立通讯录，以&#x27;-1&#x27;为输入结束标志\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>,num);</span><br><span class="line">      temp=getchar(); gets(name);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d：&quot;</span>,num);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;telenum);</span><br><span class="line">   <span class="keyword">while</span>(number&gt;=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      p=(LinkList)<span class="built_in">malloc</span>(LEN); <span class="comment">//新结点</span></span><br><span class="line">      p-&gt;number=number;</span><br><span class="line">      p-&gt;telenum=telenum;</span><br><span class="line">      <span class="built_in">strcpy</span>(p-&gt;name,name);</span><br><span class="line">      insertYouXu(L,p);       <span class="comment">//有序的插入新结点</span></span><br><span class="line">      num++;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>,num);</span><br><span class="line">         temp=getchar();  gets(name);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d：&quot;</span>,num);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;telenum);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span><br><span class="line">&#123; <span class="comment">//从通讯录中删除第i个元素</span></span><br><span class="line">    LinkList p=L,q;<span class="comment">//////</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j&lt;i<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">       p = p-&gt;next;j++;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next)) <span class="comment">//判断i是否合法，i既不能大于元素的个数，也不能小于等于0</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%d个元素删除失败\n&quot;</span>,i);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);  <span class="comment">//释放删除的结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L,<span class="type">int</span> n)</span></span><br><span class="line">&#123;    <span class="comment">// 按学号查找通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(p-&gt;number&lt;=n)</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;number==n)</span><br><span class="line">	&#123;</span><br><span class="line">       flag=<span class="number">1</span>;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;                        学号: %d   姓名: %s   电话号码.:%.0f\n&quot;</span>,p-&gt;number,p-&gt;name,p-&gt;telenum);</span><br><span class="line">    &#125;</span><br><span class="line">   p=p-&gt;next;seat++;<span class="comment">//!!!!</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L,<span class="type">char</span> n[])</span></span><br><span class="line">&#123;    <span class="comment">// 按姓名查找通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>||L==<span class="literal">NULL</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素,查找失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(p-&gt;name,n))</span><br><span class="line">   &#123;</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                        Number: %d   Name: %s   TeleNo.:%.0f\n&quot;</span>,p-&gt;number,p-&gt;name,p-&gt;telenum);</span><br><span class="line">   &#125;</span><br><span class="line">   p=p-&gt;next;seat++;<span class="comment">//!!!!!</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L,<span class="type">int</span> n)</span></span><br><span class="line">&#123;    <span class="comment">// 按学号删除通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,删除失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(p-&gt;number&lt;=n)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;number==n)</span><br><span class="line">	&#123;</span><br><span class="line">       flag=<span class="number">1</span>;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;number);</span><br><span class="line">       p=p-&gt;next;</span><br><span class="line">       deleteElem(L,seat);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;p=p-&gt;next;seat++;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;被删除\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L,<span class="type">char</span> n[])</span></span><br><span class="line">&#123;    <span class="comment">// 按姓名删除通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(p-&gt;name,n))</span><br><span class="line">   &#123;</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p-&gt;name);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    deleteElem(L,seat);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;p=p-&gt;next;seat++;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;被删除\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   LinkList L=<span class="literal">NULL</span>,p;</span><br><span class="line">   <span class="type">int</span> flag=<span class="number">0</span>,menu;</span><br><span class="line">   <span class="type">char</span> temp;</span><br><span class="line">   system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n           ***************** ^@^欢迎使用通讯录系统***********\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               1 通讯录的建立                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               2 插入通讯记录                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               3 查询通讯记录                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               4 删除通讯记录                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               5 显示通讯录信息                 *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               0 退出管理系统                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           **************** ^@^欢迎使用通讯录系统************\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请选择0-5：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">   <span class="keyword">while</span>(menu!=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">switch</span>(menu)</span><br><span class="line">	 &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			 &#123;</span><br><span class="line">                L=creatIncreLink();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;建立通讯录：&quot;</span>);</span><br><span class="line">                printList(L);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			 &#123;</span><br><span class="line">		        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> number,telenum;</span><br><span class="line">                    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入通讯者的学号和姓名：\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">                       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名: &quot;</span>);</span><br><span class="line">                       temp=getchar(); gets(name);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码: &quot;</span>);</span><br><span class="line">                       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;telenum);</span><br><span class="line">                    p=(LinkList)<span class="built_in">malloc</span>(LEN); <span class="comment">//新结点</span></span><br><span class="line">                    p-&gt;number=number;</span><br><span class="line">                    <span class="built_in">strcpy</span>(p-&gt;name,name);</span><br><span class="line">                    p-&gt;telenum=telenum;</span><br><span class="line">                    insertYouXu(L,p);       <span class="comment">//有序的插入新结点</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;插入后：&quot;</span>);</span><br><span class="line">                    printList(L);</span><br><span class="line">				&#125;<span class="comment">//endif</span></span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nERROR: 通讯录还没有建立，请先建立通讯录\n&quot;</span>);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">			 &#125;<span class="comment">//endcase2</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			&#123;</span><br><span class="line">		        <span class="type">int</span> way,n;</span><br><span class="line">                <span class="type">char</span> na[<span class="number">20</span>],temp;</span><br><span class="line">                <span class="type">int</span> s;</span><br><span class="line">                <span class="keyword">if</span>(L!=<span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">			        <span class="keyword">if</span>(flag)</span><br><span class="line">					&#123;</span><br><span class="line">				        <span class="built_in">printf</span>(<span class="string">&quot;选择查找方式：\n&quot;</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;               1.按学号   2.按姓名\n&quot;</span>);</span><br><span class="line">                           <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;way);</span><br><span class="line">                        <span class="keyword">if</span>(way==<span class="number">1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">					       <span class="built_in">printf</span>(<span class="string">&quot;\n请输入学号:&quot;</span>);</span><br><span class="line">                             <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">                           s=searchNum(L,n);</span><br><span class="line">                           <span class="keyword">if</span>(s==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">				        <span class="keyword">else</span> <span class="keyword">if</span>(way==<span class="number">2</span>)</span><br><span class="line">						&#123;</span><br><span class="line">					       <span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">					       temp=getchar(); gets(na);</span><br><span class="line">					       s=searchName(L,na);</span><br><span class="line">					       <span class="keyword">if</span>(s==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">				        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;通讯录中无记录！\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">			        <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;通讯录中无记录！\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="comment">//endcase3</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		   &#123;</span><br><span class="line">		       <span class="type">int</span> way;</span><br><span class="line">			   <span class="type">char</span> temp; <span class="comment">////</span></span><br><span class="line">		       <span class="built_in">printf</span>(<span class="string">&quot;选择删除方式：1.按序号  2. 按学号  3.按姓名 \n&quot;</span>);</span><br><span class="line">		          <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;way);</span><br><span class="line">		       <span class="keyword">if</span>(way==<span class="number">1</span>)</span><br><span class="line">			   &#123;</span><br><span class="line">			      <span class="type">int</span> n;</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;请输入通讯录序号: &quot;</span>);</span><br><span class="line">			         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">			      deleteElem(L,n);</span><br><span class="line">			      printList(L);</span><br><span class="line">			   &#125;</span><br><span class="line">		       <span class="keyword">else</span> <span class="keyword">if</span>(way==<span class="number">2</span>)</span><br><span class="line">			   &#123;</span><br><span class="line">			      <span class="type">int</span> n,f;</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">			      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">			      f=delNum(L,n);</span><br><span class="line">			      <span class="keyword">if</span>(f!=<span class="number">0</span>)</span><br><span class="line">				  &#123;</span><br><span class="line">				      <span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				      printList(L);</span><br><span class="line">				  &#125;</span><br><span class="line">			      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">			   &#125;</span><br><span class="line">		       <span class="keyword">else</span> <span class="keyword">if</span>(way==<span class="number">3</span>)</span><br><span class="line">			   &#123;</span><br><span class="line">			      <span class="type">char</span> na[<span class="number">20</span>],temp;</span><br><span class="line">			      <span class="type">int</span> f;</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">			        temp=getchar();  gets(na);</span><br><span class="line">			      f=delName(L,na);</span><br><span class="line">			      <span class="keyword">if</span>(f!=<span class="number">0</span>)</span><br><span class="line">				  &#123;</span><br><span class="line">				     <span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				     printList(L);</span><br><span class="line">				  &#125;</span><br><span class="line">			      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">			   &#125;</span><br><span class="line">		       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ERROR!!\n&quot;</span>);</span><br><span class="line">		       <span class="keyword">break</span>;</span><br><span class="line">		   &#125;<span class="comment">//endcase4</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		   &#123;</span><br><span class="line">		       <span class="built_in">printf</span>(<span class="string">&quot;当前通讯录内容如下：\n&quot;</span>);</span><br><span class="line">		       printList(L);</span><br><span class="line">		       <span class="keyword">break</span>;</span><br><span class="line">		   &#125;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">default</span>:  <span class="built_in">printf</span>(<span class="string">&quot;\n没有此功能，重新输入\n&quot;</span>);</span><br><span class="line">     &#125;<span class="comment">//endswitch</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;选择功能：&quot;</span>);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">   &#125;<span class="comment">//endwhile</span></span><br><span class="line">&#125;<span class="comment">//end</span></span><br></pre></td></tr></table></figure>

<h2 id="改进版："><a href="#改进版：" class="headerlink" title="改进版："></a>改进版：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	LL telenum;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span>;</span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n          -------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               学号           姓名         电话号码\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;          -------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    		<span class="built_in">printf</span>(<span class="string">&quot;          %2d   %-9d&quot;</span>, n++, p-&gt;next-&gt;number);</span><br><span class="line">         	<span class="built_in">printf</span>(<span class="string">&quot;      %-5s         %lld\n&quot;</span>, p-&gt;next-&gt;name, p-&gt;next-&gt;telenum);</span><br><span class="line">         	p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;          -------------------------------------------\n&quot;</span>);</span><br><span class="line">   	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span> &#123;</span><br><span class="line">	LinkList p_prior = L;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> L;</span><br><span class="line">	<span class="keyword">while</span> (p_prior-&gt;next != P) &#123;</span><br><span class="line">		p_prior = p_prior-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p_prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; Elem-&gt;number &gt;= p-&gt;number) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;number == Elem-&gt;number) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;学号重复输入!! 请重新尝试 \n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		p-&gt;next = Elem;		</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = p-&gt;next;</span><br><span class="line">		p-&gt;next = Elem;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n           ***************** ^@^欢迎使用通讯录系统***********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               1 通讯录的建立                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               2 插入通讯记录                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               3 查询通讯记录                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               4 删除通讯记录                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               5 显示通讯录信息                 *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               0 退出管理系统                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           **************** ^@^欢迎使用通讯录系统************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>, number;</span><br><span class="line">	LL telenum;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>], temp;</span><br><span class="line">	LinkList L, p;</span><br><span class="line">	L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入学生学号、姓名和电话号码，建立通讯录，以&#x27;-1&#x27;为输入结束标志\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;telenum);</span><br><span class="line">    <span class="keyword">while</span> (number &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    	p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    	p-&gt;number = number;</span><br><span class="line">    	p-&gt;telenum = telenum;</span><br><span class="line">    	<span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">    	<span class="type">int</span> t = insertSorted(L, p); <span class="comment">// f</span></span><br><span class="line">    	<span class="keyword">if</span> (!t) num++;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">	    <span class="comment">// 输入-1提前终止，简化用户操作</span></span><br><span class="line">		<span class="keyword">if</span> (number &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;telenum); 	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;number == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;                        学号: %d   姓名: %s   电话号码.:%lld\n&quot;</span>,p-&gt;number,p-&gt;name,p-&gt;telenum);</span><br><span class="line">   				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span> || L == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        Number: %d   Name: %s   TeleNo.:%lld\n&quot;</span>, p-&gt;number, p-&gt;name, p-&gt;telenum);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">	LinkList p = L, q;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;next)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素失败\n&quot;</span>, i);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q = p-&gt;next;</span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,删除失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;number == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d被删除\n&quot;</span>,p-&gt;number);</span><br><span class="line">				deleteElem(L,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s被删除\n&quot;</span>,p-&gt;name);</span><br><span class="line">				deleteElem(L, seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">	PrintMenu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择0-5：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> menu, flag = <span class="number">0</span>;</span><br><span class="line">    LinkList L = <span class="literal">NULL</span>, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line">    <span class="keyword">while</span> (menu &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">switch</span>(menu) &#123;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    			L = createIncreLink();</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;建立通讯录: &quot;</span>);</span><br><span class="line">    			printList(L);</span><br><span class="line">    			flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="type">int</span> num;</span><br><span class="line">					<span class="type">int</span> number;</span><br><span class="line">					LL telenum;</span><br><span class="line">					<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入通讯者的学号和姓名：\n&quot;</span>);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">	                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名: &quot;</span>);</span><br><span class="line">	                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码: &quot;</span>);</span><br><span class="line">	                <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;telenum);</span><br><span class="line">	                p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	                p-&gt;number = number;</span><br><span class="line">	                <span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">	                p-&gt;telenum = telenum;</span><br><span class="line">	                insertSorted(L, p);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;插入后：&quot;</span>);</span><br><span class="line">	                printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nERROR: 通讯录还没有建立，请先建立通讯录\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">				<span class="type">int</span> way, n, s;</span><br><span class="line">				<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">				<span class="keyword">if</span> (L != <span class="literal">NULL</span> || flag) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;选择查找方式：\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;               1.按学号   2.按姓名\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">                    <span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">                    	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入学号:&quot;</span>);</span><br><span class="line">                    	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">                    	<span class="keyword">if</span> (!searchNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">						<span class="keyword">if</span>(!searchName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;通讯录中无记录！\n&quot;</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">				<span class="type">int</span> way;</span><br><span class="line">				<span class="type">char</span> temp;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;选择删除方式：1.按序号  2. 按学号  3.按姓名 \n&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">				<span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入通讯录序号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				    deleteElem(L,n);</span><br><span class="line">				    printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n, f;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="keyword">if</span> (!delNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">3</span>) &#123;</span><br><span class="line">					<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">					<span class="keyword">if</span> (!delName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ERROR!!\n&quot;</span>); </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;当前通讯录内容如下：\n&quot;</span>);</span><br><span class="line">		        printList(L);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">default</span>:  <span class="built_in">printf</span>(<span class="string">&quot;\n没有此功能，重新输入\n&quot;</span>); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;选择功能：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改进而来的网上购物系统"><a href="#改进而来的网上购物系统" class="headerlink" title="改进而来的网上购物系统"></a>改进而来的网上购物系统</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seat;</span><br><span class="line"><span class="type">int</span> haveBought;</span><br><span class="line"><span class="type">double</span> sumMoney;</span><br><span class="line"><span class="type">char</span> username[<span class="number">20</span>], password[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> id; <span class="comment">// 编号 </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">// 名称</span></span><br><span class="line">	<span class="type">int</span> stock; <span class="comment">// 库存</span></span><br><span class="line">	<span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span>;</span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">recharge</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addBrandStock</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">changeBrandPrice</span><span class="params">(LinkList L)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您所剩余额: %.2lf\n&quot;</span>, sumMoney);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您所购买商品总件数: %d\n&quot;</span>, haveBought);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n      ----------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                       商品编号      商品名称           商品库存         商品价格\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      ----------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;	%d		%-8d	%-8s	%-8d	  %-8.2lf\n&quot;</span>, n++, p-&gt;next-&gt;id, p-&gt;next-&gt;name, p-&gt;next-&gt;stock, p-&gt;next-&gt;price);</span><br><span class="line">     	p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      ----------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">   	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span> &#123;</span><br><span class="line">	LinkList p_prior = L;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> L;</span><br><span class="line">	<span class="keyword">while</span> (p_prior-&gt;next != P) &#123;</span><br><span class="line">		p_prior = p_prior-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p_prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; Elem-&gt;id &gt;= p-&gt;id) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;id == Elem-&gt;id) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;商品编号重复输入!! 请重新尝试 \n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		p-&gt;next = Elem;		</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = p-&gt;next;</span><br><span class="line">		p-&gt;next = Elem;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n           ***************** ^@^欢迎使用网上购物系统 **************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               1 网上购物系统的建立                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               2 插入商品                             *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               3 查询商品信息                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               4 删除商品                             *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               5 显示商品信息                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               6 购买商品                             *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               7 账户余额充值                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               8 增加商品库存                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               9 改变商品单价                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               10 修改密码                            *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               0 退出网上购物系统                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           **************** ^@^欢迎使用网上购物系统****************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> id; <span class="comment">// 编号 </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">// 名称</span></span><br><span class="line">	<span class="type">int</span> stock; <span class="comment">// 库存</span></span><br><span class="line">	<span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	LinkList L, p;</span><br><span class="line">	L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	loop: <span class="built_in">printf</span>(<span class="string">&quot;请注册您的账户\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请注册您的用户名: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, username);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">strlen</span>(password) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所设置的密码小于8位，请重新设置!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码: &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请核实您的密码: &quot;</span>);</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp, password)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;密码不一致，请重新注册！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> loop;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;注册成功!!!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的起始账户余额: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;sumMoney);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您的起始账户余额为: %lf元, 欢迎您的使用!!!\n&quot;</span>, sumMoney);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号、商品名称、商品库存和商品价格，建立网上购物系统，以&#x27;-1&#x27;为输入结束标志\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号 %d：&quot;</span>, num);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品名称 %d：&quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品库存 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品价格 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;price);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    	p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    	p-&gt;id = id;</span><br><span class="line">    	p-&gt;stock = stock;</span><br><span class="line">    	p-&gt;price = price;</span><br><span class="line">    	<span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">    	<span class="type">int</span> t = insertSorted(L, p); </span><br><span class="line">    	<span class="keyword">if</span> (!t) num++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号 %d：&quot;</span>, num);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (id &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品名称 %d：&quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品库存 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stock);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品价格 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;price);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertBrand</span><span class="params">(LinkList L)</span> &#123; </span><br><span class="line">	LinkList p; </span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> id; <span class="comment">// 编号 </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">// 名称</span></span><br><span class="line">	<span class="type">int</span> stock; <span class="comment">// 库存</span></span><br><span class="line">	<span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品名称: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品库存: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品价格: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;price);</span><br><span class="line">    p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;id = id;</span><br><span class="line">	p-&gt;stock = stock;</span><br><span class="line">	p-&gt;price = price;</span><br><span class="line">	<span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">    insertSorted(L, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入后：&quot;</span>);</span><br><span class="line">    printList(L);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要查找的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumPlus</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,购买失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要购买的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要购买的数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				<span class="keyword">if</span> (b &gt; p-&gt;stock) &#123;</span><br><span class="line">   					<span class="built_in">printf</span>(<span class="string">&quot;您要购买的数量大于商品库存，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b * p-&gt;price &gt; sumMoney) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;您的余额不足，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					p-&gt;stock -= b;</span><br><span class="line">					sumMoney -= b * p-&gt;price;</span><br><span class="line">					haveBought += b; </span><br><span class="line"><span class="comment">//					printf(&quot;您所剩余额: %.2lf\n&quot;, sumMoney);</span></span><br><span class="line"><span class="comment">//					printf(&quot;您所购买商品总件数: %d\n&quot;, haveBought);</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要查找的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNamePlus</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要购买的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要购买的数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				<span class="keyword">if</span> (b &gt; p-&gt;stock) &#123;</span><br><span class="line">   					<span class="built_in">printf</span>(<span class="string">&quot;您要购买的数量大于商品库存，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b * p-&gt;price &gt; sumMoney) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;您的余额不足，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					p-&gt;stock -= b;</span><br><span class="line">					sumMoney -= b * p-&gt;price;</span><br><span class="line">					haveBought += b; </span><br><span class="line"><span class="comment">//					printf(&quot;您所剩余额: %.2lf\n&quot;, sumMoney);</span></span><br><span class="line"><span class="comment">//					printf(&quot;您所购买商品总件数: %d\n&quot;, haveBought);</span></span><br><span class="line">				&#125;	</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">	LinkList p = L, q;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;next)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素失败\n&quot;</span>, i);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q = p-&gt;next;</span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d被删除\n&quot;</span>,p-&gt;id);</span><br><span class="line">				deleteElem(L,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s被删除\n&quot;</span>,p-&gt;name);</span><br><span class="line">				deleteElem(L, seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">recharge</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> un[<span class="number">20</span>], pw[<span class="number">20</span>];</span><br><span class="line">	loop: <span class="built_in">printf</span>(<span class="string">&quot;请输入您注册时的用户名: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, un);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(un, username)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所输入的用户名与您注册时所输入的不一致，请重新输入！！！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> loop;</span><br><span class="line">	&#125;</span><br><span class="line">	gtpw: <span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pw);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(pw, password)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所输入的密码与您注册时所输入的不一致，请重新输入！！！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> gtpw;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;核实成功!!!\n&quot;</span>);</span><br><span class="line">	<span class="type">double</span> add;</span><br><span class="line">	k: <span class="built_in">printf</span>(<span class="string">&quot;请输入你要充值的金额: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;add);</span><br><span class="line">	<span class="keyword">if</span> (add &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所充值的金额非法, 请重新输入!!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> k;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;充值成功!!!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您的余额为: %lf + %lf = %lf元\n&quot;</span>, sumMoney, add, sumMoney + add);</span><br><span class="line">	sumMoney += add;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(LinkList L, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">	<span class="type">int</span> way, n, s;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">if</span> (L != <span class="literal">NULL</span> || flag) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;选择查找方式：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;               1.按商品编号   2.按商品名称\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">        <span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">        	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入商品编号:&quot;</span>);</span><br><span class="line">        	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        	<span class="keyword">if</span> (!searchNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n请输入商品名称:&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">			<span class="keyword">if</span>(!searchName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统中无记录！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,增加商品库存失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要增加的是第%d个商品的库存：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要增加的商品库存数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;stock += b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,增加商品库存失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要增加的是第%d个商品的库存：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要增加的商品库存数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;stock += b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addBrandStock</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入您想要增加的商品库存\n&quot;</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入1按商品编号选，输入2按商品名称选：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的选择: &quot;</span>);</span><br><span class="line">	<span class="type">int</span> op;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">	<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要增加的商品库存的商品编号: &quot;</span>);</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (!searchNumAndAddBrandStock(L, id)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要增加的商品库存的商品名称: &quot;</span>);</span><br><span class="line">		<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">		<span class="keyword">if</span> (!searchNameAndAddBrandStock(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无此选项，请重试！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	printList(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndchangeBrandPrice</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,改变商品单价失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要改变的是第%d个商品的单价：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要设置成的单价: &quot;</span>);</span><br><span class="line">   				<span class="type">double</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;price = b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndchangeBrandPrice</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,改变商品单价失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要改变的是第%d个商品的单价：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要设置成的单价: &quot;</span>);</span><br><span class="line">   				<span class="type">double</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;price = b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeBrandPrice</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入您想要改变的商品单价\n&quot;</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入1按商品编号选，输入2按商品名称选：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的选择: &quot;</span>);</span><br><span class="line">	<span class="type">int</span> op;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">	<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要改变的商品单价的商品编号: &quot;</span>);</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (!searchNumAndchangeBrandPrice(L, id)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要改变的商品单价的商品名称: &quot;</span>);</span><br><span class="line">		<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">		<span class="keyword">if</span> (!searchNameAndchangeBrandPrice(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无此选项，请重试！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	printList(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changePassword</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">20</span>];</span><br><span class="line">	t: <span class="built_in">printf</span>(<span class="string">&quot;请输入您的用户名: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(temp, username)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;用户名核实成功！！！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您要修改成的密码: &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">strlen</span>(temp) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;您输入的密码长度小于8位，请重新输入！！!\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入您要修改成的密码: &quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">strcpy</span>(password, temp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;修改成功!!!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;用户名有误，请重新输入!!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">	PrintMenu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择0-5：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> menu, flag = <span class="number">0</span>;</span><br><span class="line">    LinkList L = <span class="literal">NULL</span>, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line">    <span class="keyword">while</span> (menu &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">switch</span>(menu) &#123;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    			L = createIncreLink();</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;建立网上购物系统: &quot;</span>);</span><br><span class="line">    			printList(L);</span><br><span class="line">    			flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">					insertBrand(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nERROR: 通讯录还没有建立，请先建立网上购物系统\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">				find(L, flag);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">				<span class="type">int</span> way;</span><br><span class="line">				<span class="type">char</span> temp;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;选择删除方式：1.按序号  2. 按商品编号  3.按商品名称 \n&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">				<span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入商品序号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				    deleteElem(L,n);</span><br><span class="line">				    printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n, f;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="keyword">if</span> (!delNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无该商品编号，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">3</span>) &#123;</span><br><span class="line">					<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n请输入商品名称:&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">					<span class="keyword">if</span> (!delName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无该商品名称，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ERROR!!\n&quot;</span>); </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;当前网上购物系统内容如下：\n&quot;</span>);</span><br><span class="line">		        printList(L);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;输入您购买商品的选择\n&quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;输入1按商品编号选，输入2按商品名称选：\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入您的选择: &quot;</span>);</span><br><span class="line">					<span class="type">int</span> op;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">					<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要购买的商品编号: &quot;</span>);</span><br><span class="line">						<span class="type">int</span> id;</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">						<span class="keyword">if</span> (!searchNumPlus(L, id)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要购买的商品名称: &quot;</span>);</span><br><span class="line">						<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">						<span class="keyword">if</span> (!searchNamePlus(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;无此选项，请重试！&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) recharge();</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">8</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) addBrandStock(L);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">9</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) changeBrandPrice(L);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">10</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) changePassword();</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;用户名还未建立，请先注册用户!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;欢迎您的再次使用！！！\n&quot;</span>); </span><br><span class="line">				<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">default</span>:  <span class="built_in">printf</span>(<span class="string">&quot;\n没有此功能，重新输入\n&quot;</span>); </span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;选择功能：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="家谱系统"><a href="#家谱系统" class="headerlink" title="家谱系统"></a>家谱系统</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME_length 50   <span class="comment">//名字最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINE_length 100  <span class="comment">//文本行最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">cc</span> *<span class="title">child</span>, *<span class="title">next</span>;</span><span class="comment">//next指向同辈份的人物</span></span><br><span class="line">   <span class="type">char</span> Name[];</span><br><span class="line">&#125;JPNode;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(<span class="type">char</span> p[],<span class="type">int</span> n)</span> <span class="comment">//清空字符数组p</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(n-- &gt; <span class="number">0</span>)</span><br><span class="line">		*p++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="type">static</span>  JPNode *last = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="type">static</span>  <span class="type">int</span>     last_level = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">AddJP</span><span class="params">(JPNode **head, <span class="type">char</span> <span class="type">const</span> name[], <span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">	 JPNode **s = head, *r = <span class="literal">NULL</span>;</span><br><span class="line">	 JPNode *p = (JPNode *)<span class="built_in">malloc</span>( <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="built_in">strlen</span>(name) + <span class="number">1</span> );</span><br><span class="line">	 p-&gt;child = p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	 <span class="built_in">strcpy</span>(p-&gt;Name,name);</span><br><span class="line">     <span class="keyword">if</span>( *s == <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 *s = p;</span><br><span class="line">		 last = p;</span><br><span class="line">		 <span class="keyword">return</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">if</span>(level - last_level == <span class="number">1</span>)</span><br><span class="line">        &#123;last-&gt;child = p; last = p;last_level = level;<span class="keyword">return</span>;&#125;</span><br><span class="line">	 <span class="keyword">if</span>((level == last_level) &amp;&amp; (*s != <span class="literal">NULL</span>))</span><br><span class="line">        &#123;last-&gt;next  = p; last = p;last_level = level;<span class="keyword">return</span>;&#125;</span><br><span class="line">	 r = *s;             <span class="comment">//r指向家谱树</span></span><br><span class="line">	 last_level = level;</span><br><span class="line">	 <span class="keyword">while</span>( level-- &gt; <span class="number">0</span>) <span class="comment">//找到相同的辈分</span></span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">		 r = r-&gt;next;</span><br><span class="line">		 r = r-&gt;child;</span><br><span class="line">	 &#125;<span class="comment">//以兄弟连接</span></span><br><span class="line">	 <span class="keyword">while</span>( r-&gt;next != <span class="literal">NULL</span>) r = r-&gt;next;</span><br><span class="line">	 r-&gt;next = p;</span><br><span class="line">     last = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatJP</span><span class="params">(JPNode **head)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">char</span> name[NAME_length]=<span class="string">&quot;&quot;</span>, line[LINE_length]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	 <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">	 <span class="type">int</span> level=<span class="number">0</span>,i=<span class="number">0</span>;                              <span class="comment">//辈分,以制表符个数表示</span></span><br><span class="line">	 FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">	 fp = fopen(<span class="string">&quot;C:\\Users\\wubo\\Desktop\\jiapuSystem\\jiapu_data.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">	 <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)&#123; <span class="built_in">printf</span>(<span class="string">&quot;open error!\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">1</span>); &#125;</span><br><span class="line">	 <span class="keyword">while</span>(level=<span class="number">0</span>, i=<span class="number">0</span>, fgets(line,LINE_length,fp) != <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 p = line;</span><br><span class="line">         <span class="keyword">while</span>(*p++ == <span class="string">&#x27;\t&#x27;</span>)level++;    <span class="comment">//计算辈分 ,计算完后p指向名字开始处</span></span><br><span class="line">		 <span class="keyword">while</span>(line[i++] != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			 ;</span><br><span class="line">		 line[i<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;              <span class="comment">//读入的换行符用字符串结束标识符替换</span></span><br><span class="line">		 <span class="built_in">strcpy</span>(name,p<span class="number">-1</span>);</span><br><span class="line">				 AddJP(head,name,level);</span><br><span class="line">		 clear(name,NAME_length);</span><br><span class="line">		 clear(line,LINE_length);</span><br><span class="line">	 &#125;</span><br><span class="line">	 fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DispJP</span><span class="params">(JPNode *p)</span><span class="comment">//从p指向的结点显示该家族</span></span><br><span class="line">&#123;</span><br><span class="line">	  <span class="type">static</span> <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">	  <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">		  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;level;<span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>),i++);</span><br><span class="line">		  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p-&gt;Name);</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">	  level++;</span><br><span class="line">      DispJP(p-&gt;child);</span><br><span class="line">	  level--;</span><br><span class="line">	  DispJP(p-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">          <span class="comment">/*在家谱中添加新成员，并追加到文件中*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Equal</span><span class="params">(<span class="type">char</span> <span class="type">const</span> *p,<span class="type">char</span> <span class="type">const</span> q[])</span><span class="comment">//判断两个字符串是否相等</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(*p++ == *q++)<span class="keyword">if</span>(*p == <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *q == <span class="string">&#x27;\0&#x27;</span>)<span class="keyword">return</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">JPNode *<span class="title function_">Find_Name</span><span class="params">(JPNode *s, <span class="type">char</span> *parent)</span><span class="comment">//定位家谱中的成员。返回其指针(地址)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> JPNode *here = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="keyword">return</span> here;</span><br><span class="line">	<span class="keyword">if</span>(Equal(s-&gt;Name,parent) == <span class="number">1</span>)<span class="keyword">return</span> (here=s);</span><br><span class="line">    here = Find_Name(s-&gt;child,parent);</span><br><span class="line">	here = Find_Name(s-&gt;next,parent);</span><br><span class="line">	<span class="keyword">return</span> here;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_FILE</span><span class="params">(JPNode *p,FILE *fp)</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">static</span> <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">	  <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">		  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;level;<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\t&quot;</span>),i++);</span><br><span class="line">		  <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\n&quot;</span>,p-&gt;Name);</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">	  level++;</span><br><span class="line">      Print_FILE(p-&gt;child,fp);</span><br><span class="line">	  level--;</span><br><span class="line">	  Print_FILE(p-&gt;next,fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ADD_number</span><span class="params">(JPNode *p)</span>  <span class="comment">//在家谱中添加新成员,并写入文件</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> parent[NAME_length],name[NAME_length];</span><br><span class="line">	FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">	JPNode *here = <span class="literal">NULL</span>;</span><br><span class="line">    JPNode *s = (JPNode *)<span class="built_in">malloc</span>( <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="built_in">strlen</span>(name) + <span class="number">1</span> );</span><br><span class="line">	s-&gt;next = s-&gt;child = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要添加的新成员的双亲姓名:&quot;</span>);	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,parent);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要添加的新成员的姓名:&quot;</span>);      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">    <span class="built_in">strcpy</span>(s-&gt;Name,name);</span><br><span class="line">	here = Find_Name(p,parent);</span><br><span class="line">	<span class="keyword">if</span>(here-&gt;child == <span class="literal">NULL</span>)here-&gt;child = s;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">        here = here-&gt;child;</span><br><span class="line">		<span class="keyword">while</span>(here-&gt;next != <span class="literal">NULL</span>)here = here-&gt;next;</span><br><span class="line">		here-&gt;next = s;</span><br><span class="line">	&#125;</span><br><span class="line">    fp = fopen(<span class="string">&quot;jiapu_data.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">	Print_FILE(p,fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line">             <span class="comment">/*输出指定家庭的所有成员*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dis_Family</span><span class="params">(JPNode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> name[NAME_length];</span><br><span class="line">	JPNode *here = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入该家庭的首个成员:&quot;</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">	here = Find_Name(p,name);</span><br><span class="line">	<span class="keyword">if</span>(here == <span class="literal">NULL</span>)&#123; <span class="built_in">printf</span>(<span class="string">&quot;无该家庭!\n&quot;</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	DispJP(here);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////</span></span><br><span class="line">               <span class="comment">/*确定指定成员在家族中的辈份*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">beifen</span><span class="params">(JPNode *p, <span class="type">char</span> name[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> level = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(p == <span class="literal">NULL</span> )<span class="keyword">return</span> level;</span><br><span class="line">	<span class="keyword">if</span>(Equal(p-&gt;Name,name) == <span class="number">1</span>)<span class="keyword">return</span> (level=n);</span><br><span class="line">	n++; beifen(p-&gt;child,name);</span><br><span class="line">	n--; beifen(p-&gt;next,name);  <span class="comment">//向右查询n不必加(先加后减)!</span></span><br><span class="line">	<span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Bei_Fen</span><span class="params">(JPNode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">   	<span class="type">char</span> name[NAME_length];</span><br><span class="line">	<span class="type">int</span>  n=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要查明辈分的人的姓名:&quot;</span>);	 <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">    n = beifen(p,name);</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;该家族中无此人!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\n   %s 是 %s 家族中的第%d辈    \n&quot;</span>,name,p-&gt;Name,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////</span></span><br><span class="line">                    <span class="comment">/*输出指定辈的所有成员*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">chabei</span><span class="params">(JPNode *p, <span class="type">int</span> bei)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> tag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(p == <span class="literal">NULL</span> )<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(bei == n)&#123;tag = <span class="number">1</span>;<span class="built_in">printf</span>(<span class="string">&quot;%s   &quot;</span>,p-&gt;Name);&#125;</span><br><span class="line">	n++; chabei(p-&gt;child,bei);</span><br><span class="line">	n--; chabei(p-&gt;next,bei);  <span class="comment">//向右查询n不必加(先加后减)!</span></span><br><span class="line">	<span class="keyword">if</span>(tag == <span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;该家族中还没有这一辈呢....\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Disp_Pei</span><span class="params">(JPNode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> bei;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n你想要查看那一辈的成员:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;bei);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n....该家族中辈分为%d的成员有....\n\n&quot;</span>,bei);</span><br><span class="line">	chabei(p,bei);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    JPNode *JP = <span class="literal">NULL</span>; <span class="comment">//家谱无结点</span></span><br><span class="line">    <span class="type">char</span> ch=<span class="string">&#x27;1&#x27;</span>,cc;</span><br><span class="line">    CreatJP(&amp;JP);</span><br><span class="line">	<span class="keyword">while</span>(ch)</span><br><span class="line">	&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	    menu();</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;\n...请选择:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">		<span class="comment">//ch=getchar();</span></span><br><span class="line">    	<span class="keyword">switch</span>(ch)</span><br><span class="line">		&#123;</span><br><span class="line">	      <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:ADD_number(JP);<span class="keyword">break</span>;</span><br><span class="line">	      <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:Dis_Family(JP);<span class="keyword">break</span>;</span><br><span class="line">	      <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:Bei_Fen(JP);   <span class="keyword">break</span>;</span><br><span class="line">  	      <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:Disp_Pei(JP);  <span class="keyword">break</span>;</span><br><span class="line">  	      <span class="keyword">default</span>:ch=<span class="string">&#x27;\0&#x27;</span>;        <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		getchar();<span class="keyword">while</span>( (cc=getchar()) != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n  ****************家谱操作菜单****************\n&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">  * (1)  在家谱中添加新成员，并追加到文件中。  *\n\</span></span><br><span class="line"><span class="string">  * (2)  输出指定家庭的所有成员。              *\n\</span></span><br><span class="line"><span class="string">  * (3)  确定指定成员在家族中的辈份(第几代)。  *\n\</span></span><br><span class="line"><span class="string">  * (4)  输出指定辈的所有成员。                *\n\</span></span><br><span class="line"><span class="string">  * (0)  退出操作!                             *\n\</span></span><br><span class="line"><span class="string">  ********************************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器</title>
    <url>/2023/10/29/2023-%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="公网IP"><a href="#公网IP" class="headerlink" title="公网IP"></a>公网IP</h2><p>116.205.231.93</p>
<h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>Wu929619@</p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><a href="https://console.huaweicloud.com/smb/?region=cn-south-1#/resource/plan/653dfb5bd7afce2780a8b681/hecs">服务器地址</a></li>
<li>在<code>E:\Document\DeskTopDocument\软件图标\服务器</code>启动PuTTY和WinSCP</li>
<li>Putty流程<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310291753955.png" alt="image-20231029175336888"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310291753282.png" alt="image-20231029175351231"></li>
</ol>
</li>
</ol>
<h2 id="宝塔"><a href="#宝塔" class="headerlink" title="宝塔"></a>宝塔</h2><ol>
<li><a href="https://blog.csdn.net/qq_43554674/article/details/127750034">用统一ip不同端口访问网站方法</a></li>
<li>操作命令大全<strong>sudo bt panel</strong></li>
<li>查看宝塔页面访问路径命令操作<ol>
<li>sudo bt panel</li>
<li>14</li>
</ol>
</li>
<li>linux保存网页的路径为<code>/www/wwwroot/</code></li>
<li>访问网站前在华为云<a href="https://console.huaweicloud.com/smb/?region=cn-south-1#/resource/plan/653dfb5bd7afce2780a8b681/instance/4e86f709-4c2e-4ab4-9bbc-dae1715504d7?tab=security-groups">开放端口</a></li>
</ol>
<h2 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h2><p><a href="https://blog.csdn.net/weixin_55076626/article/details/128024422">宝塔面板连接mysql</a></p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记</title>
    <url>/2023/01/29/2023-%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Pycharm快捷键"><a href="#Pycharm快捷键" class="headerlink" title="Pycharm快捷键"></a>Pycharm快捷键</h1><h2 id="格式对齐"><a href="#格式对齐" class="headerlink" title="格式对齐"></a>格式对齐</h2><p><code>Ctrl + Alt + L</code></p>
<h1 id="正则表达式快速替换"><a href="#正则表达式快速替换" class="headerlink" title="正则表达式快速替换"></a>正则表达式快速替换</h1><h2 id="使用软件Sublime一键替换"><a href="#使用软件Sublime一键替换" class="headerlink" title="使用软件Sublime一键替换"></a>使用软件Sublime一键替换</h2><p><strong>步骤</strong>：</p>
<ol>
<li><p>使用快捷键 <strong>Ctrl + H</strong>，打开<strong>查找替换窗口</strong>。然后，按下 <strong>Alt + R</strong> 快捷键<strong>开启正则替换模式</strong>。 </p>
</li>
<li><p>在查找框输入<strong>正则表达式</strong>，替换框输入要替换的内容。 </p>
</li>
<li><p>点击 <strong>Replace All</strong> 即可。</p>
</li>
</ol>
<p>例: 如要爬取网页的请求头, 则</p>
<p>Find What: <code>(.*): (.*)</code></p>
<p>Replace With: <code>&#39;\1&#39;: &#39;\2&#39;,</code></p>
<p><strong>注意: 空格不能删去</strong></p>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1-下载豆瓣前十页"><a href="#1-下载豆瓣前十页" class="headerlink" title="1. 下载豆瓣前十页"></a>1. 下载豆瓣前十页</h2><p>下载前10页的<code>json</code>数据</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://movie.douban.com/j/chart/top_list?type=17&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=17&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">    url = base_url + data</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_load</span>(<span class="params">page, content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始的页码: &#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束的页码: &#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        get_load(page, content)</span><br></pre></td></tr></table></figure>



<h2 id="2-在网站“站长素材”上批量下载图片"><a href="#2-在网站“站长素材”上批量下载图片" class="headerlink" title="2. 在网站“站长素材”上批量下载图片"></a>2. 在网站“站长素材”上批量下载图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://sc.chinaz.com/tupian/xingganmeinvtupian.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">if</span> (page == <span class="number">1</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/xingganmeinvtupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/xingganmeinvtupian_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content</span>):</span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//img/@alt&#x27;</span>)</span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//img/@data-original&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(len(name_list))</span></span><br><span class="line">    <span class="comment"># for name in name_list:</span></span><br><span class="line">    <span class="comment">#     print(name)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">        name = name_list[i]</span><br><span class="line">        src = src_list[i]</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line">        <span class="comment"># print(name, url)</span></span><br><span class="line">        urllib.request.urlretrieve(url=url, filename = <span class="string">&#x27;./test_images&#x27;</span> + name + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码 &#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码 &#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print(page)</span></span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        down_load(content)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语言</category>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计笔记</title>
    <url>/2023/01/28/2023-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="散记："><a href="#散记：" class="headerlink" title="散记："></a>散记：</h2><p>1. </p>
<p>getline()是string流的函数，只能用于string类型的输入操作。</p>
<p>cin.getline是std流的函数，用于char*类型的输入操作。</p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s); <span class="comment">//后面还可跟一个字符参数，表示输入到这个字符处结束</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[<span class="number">100</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(g, <span class="number">99999</span>) <span class="comment">//第二个参数是输入多少个，后面还可跟一个字符参数，表示输入到这个字符处结束</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>费马小定理</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303152225305.png"></p>
<ol start="3">
<li>冒泡排序如果有k个逆序对，那么至少需要交换k次才能使序列有序。无序序列的一个数，如果用冒泡将之排序，如果前面有i个数比它大，后面有j个数比它小，那么它需要操作i+j次才能到有序的位置。</li>
</ol>
<h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><hr>
<h3 id="波动数列-原题链接"><a href="#波动数列-原题链接" class="headerlink" title="波动数列(原题链接)"></a>波动数列<a href="https://www.acwing.com/problem/content/description/1216/">(原题链接)</a></h3><p>观察这个数列：</p>
<p><strong>1 3 0 2 -1 1 -2 …</strong></p>
<p>这个数列中后一项总是比前一项增加2或者减少3，<strong>且每一项都为整数</strong>。</p>
<p>栋栋对这种数列很好奇，他想知道长度为 n和为 s 而且后一项总是比前一项增加 a 或者减少 b 的整数数列可能有多少种呢？</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含四个整数 n,s,a,b，含义如前面所述。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示满足条件的方案数。</p>
<p>由于这个数很大，请输出方案数除以 100000007 的余数。  </p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1&lt;&#x3D;n&lt;&#x3D;1000$</p>
<p>$-10^9&lt;&#x3D;s&lt;&#x3D;10^9$</p>
<p>$1&lt;&#x3D;a,b&lt;&#x3D;10^6$</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 10 2 3</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>两个满足条件的数列分别是2 4 1 3和7 4 1 -2。</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, MOD = <span class="number">100000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_mod</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>   <span class="comment">// 求a除以b的正余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a % b + b) % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, s, a, b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][<span class="built_in">get_mod</span>(j - a * (n - i), n)] + f[i - <span class="number">1</span>][<span class="built_in">get_mod</span>(j + b * (n - i), n)]) % MOD;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n - <span class="number">1</span>][<span class="built_in">get_mod</span>(s, n)] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p><a href="https://www.acwing.com/solution/content/9223/">参考题解</a></p>
<hr>
<h3 id="最大子阵-原题链接"><a href="#最大子阵-原题链接" class="headerlink" title="最大子阵(原题链接)"></a>最大子阵<a href="https://1.14.106.89/contest/1080/problem/F">(原题链接)</a></h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><span id="more"></span>

<p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。<br>其中，A的子矩阵指在A中行和列均连续的一块。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。<br>接下来n行，每行m个整数，表示矩阵A。<br>对于50%的数据，1&lt;&#x3D;n, m&lt;&#x3D;50；<br>对于100%的数据，1&lt;&#x3D;n, m&lt;&#x3D;500，A中每个元素的绝对值不超过5000。</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。</p>
<p>用例输入 1 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">-1 -4 3</span><br><span class="line">3 4 -1</span><br><span class="line">-5 -2 8</span><br></pre></td></tr></table></figure>

<p>用例输出 1 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>先用<code>f[i][j]</code>预处理出<strong>前i行第j列前缀和</strong>，再枚举每一个行区间，通过在线算法，得到每个行区间的前j列的最大值，最终得到答案</p>
<h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="comment">// # define PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f[i][j] 前i行第j列前缀和</span></span><br><span class="line"><span class="type">int</span> w[N][N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j] + x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">                t += f[j][k] - f[i - <span class="number">1</span>][k];</span><br><span class="line">                res = <span class="built_in">max</span>(res, t);</span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) &#123;</span></span><br><span class="line">    <span class="comment">//     solve();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="282-石子合并"><a href="#282-石子合并" class="headerlink" title="282. 石子合并"></a><a href="https://www.acwing.com/problem/content/284/">282. 石子合并</a></h3><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>区间dp</p>
<h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> f[N][N]; <span class="comment">// f[i][j] 表示 合并 (i, j)的石子的代价的最小值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里我的理解是，长度大的是由长度小的推来的，所以第一维是len从小到大枚举</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i, r = i + len - <span class="number">1</span>;</span><br><span class="line">            f[l][r] = <span class="number">1e8</span>;</span><br><span class="line">            <span class="comment">// 枚举l到r中的分段点k分成两段再合并，而这两段又有更短的len推来</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt; r; k++) &#123;</span><br><span class="line">                f[l][r] = <span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1051-最大的和"><a href="#1051-最大的和" class="headerlink" title="1051. 最大的和"></a><a href="https://www.acwing.com/problem/content/1053/">1051. 最大的和</a></h3><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p>dp + 前后缀分离</p>
<p><strong>题目重点</strong>：序列不重合</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N], g[N], h[N]; <span class="comment">//g是前缀，h是后缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    </span><br><span class="line">    g[<span class="number">0</span>] = -INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, s = -INF; i &lt;= n; i++) &#123;</span><br><span class="line">        s = <span class="built_in">max</span>(s, <span class="number">0</span>) + w[i];</span><br><span class="line">        g[i] = <span class="built_in">max</span>(g[i - <span class="number">1</span>], s); <span class="comment">// g保存连续前缀的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    h[n + <span class="number">1</span>] = -INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n, s = -INF; i; i--) &#123;</span><br><span class="line">        s = <span class="built_in">max</span>(s, <span class="number">0</span>) + w[i];</span><br><span class="line">        h[i] = <span class="built_in">max</span>(h[i + <span class="number">1</span>], s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// g[i]不一定是以i结尾的最大前缀，同理h</span></span><br><span class="line">        <span class="comment">// 因为题目要求不重合</span></span><br><span class="line">        <span class="comment">// 所以答案便是g[i] + h[i + 1]</span></span><br><span class="line">        res = <span class="built_in">max</span>(res, g[i] + h[i + <span class="number">1</span>]); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1215-小朋友排队"><a href="#1215-小朋友排队" class="headerlink" title="1215. 小朋友排队"></a><a href="https://www.acwing.com/problem/content/1217/">1215. 小朋友排队</a></h3><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>冒泡排序如果有k个逆序对，那么至少需要交换k次才能使序列有序。无序序列的一个数，如果用冒泡将之排序，如果前面有i个数比它大，后面有j个数比它小，那么它需要操作i+j次才能到有序的位置。</p>
<p>这道题每个数都需要i+j次操作，所以用树状数组求出来就行了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], tr[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; N; i += <span class="built_in">lowbit</span>(i)) tr[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 树状数组从1开始，所以这里映射从1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">        h[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将坐标出现次数维护到树状数组</span></span><br><span class="line">    <span class="comment">// 找左边出现多少次比当前数大的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum[i] = <span class="built_in">query</span>(N - <span class="number">1</span>) - <span class="built_in">query</span>(h[i]);</span><br><span class="line">        <span class="comment">// 询问之后才将之加入tr，方便后序查询</span></span><br><span class="line">        <span class="built_in">add</span>(h[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="keyword">sizeof</span> tr);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找右边出现多少次比当前数小的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sum[i] += <span class="built_in">query</span>(h[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">add</span>(h[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res += (LL)sum[i] * (sum[i] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="增减序列"><a href="#增减序列" class="headerlink" title="增减序列"></a><a href="https://www.acwing.com/problem/content/102/">增减序列</a></h3><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>求至少需要多少次操作才能使数列中的所有数都一样，并求出在保证最少次数的前提下，最终得到的数列可能有多少种。 </p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>想到差分，差分数组b[i] &#x3D; a[i] - a[i - 1]，可把本题题意转化为求b[2 ~ n]全为0的状态，因为b[i]&#x3D;0说明a[i]和a[i-1]相等，而a[1]不受限制可为任意数。所以最小操作次数为b[2 ~ n]中<code>正数和</code>和<code>负数和</code>的差的最小值加上它们的绝对值，即转化为它们的最大值，因为通过+1和-1把某些b[i]转成了0，但它们<code>正数和</code>和<code>负数和</code>的差可能不为0，那么可以通过改变b[1]和剩下的不能改变的数，那么就可以让b[1]不同，也就是最后相等的序列a不同，所以b[i]可以变成的数也就是题目所求最多的可能数，也就是abs(<code>正数和</code>,<code>负数和</code>)+1,为什么+1呢，因为b[1]也可以被剩下的改变0次。</p>
<h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) b[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    LL p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>) p += b[i];</span><br><span class="line">        <span class="keyword">else</span> q -= b[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(p, q) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">abs</span>(p - q) + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="AcWing-102-最佳牛围栏"><a href="#AcWing-102-最佳牛围栏" class="headerlink" title="AcWing 102. 最佳牛围栏"></a><a href="https://www.acwing.com/problem/content/104/">AcWing 102. 最佳牛围栏</a></h3><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><p>s[i]保存的是前缀和减去前i项平均数乘i，即当s[i]大于0即可说明前i项的平均数比给定的mid大，所以只要满足一次**if (s[i] &gt;&#x3D; min_v)**说明存在一段不小于F的序列平均数比mid大，返回。</p>
<p>因为可能出现r正好为整数的情况,那么l就比r小，得到的数会缺失精度，如l&#x3D;4.99,r&#x3D;5，我们希望的数是5，但最终却得到的是4</p>
<h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, F;</span><br><span class="line"><span class="type">double</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + a[i] - mid;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> min_v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = F; i &lt;= n; i++) &#123;</span><br><span class="line">        min_v = <span class="built_in">min</span>(min_v, s[i - F]);</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= min_v) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; F;</span><br><span class="line">    <span class="type">double</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i], r = <span class="built_in">max</span>(r, a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l &lt; r - <span class="number">1e-5</span>) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)(r * <span class="number">1000</span>) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="851-spfa求最短路"><a href="#851-spfa求最短路" class="headerlink" title="851. spfa求最短路"></a><a href="https://www.acwing.com/problem/content/853/">851. spfa求最短路</a></h3><h4 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h4><p>这里的队列不用是优先队列，因为随机遍历一条边，这条边与它连接的点的dist可能发生改变，所以就只改变与它连接的点，就达到目的了，不用分先后。如果后面还会被改变，那么一定会将之入队，继续判断与那个点相连的点是否还会改变。</p>
<h4 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, idx;</span><br><span class="line"><span class="type">int</span> h[N], ne[N], w[N], e[N], dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 不用优先队列</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="comment">// 这里是提高效率，被入队的点就不用再入队了，因为如果这个点被更新了，</span></span><br><span class="line">                <span class="comment">// 那么它对应的信息也已经更新，下次再遍历时用的就是更新后的值</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="comment">// 因为是队列优化，每次操作的都是相连的边，不会出现无效边，</span></span><br><span class="line">    <span class="comment">// 即无效边不能被更新，只能是0x3f3f3f3f</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><hr>
<h3 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h3><ol>
<li>玄学<strong>p &#x3D; 131 或 p &#x3D; 13331</strong></li>
<li>不能映射成<strong>0</strong></li>
<li><a href="https://www.acwing.com/solution/content/30169/">拉链法+开放寻址法</a></li>
</ol>
<h3 id="841-字符串哈希"><a href="#841-字符串哈希" class="headerlink" title="841. 字符串哈希"></a><a href="https://www.acwing.com/problem/content/843/">841. 字符串哈希</a></h3><h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302081627605.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302081644186.png"></p>
<h4 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里用ULL，当爆了之后自动取模</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="comment">// h代表哈希值，p代表进制数</span></span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    比如我要算一个数为123的哈希值，假设进制P为10</span></span><br><span class="line"><span class="comment">    那么他们对应的进位为P^2, P^1, P^0;</span></span><br><span class="line"><span class="comment">    那么我肯定是1  1*P+2 (1*P+2)*P+3</span></span><br><span class="line"><span class="comment">    分别等于 1 12 123</span></span><br><span class="line"><span class="comment">    这样就得到了它们对应的哈希值</span></span><br><span class="line"><span class="comment">    但是我们可以发现</span></span><br><span class="line"><span class="comment">    虽然从左到右进制为是从高到低，但是值却是从小到大(1 12 123)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// h是前缀和哈希值</span></span><br><span class="line">        <span class="comment">// 假如12，那么第i为是3，则前i的哈希h为12 * P + 3</span></span><br><span class="line">        <span class="comment">// 此时说明左边还是最高位</span></span><br><span class="line">        h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">        <span class="comment">// p[i]代表P^i,用来快速求左移i位对应的P^i</span></span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4407-扫雷"><a href="#4407-扫雷" class="headerlink" title="4407. 扫雷"></a><a href="https://www.acwing.com/problem/content/4410/">4407. 扫雷</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M 映射成了最大值十倍的质数，越大越不容易起冲突，时间复杂度越低</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, M = <span class="number">999997</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, r;</span><br><span class="line">&#125;cir[N];</span><br><span class="line">LL h[M]; <span class="comment">// h[i]中的i是哈希映射的值，具有唯一性</span></span><br><span class="line"><span class="comment">// id[i]中的i是哈希映射的值，具有唯一性, id[i]保存i处哈希值对应炸弹点的序号</span></span><br><span class="line"><span class="comment">// 可通过这个序号找改序号的炸弹的信息</span></span><br><span class="line"><span class="type">int</span> id[M];  </span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目的是让由x，y得到的哈希数不重复</span></span><br><span class="line"><span class="function">LL <span class="title">get_key</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">1000000001ll</span> + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放定址法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x ,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    LL key = <span class="built_in">get_key</span>(x, y);</span><br><span class="line">    <span class="type">int</span> t = (key % M + M) % M;</span><br><span class="line">    <span class="comment">// 当该处是空位或者该(x, y)已经find过了，就返回</span></span><br><span class="line">    <span class="keyword">while</span> (h[t] != <span class="number">-1</span> &amp;&amp; h[t] != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (++t == M) &#123;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sqr</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将被 引爆的炸弹用st数组标记</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    st[<span class="built_in">find</span>(x, y)] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x - r; i &lt;= x + r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y - r; j &lt;= y + r; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sqr</span>(i - x) + <span class="built_in">sqr</span>(j - y) &lt;= <span class="built_in">sqr</span>(r)) &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="built_in">find</span>(i, j);</span><br><span class="line">                <span class="keyword">if</span> (id[t] &amp;&amp; !st[t]) &#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(i, j, cir[id[t]].r);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;r);</span><br><span class="line">        cir[i] = &#123;x, y, r&#125;; <span class="comment">// 炸弹的信息</span></span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(x, y); <span class="comment">// 用哈希函数find找到该坐标映射的哈希值，在0~M-1之间</span></span><br><span class="line">        <span class="keyword">if</span> (h[t] == <span class="number">-1</span>) h[t] = <span class="built_in">get_key</span>(x, y); <span class="comment">// 第一次的出来的t才给它坐标(根据find函数看)</span></span><br><span class="line">        <span class="comment">// 如果是第一次在这个点发现炸弹或者该处炸弹的爆炸范围没这次的大，则更新</span></span><br><span class="line">        <span class="keyword">if</span> (!id[t] || cir[id[t]].r &lt; r) &#123;</span><br><span class="line">            id[t] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;r);</span><br><span class="line">        <span class="comment">// 枚举圆太麻烦，直接找围成该圆的矩形中满足条件的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x - r; i &lt;= x + r; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y - r; j &lt;= y + r; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果在圆内</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sqr</span>(i - x) + <span class="built_in">sqr</span>(j - y) &lt;= <span class="built_in">sqr</span>(r)) &#123;</span><br><span class="line">                    <span class="type">int</span> t = <span class="built_in">find</span>(i, j); </span><br><span class="line">                    <span class="comment">// 如果该处有炸弹并且没有被爆</span></span><br><span class="line">                    <span class="keyword">if</span> (id[t] &amp;&amp; !st[t]) &#123;</span><br><span class="line">                        <span class="built_in">dfs</span>(i, j, cir[id[t]].r); </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[<span class="built_in">find</span>(cir[i].x, cir[i].y)]) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="矩阵："><a href="#矩阵：" class="headerlink" title="矩阵："></a>矩阵：</h2><ol>
<li>求斐波那契前n项和，构造一个向量</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302121046039.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302121049660.png"></p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="7-11-关于堆的判断"><a href="#7-11-关于堆的判断" class="headerlink" title="7-11 关于堆的判断"></a><a href="https://pintia.cn/problem-sets/1635630784604745728/exam/problems/1635647499816349698"><strong>7-11 关于堆的判断</strong></a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> heap[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x)</span>  <span class="comment">// 建堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heap[pos] = x;</span><br><span class="line">    <span class="keyword">while</span>(pos &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(heap[pos] &lt; heap[pos &gt;&gt; <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[pos], heap[pos &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">            pos &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;p;  <span class="comment">// 用map 来 记录每个节点对应在数组中的下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="built_in">insert</span>(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[heap[i]] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> x, y, flag = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&quot;and&quot;</span>) &#123;                         <span class="comment">// 根据每句话的特性来判断。 我觉得这非常妙</span></span><br><span class="line">            cin &gt;&gt; y &gt;&gt; s &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(heap[p[x] ^ <span class="number">1</span>] == y) flag = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s == <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">                cin &gt;&gt; s &gt;&gt; s &gt;&gt; y;</span><br><span class="line">                <span class="keyword">if</span>(heap[p[x] &gt;&gt; <span class="number">1</span>] == y) flag = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cin &gt;&gt; s;</span><br><span class="line">                <span class="keyword">if</span>(s == <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(heap[<span class="number">1</span>] == x) flag = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cin &gt;&gt; s &gt;&gt; y;</span><br><span class="line">                    <span class="keyword">if</span>(heap[p[y] &gt;&gt; <span class="number">1</span>] == x) flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;F&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
        <category>程序设计笔记</category>
      </categories>
      <tags>
        <tag>程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>考研经验链接</title>
    <url>/2023/02/03/2023-%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<ol>
<li><a href="https://bbs.hupu.com/52181002.html">数一408 410分复习经验分享</a></li>
</ol>
]]></content>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>英语六级</title>
    <url>/2023/02/09/2023-%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="单词："><a href="#单词：" class="headerlink" title="单词："></a>单词：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. snail 蜗牛			2. consensus 共识			3. bride 新娘</span><br><span class="line">4. facility 设施		5. fragile 脆弱的			6. resident 居民</span><br><span class="line">7. withstand 经受		8. cradle 摇篮				9. glory 辉煌</span><br><span class="line">10. heaven 天堂</span><br></pre></td></tr></table></figure>

<h2 id="短语："><a href="#短语：" class="headerlink" title="短语："></a>短语：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. fasten your seat belt 系好你的安全带</span><br><span class="line">2. No one can deny the essential fact that 没人可以否认这个基本的事实</span><br><span class="line">3. There is a growing consensus that 越来越多人认为</span><br><span class="line">4. tourist attractions 旅游景点</span><br></pre></td></tr></table></figure>



<h2 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h2><h3 id="杂记："><a href="#杂记：" class="headerlink" title="杂记："></a>杂记：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 过去进行时表示动作未完成</span><br><span class="line">例如：</span><br><span class="line">I was doing my homework.</span><br><span class="line">表示我一直在做作业，但是还没有做完</span><br><span class="line">2. 就近原则</span><br><span class="line">*Is* either he or you right?</span><br><span class="line">这里的is跟的是离它最近的he</span><br><span class="line">3. all(单独做主语)指人时，谓语动词用负数，指物时，谓语动词用单数</span><br><span class="line">All *are* present at the meeting.</span><br><span class="line">All *is* going on very well.</span><br><span class="line">4. </span><br><span class="line">&quot;one or two + 复数名词&quot; 做主语，谓语动词用复数</span><br><span class="line">&quot;a/an + 单数名词 + or two&quot; 做主语，谓语动词用单数</span><br><span class="line">例：</span><br><span class="line">One or two days are enough for the work.</span><br><span class="line">A day or two is enough enough for the work.</span><br><span class="line">5. </span><br><span class="line">the + 形容词表示一类人，谓语动词用复数</span><br><span class="line">the + 形容词表式一类物，谓语动词用单数</span><br><span class="line">6. He as well as we, is right.  --- as well as we可不看</span><br><span class="line">7. 关系词在从句中做宾语时可省略</span><br><span class="line">8. 据说我们都通过了六级考试</span><br><span class="line">The news came that we all passed CET-6.</span><br><span class="line">9. 你怎么下午还迟到了呢？</span><br><span class="line">How it came about that you were late in the afternoon is a mystery.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="动词时态："><a href="#动词时态：" class="headerlink" title="动词时态："></a>动词时态：</h3><h4 id="一般现在时："><a href="#一般现在时：" class="headerlink" title="一般现在时："></a>一般现在时：</h4><p>如果主句是一般过去时，从句表示的是客观真理或常识，从句仍然用一般现在时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. You, as well as he, are a student.</span><br><span class="line">这里的as well as he是插入语，所以are跟的是You</span><br><span class="line">2. 主将从现</span><br><span class="line">If you call him, he perhaps will come.</span><br></pre></td></tr></table></figure>

<h4 id="现在进行时："><a href="#现在进行时：" class="headerlink" title="现在进行时："></a>现在进行时：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 进行时表将来</span><br><span class="line">The teacher is coming.</span><br></pre></td></tr></table></figure>

<h4 id="现在完成时："><a href="#现在完成时：" class="headerlink" title="现在完成时："></a>现在完成时：</h4><p>have&#x2F;has done</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 什么时候用？</span><br><span class="line">过去某时间发生的事情，对现在*造成影响*</span><br><span class="line">2. just now</span><br><span class="line">一般用于一般过去时</span><br><span class="line">3. just</span><br><span class="line">一般用于现在完成时</span><br><span class="line">4. have been to</span><br><span class="line">去了并且回来了</span><br><span class="line">5. have gone to</span><br><span class="line">去了还没回来</span><br></pre></td></tr></table></figure>

<h4 id="过去完成时"><a href="#过去完成时" class="headerlink" title="过去完成时"></a>过去完成时</h4><p>had done</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 什么时候用？</span><br><span class="line">过去的过去</span><br><span class="line">2. It *is* 3 months since I began to study English grammer.</span><br><span class="line">这里只能用一般现在时 代替现在完成时</span><br><span class="line">3. It *was* 3 months since I *had* began to study English grammer.</span><br><span class="line">4. It + be动词 + 一段时间 + since + 一般过去时</span><br><span class="line">5. It has been in bad repairs since he lived in it.</span><br><span class="line">翻译：自从他不住在这里房子就破破烂烂了</span><br><span class="line">since 后边是持续性的动词 live，翻译成相反的意思，不住在这里</span><br></pre></td></tr></table></figure>

<h3 id="动词时态的比较"><a href="#动词时态的比较" class="headerlink" title="动词时态的比较"></a>动词时态的比较</h3><h4 id="现在完成时与一般过去时"><a href="#现在完成时与一般过去时" class="headerlink" title="现在完成时与一般过去时"></a>现在完成时与一般过去时</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. His father *was* an English teacher all his life.</span><br><span class="line">这里翻译为他爸爸终生是英语老师，但现在已经去世了</span><br><span class="line">2. His father *has been* an English teacher all his life.</span><br><span class="line">他爸爸终生是英语老师, 但还没去世</span><br></pre></td></tr></table></figure>

<h4 id="过去进行时与一般过去时"><a href="#过去进行时与一般过去时" class="headerlink" title="过去进行时与一般过去时"></a>过去进行时与一般过去时</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. When we arrived at home, she made the fresh coffee.</span><br><span class="line">如果是when引导的，主从句都用一般过去时，这时when等于after</span><br><span class="line">这里的when等价于after，到了之后才做咖啡</span><br></pre></td></tr></table></figure>

<h3 id="谓语动词的语态"><a href="#谓语动词的语态" class="headerlink" title="谓语动词的语态"></a>谓语动词的语态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. </span><br><span class="line">will do --- will be done</span><br><span class="line">have/has done --- have/has been done</span><br><span class="line">is doing --- is being done</span><br><span class="line">2. by then是过去完成时的标志</span><br></pre></td></tr></table></figure>

<h3 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h3><p><strong>核心宗旨：</strong>两个完整句不能直接用逗号连接</p>
<h3 id="判断关系代词和关系副词"><a href="#判断关系代词和关系副词" class="headerlink" title="判断关系代词和关系副词"></a>判断关系代词和关系副词</h3><p>这里看后面的动词是及物还是不及物</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302101028725.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Is it the museum *where(in which)* the exhibition was held?</span><br></pre></td></tr></table></figure>

<h3 id="虚拟语气"><a href="#虚拟语气" class="headerlink" title="虚拟语气"></a>虚拟语气</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 主句是从句上的将来时</span><br><span class="line">2. 时态倒退一级</span><br><span class="line">3. You would have laughed to see him jump aside.</span><br><span class="line">你要是看到他跳到一边的样子会大笑起来的。</span><br><span class="line">（这里虚拟语气表示还没看到他跳到一边的样例）</span><br></pre></td></tr></table></figure>

<h3 id="强调："><a href="#强调：" class="headerlink" title="强调："></a>强调：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. It is + 被强调部分 + that + 原句剩余的部分</span><br></pre></td></tr></table></figure>

<h1 id="写译"><a href="#写译" class="headerlink" title="写译"></a>写译</h1><h2 id="本人写作时用的模板"><a href="#本人写作时用的模板" class="headerlink" title="本人写作时用的模板"></a>本人写作时用的模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. There is a growing consensus that 人们普遍认为</span><br><span class="line">2. Only in this way can we have a rosy and promising life.</span><br><span class="line">3. take the leading role 起到了主导作用</span><br><span class="line">4. No one can deny that 没人可以否认的是</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081247242.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081247557.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081248172.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081248843.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081249199.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141521749.jpg" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141523451.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">论说文，谚语警句型作文，书信作文，图表型作文</span><br></pre></td></tr></table></figure>

<h2 id="写作翻译原则"><a href="#写作翻译原则" class="headerlink" title="写作翻译原则"></a>写作翻译原则</h2><h3 id="高分原则："><a href="#高分原则：" class="headerlink" title="高分原则："></a>高分原则：</h3><ol>
<li>语言最重要，结构其次</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 只要上下有逻辑关系，都要用逻辑关系词</span><br><span class="line">2. 三段论</span><br><span class="line">3. 多用代词替代出现过的名次</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>内容完整，紧扣提纲</li>
</ol>
<h2 id="单词：-1"><a href="#单词：-1" class="headerlink" title="单词："></a>单词：</h2><h3 id="单词多样："><a href="#单词多样：" class="headerlink" title="单词多样："></a>单词多样：</h3><h4 id="用同义词或近义词替换："><a href="#用同义词或近义词替换：" class="headerlink" title="用同义词或近义词替换："></a>用同义词或近义词替换：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 认为</span><br><span class="line">think, claim, assert, assume, argue</span><br><span class="line">2. 人们</span><br><span class="line">people, individuals</span><br><span class="line">3. 喜欢</span><br><span class="line">like, be fond of, be keen on, have a passion for</span><br><span class="line">4. 表示原因</span><br><span class="line">because, in that, as, since + 句子</span><br><span class="line">because of, due to, owing to, thanks to + n/ing</span><br><span class="line">5. 表示结果</span><br><span class="line">so, hence, therefore, thereby, thus, consequently, in consequence, as a result</span><br><span class="line">6. 表示“相似性的”对比</span><br><span class="line">likewise, similarly, equally, simultaneously, at the same time, </span><br><span class="line">in the meanwhile</span><br><span class="line">7. 表示”差异性的“对比</span><br><span class="line">but, conversely, alternatively, while, whereas, on the other hand, otherwise</span><br><span class="line">8. 表示递进</span><br><span class="line">besides, also, in addition, moreover, furthermore</span><br><span class="line">9. 表示让步</span><br><span class="line">despite, although, notwithstanding</span><br><span class="line">10. 实际上，事实上</span><br><span class="line">in effect/fact/reality, indeed, virtually</span><br><span class="line">11. 表示引出新对象</span><br><span class="line">① about = concerning = regarding = in respect of 关于</span><br><span class="line">② in terms of 就……而论， 在……方面</span><br><span class="line">③ when it comes to 当提到</span><br><span class="line">12. 表示总结</span><br><span class="line">all in all = in conclusion/general = come to the conclusion 总的来说</span><br><span class="line">13. 表示举例</span><br><span class="line">as an illustration</span><br></pre></td></tr></table></figure>

<h2 id="句子："><a href="#句子：" class="headerlink" title="句子："></a>句子：</h2><h3 id="简单句"><a href="#简单句" class="headerlink" title="简单句:"></a>简单句:</h3><p>多个动词，保留一个，其他动词做非谓语。主动ing，被动ed，目的to。</p>
<p>这里located本来是ing，但是这里是特殊情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 延安位于山西省北部，地处黄河中游，是中国革命的圣地</span><br><span class="line">Yan&#x27;an, located in northern Shanxi Province and in the middle of the Yello River, </span><br><span class="line">is a holy land of Chinese revolution.</span><br></pre></td></tr></table></figure>

<h3 id="被动"><a href="#被动" class="headerlink" title="被动"></a>被动</h3><h4 id="使用时机："><a href="#使用时机：" class="headerlink" title="使用时机："></a>使用时机：</h4><p>当一句话用人，或人称代词做主语的时候</p>
<h4 id="笔记：-1"><a href="#笔记：-1" class="headerlink" title="笔记："></a>笔记：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. spread 只有主动用法，用主动表示被动</span><br></pre></td></tr></table></figure>

<h3 id="复合句"><a href="#复合句" class="headerlink" title="复合句"></a>复合句</h3><h4 id="1-主语从句："><a href="#1-主语从句：" class="headerlink" title="1. 主语从句："></a>1. 主语从句：</h4><p><strong>It is …… that</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. It is common knowledge that……  ……是一个常识</span><br><span class="line">2. It is my belief that……         我认为……</span><br><span class="line">3. It is beyond dispute that 	  ……是毋庸置疑的	</span><br></pre></td></tr></table></figure>

<h4 id="2-同位语的使用："><a href="#2-同位语的使用：" class="headerlink" title="2. 同位语的使用："></a>2. 同位语的使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同位语就是解释名词的成分</span><br></pre></td></tr></table></figure>

<h4 id="3-定语和定语从句"><a href="#3-定语和定语从句" class="headerlink" title="3. 定语和定语从句"></a>3. 定语和定语从句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修饰名词的就是定语</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 非谓语修饰名词</span><br><span class="line">I love the girl smiling to me.</span><br></pre></td></tr></table></figure>

<h4 id="4-状语和状语从句"><a href="#4-状语和状语从句" class="headerlink" title="4. 状语和状语从句"></a>4. 状语和状语从句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">随便放在哪个部分</span><br></pre></td></tr></table></figure>

<h4 id="5-三大经典句型"><a href="#5-三大经典句型" class="headerlink" title="5. 三大经典句型"></a>5. 三大经典句型</h4><h5 id="强调句型"><a href="#强调句型" class="headerlink" title="强调句型"></a>强调句型</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It is…… that/who……</span><br><span class="line">强调句这里只有is和was，没有其他时态</span><br><span class="line">句子的所有部分都可以强调，唯独不能强调*谓语*</span><br></pre></td></tr></table></figure>

<h5 id="虚拟语气-1"><a href="#虚拟语气-1" class="headerlink" title="虚拟语气"></a>虚拟语气</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表示与事实相反或者语气委婉</span><br><span class="line"></span><br><span class="line">It is high time that    是……的时候</span><br><span class="line">从句用过去式</span><br><span class="line">例如：使我们不要轻信网上虚假信息的时候了</span><br><span class="line">It is high time that all children and adults by no means followed </span><br><span class="line">these false information online.</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302131432319.png"></p>
<h5 id="倒装"><a href="#倒装" class="headerlink" title="倒装"></a>倒装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把句子写成一般疑问句的形式就是倒装</span><br><span class="line">只要句子中有形容词副词的地方都可以写成so……that……的句型</span><br><span class="line"></span><br><span class="line">具体用法：</span><br><span class="line">（1）否定词放在句首的时候用倒装</span><br><span class="line">例如：I have never been to other countries except Japan.</span><br><span class="line">     Never have I been to other countries except Japan.</span><br><span class="line">（2）含有so……that……结构的句子将so引导的部分置于句首时用倒装</span><br><span class="line">例如：He was so excited that he cannot help laughing at midnight.</span><br><span class="line">     So excited was he that he cannot helo laughing at midnight.</span><br><span class="line">（3）“only + 状语”位于句首时用倒装</span><br><span class="line">例如：His girlfriend called his name only once.</span><br><span class="line">     Only once did his girlfriend call his name.</span><br><span class="line">（4）as引导让步状语从句的倒装</span><br><span class="line">1. 形容词放句首的倒装</span><br><span class="line">Ugly as I look, I am tender.</span><br><span class="line">虽然我很丑，但是我很温柔。（这里ugly后面不接助动词）</span><br><span class="line">2. 名词放句首的倒装</span><br><span class="line">切记名词放句首的倒装，不能有冠词。也就是不能写成an old man或the old man。</span><br><span class="line">Old man as he is, I cannot forgive his bad behavior.</span><br></pre></td></tr></table></figure>



<h2 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h2><h4 id="段落的论证方式"><a href="#段落的论证方式" class="headerlink" title="段落的论证方式"></a>段落的论证方式</h4><h5 id="1-因果论证"><a href="#1-因果论证" class="headerlink" title="1. 因果论证"></a>1. 因果论证</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用连接词：</span><br><span class="line"></span><br><span class="line">b results from a; 			b因为a</span><br><span class="line">a result in b;    			a导致b</span><br><span class="line">b is a result of &#x27;a&#x27;		b是a的结果</span><br></pre></td></tr></table></figure>

<h5 id="2-分类论证"><a href="#2-分类论证" class="headerlink" title="2. 分类论证"></a>2. 分类论证</h5><h5 id="3-举例论证"><a href="#3-举例论证" class="headerlink" title="3. 举例论证"></a>3. 举例论证</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">举例开头：</span><br><span class="line">有很多例子可以解释这种现象，但这个例子足够了。</span><br><span class="line">Countless cases can account for the phenomenon, but this will suffice.</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">the story tells us that……</span><br></pre></td></tr></table></figure>

<h2 id="议论文"><a href="#议论文" class="headerlink" title="议论文"></a>议论文</h2><h3 id="第一段："><a href="#第一段：" class="headerlink" title="第一段："></a>第一段：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">引出文章中心加个人观点</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132006095.png"></p>
<h3 id="第二段："><a href="#第二段：" class="headerlink" title="第二段："></a>第二段：</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132009575.png"></p>
<h3 id="第三段"><a href="#第三段" class="headerlink" title="第三段"></a>第三段</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132011714.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132014736.png"></p>
<h2 id="书信作文"><a href="#书信作文" class="headerlink" title="书信作文"></a>书信作文</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132027691.png" alt="image-20230213202740539"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132028411.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132028889.png"></p>
<h2 id="漫画作文"><a href="#漫画作文" class="headerlink" title="漫画作文"></a>漫画作文</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303062214316.png"></li>
</ol>
<h2 id="图表作文"><a href="#图表作文" class="headerlink" title="图表作文"></a>图表作文</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303062215548.png"></li>
</ol>
<h2 id="写作带练课程"><a href="#写作带练课程" class="headerlink" title="写作带练课程"></a>写作带练课程</h2><h3 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. be exposed to 接触</span><br></pre></td></tr></table></figure>

<h3 id="句子模板"><a href="#句子模板" class="headerlink" title="句子模板"></a>句子模板</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303062153463.png"></li>
</ol>
<h3 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h3><h4 id="用于引出话题的句子"><a href="#用于引出话题的句子" class="headerlink" title="用于引出话题的句子"></a>用于引出话题的句子</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051509437.png"></p>
<h3 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h3><h4 id="用于提出论点的句子"><a href="#用于提出论点的句子" class="headerlink" title="用于提出论点的句子"></a>用于提出论点的句子</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051518166.png"></p>
<h4 id="用于导入论据的句子"><a href="#用于导入论据的句子" class="headerlink" title="用于导入论据的句子"></a>用于导入论据的句子</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051522818.png"></p>
<p>名人:</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051523592.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051523541.png"></p>
<h2 id="翻译带练课程"><a href="#翻译带练课程" class="headerlink" title="翻译带练课程"></a>翻译带练课程</h2><h3 id="短语-1"><a href="#短语-1" class="headerlink" title="短语"></a>短语</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Economical Zone 经济特区</span><br></pre></td></tr></table></figure>

<h3 id="散记"><a href="#散记" class="headerlink" title="散记"></a>散记</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 朝代前必须加The</span><br></pre></td></tr></table></figure>





<h1 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h1><h2 id="单词：-2"><a href="#单词：-2" class="headerlink" title="单词："></a>单词：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. accommodating 乐于助人的			2. arrogant 傲慢的	</span><br><span class="line">3. contagious 传染性的				 4. groundless 无根据的</span><br></pre></td></tr></table></figure>

<h2 id="短语：-1"><a href="#短语：-1" class="headerlink" title="短语："></a>短语：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. tell me about it 可不是嘛			2. subject to 屈服于</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302151628007.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302151641054.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161741968.png"></p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><h2 id="单词：-3"><a href="#单词：-3" class="headerlink" title="单词："></a>单词：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. imperative 迫切的			2. neutral 中立的</span><br><span class="line">3. liberal 开明的			4. esteem 尊重</span><br><span class="line">5. cousin 表妹				6. cereal 谷类食品</span><br><span class="line">7. pronounced 明显的			7. needy 贫穷的</span><br><span class="line">8. automation 自动化			9. ingenuity 聪明才智</span><br></pre></td></tr></table></figure>

<h2 id="短语：-2"><a href="#短语：-2" class="headerlink" title="短语："></a>短语：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. thumps-up 竖起大拇指（同意）			2. for instance 例如</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>英语</category>
        <category>六级</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>六级</tag>
      </tags>
  </entry>
  <entry>
    <title>英语六级单词</title>
    <url>/2023/08/25/2023-%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><ol>
<li>offspring 后代，子女</li>
<li>commitment 承诺</li>
<li>marvel 奇迹;成就;不平凡的成果;令人惊异的人(或事)</li>
<li>infrastructure (国家或机构的)基础设施，基础建设</li>
<li>verdict 判决;(陪审团的)裁定，裁决，裁断;(经过检验或认真考虑后的)决定，结论，意见</li>
<li>arrogance 傲慢;自大</li>
<li>grievance 不满，不平；委屈，冤情；投诉</li>
<li>byprpduct 副产品</li>
<li>slavery 奴隶制，蓄奴；奴隶身份，奴役；过分依赖，过分投入</li>
<li>intuitive 直觉的；有直觉力的；易懂的，使用简便的</li>
<li>quirk 怪癖， 怪异的性格（或行为）；（偶然发生的）怪事，奇事；急转，急弯；（建筑）狭凹槽，深槽；&lt;美&gt;借口</li>
</ol>
<h1 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h1><ol>
<li>designates 把……定名为；任命，指派</li>
<li>incorporates 融合，合并，包含</li>
<li>sneaked 偷偷地走，潜行</li>
<li>marvel 感到惊奇;大为赞叹</li>
<li>misplace 放错地方；忘记把……放在什么地方；错误地信任某人</li>
<li>nurture 培养，促进；养育，培育；抱有，怀有；扶持，帮助；滋养，滋生</li>
</ol>
<h1 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h1><ol>
<li>legitimate（小孩）合法婚姻所生的；正当的，合理的；</li>
<li>identical 相同的;完全相同的;同一的;完全同样的</li>
<li>unanimous (决定或意见)一致的;一致同意的</li>
<li>contemptuous 轻蔑的;蔑视的;鄙视的</li>
<li>susceptible 易得病的，易受影响的；（人）易受感动的，易动感情的； </li>
<li>limbic 边的；缘的</li>
<li>counterintuitive 违反直觉的</li>
<li>slim 苗条的，纤细的；单薄的；（物）狭长的；（衣服）修长的，紧身的；（数量或数字）微小的；（公司或其他组织）精简的；&lt;南非&gt;诡计多端的，狡猾的</li>
<li>pronounced 明显的，显著的；讲出来的</li>
<li>astrological 占星的；占星学的，占星术的 </li>
<li>startling 令人吃惊的，不寻常的；极鲜亮的</li>
<li>subtile 微妙的；狡猾的；敏锐的；隐约的</li>
</ol>
<h1 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h1><ol>
<li>principally 主要地；大部分；</li>
<li>rhetorically 讲究修辞地；在修辞学上</li>
</ol>
<h1 id="搭配"><a href="#搭配" class="headerlink" title="搭配"></a>搭配</h1><ol>
<li>yield to 屈从于</li>
<li>could do worse than 不妨试试：表示建议或推荐某事物，虽然可能不是最好的选择，但也不会有什么坏处。</li>
</ol>
]]></content>
      <tags>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯备考记录</title>
    <url>/2023/02/07/2023-%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E8%80%83%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a><a href="https://blog.csdn.net/Sunny_Deer/article/details/123713345">大纲</a></h1><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><h3 id="4406-积木画-状压DP"><a href="#4406-积木画-状压DP" class="headerlink" title="4406. 积木画(状压DP)"></a><a href="https://www.acwing.com/problem/content/4409/">4406. 积木画(状压DP)</a></h3><p>很重要，必须掌握</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g[<span class="number">4</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//前0列已经摆好，第1列的状态为0（未摆）的摆法为1种</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="comment">// 如果第i列的状态j可以转化到第i+1的状态k，那么就把此时f[i][j]加上</span></span><br><span class="line">                <span class="comment">// 循环 4 * 4 次把所有可能出现的状态加上</span></span><br><span class="line">                f[i + <span class="number">1</span>][k] = (f[i + <span class="number">1</span>][k] + f[i][j] * g[j][k]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n + <span class="number">1</span>][<span class="number">0</span>]; <span class="comment">//前n列已经摆好，且第n+1列的状态为0（未摆）的摆法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1089-烽火传递"><a href="#1089-烽火传递" class="headerlink" title="1089. 烽火传递"></a><a href="acwing.com/problem/content/description/1091/">1089. 烽火传递</a></h3><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p><a href="https://www.acwing.com/solution/content/27813/">https://www.acwing.com/solution/content/27813/</a></p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N], f[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> tt = <span class="number">0</span>, hh = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[hh] &lt; i - m) hh++;</span><br><span class="line">        f[i] = f[q[hh]] + w[i];</span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; f[q[tt]] &gt;= f[i]) tt--;</span><br><span class="line">        q[++tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - m + <span class="number">1</span>; i &lt;= n; i++) res = <span class="built_in">min</span>(res, f[i]);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3417-砝码称重"><a href="#3417-砝码称重" class="headerlink" title="3417. 砝码称重"></a><a href="https://www.acwing.com/problem/content/description/3420/">3417. 砝码称重</a></h3><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="https://www.acwing.com/solution/content/21995/">题解</a></h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f[i][j]， 前i个砝码是否能拼出j </span></span><br><span class="line"><span class="comment">// 最终答案遍历f[n][1~k] </span></span><br><span class="line"><span class="comment">// 最后一步， 选i或者不选i  </span></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">bool</span> f[<span class="number">110</span>][N];</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    	cin &gt;&gt; w[i];</span><br><span class="line">    	sum += w[i];</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">    		f[i][j] = f[i - <span class="number">1</span>][j] || f[i - <span class="number">1</span>][<span class="built_in">abs</span>(j - w[i])] || f[i - <span class="number">1</span>][j + w[i]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sum; j++) <span class="keyword">if</span> (f[n][j]) res++;</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) &#123;</span></span><br><span class="line">    <span class="comment">//     solve();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1553-蓝桥杯2021初赛-路径"><a href="#1553-蓝桥杯2021初赛-路径" class="headerlink" title="1553: [蓝桥杯2021初赛] 路径"></a><a href="http://oj.ecustacm.cn/problem.php?id=1553">1553: [蓝桥杯2021初赛] 路径</a></h3><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到i的最短距离 </span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求到x的最短距离 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">21</span>); i &lt; x; i++) &#123;</span><br><span class="line">		dist[x] = <span class="built_in">min</span>(dist[x], x * i / <span class="built_in">gcd</span>(x, i) + dist[i]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	printf(&quot;dist[%d] = %d\n&quot;, x, dist[x]);</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    a = <span class="number">1</span>, b = <span class="number">2021</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="comment">//    for (int i = 1; i &lt;= 2021; i++) dist[i] = 0;</span></span><br><span class="line">	dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++) &#123;</span><br><span class="line">    	<span class="built_in">dfs</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    cout &lt;&lt; dist[<span class="number">2021</span>] &lt;&lt; endl;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) &#123;</span></span><br><span class="line">    <span class="comment">//     solve();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3420-括号序列"><a href="#3420-括号序列" class="headerlink" title="3420. 括号序列"></a><a href="https://www.acwing.com/problem/content/description/3423/">3420. 括号序列</a></h3><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><a href="https://www.acwing.com/solution/content/75961/">https://www.acwing.com/solution/content/75961/</a></p>
<h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line">LL dp[N][N];</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function">LL <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)<span class="comment">//一个括号一个括号的判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//不用考虑dp[i][0] 因为dp[i-1][-1]是不合法的情况 不存在 为0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=(dp[i<span class="number">-1</span>][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>])%MOD;<span class="comment">//特判防止越界 这里数据短，用的是优化前的推断</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                 dp[i][j]=(dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + dp[i][j<span class="number">-1</span>])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        <span class="keyword">if</span>(dp[len][i]) <span class="keyword">return</span> dp[len][i];<span class="comment">//我们需要的就是长度为len添加括号的合法情况，而从前往后遍历出现的第一个有可能的情况就是需要括号数最少的情况，因为左括号可以加很多个，我们仅需添加最少的情况</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);<span class="comment">//从下标为1开始</span></span><br><span class="line">    len=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    LL l=<span class="built_in">func</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(str+<span class="number">1</span>,str+len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>) str[i]=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> str[i]=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL r=<span class="built_in">func</span>();</span><br><span class="line">    cout&lt;&lt;l*r%MOD;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最短Hamilton路径-状压DP"><a href="#最短Hamilton路径-状压DP" class="headerlink" title="最短Hamilton路径(状压DP)"></a><a href="https://www.acwing.com/problem/content/93/">最短Hamilton路径(状压DP)</a></h3><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p><a href="https://www.acwing.com/solution/content/18533/">https://www.acwing.com/solution/content/18533/</a></p>
<h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"><span class="comment">// 所有从0走到了j，且状态是i的步数的最小值</span></span><br><span class="line"><span class="type">int</span> f[M][N], w[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;&gt; k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                        f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - (<span class="number">1</span> &lt;&lt; j)][k] + w[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><hr>
<h3 id="消除游戏"><a href="#消除游戏" class="headerlink" title="消除游戏"></a><a href="https://www.acwing.com/problem/content/4657/">消除游戏</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[l[x]] == <span class="string">&#x27;@&#x27;</span> || s[r[x]] == <span class="string">&#x27;@&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 将第一次的边缘字符全部加入pos	 </span></span><br><span class="line">	<span class="keyword">if</span> (s[l[x]] == s[x] &amp;&amp; s[x] != s[r[x]]) &#123;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(x), pos.<span class="built_in">push_back</span>(r[x]);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span> (s[l[x]] != s[x] &amp;&amp; s[x] == s[r[x]]) &#123;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(l[x]), pos.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	r[l[x]] = r[x];</span><br><span class="line">	l[r[x]] = l[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">	s[<span class="number">0</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">	s[n + <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		l[i] = i - <span class="number">1</span>; r[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这样可保证将第一次序列要删除的数全部删除 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;  i++) &#123;</span><br><span class="line">		<span class="built_in">check</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; pos.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">		<span class="keyword">for</span> (; i &lt; pos.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="type">int</span> j = pos[i];</span><br><span class="line">			<span class="keyword">if</span> (st[j]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">			<span class="built_in">remove</span>(j);</span><br><span class="line">			st[j] = <span class="literal">true</span>; <span class="comment">//标记删除</span></span><br><span class="line">			<span class="comment">// 将删除后有可能继续组成边缘字符的字符加入p </span></span><br><span class="line">			p.<span class="built_in">push_back</span>(l[j]);</span><br><span class="line">			p.<span class="built_in">push_back</span>(r[j]); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 将下一轮删除的数check一下 </span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!st[p[j]]) &#123;</span><br><span class="line">				<span class="built_in">check</span>(p[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">			cout &lt;&lt; s[i];</span><br><span class="line">			ok = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ok) cout &lt;&lt; <span class="string">&quot;EMPTY&quot;</span> &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="1497-树的遍历"><a href="#1497-树的遍历" class="headerlink" title="1497. 树的遍历"></a><a href="https://www.acwing.com/problem/content/1499/">1497. 树的遍历</a></h3><p>需要牢记</p>
<h4 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos[N]; <span class="comment">// 中序节点对应坐标</span></span><br><span class="line"><span class="type">int</span> h[N], z[N];</span><br><span class="line"><span class="type">int</span> L[N], R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> zl, <span class="type">int</span> zr, <span class="type">int</span> hl, <span class="type">int</span> hr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> root = h[hr];</span><br><span class="line">    <span class="type">int</span> k = pos[root];</span><br><span class="line">    <span class="keyword">if</span> (zl &lt; k) L[root] = <span class="built_in">build</span>(zl, k - <span class="number">1</span>, hl, k - zl + hl - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (zr &gt; k) R[root] = <span class="built_in">build</span>(k + <span class="number">1</span>, zr, k - zl + hl, hr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (L[t]) q.<span class="built_in">push</span>(L[t]);</span><br><span class="line">        <span class="keyword">if</span> (R[t]) q.<span class="built_in">push</span>(R[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; z[i];</span><br><span class="line">        pos[z[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> root = <span class="built_in">build</span>(<span class="number">1</span>, n, <span class="number">1</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="97-约数之和"><a href="#97-约数之和" class="headerlink" title="97. 约数之和"></a><a href="https://www.acwing.com/problem/content/99/">97. 约数之和</a></h3><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p><a href="https://www.acwing.com/solution/content/30343/">https://www.acwing.com/solution/content/30343/</a></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302181150533.png"></p>
<h3 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">9901</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    a %= mod;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) <span class="keyword">return</span> (<span class="built_in">sum</span>(p, k - <span class="number">1</span>) + <span class="built_in">qmi</span>(p, k - <span class="number">1</span>)) % mod;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + <span class="built_in">qmi</span>(p, k / <span class="number">2</span>)) * <span class="built_in">sum</span>(p, k / <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a / i; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// s表示i因子的个数</span></span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (a % i == <span class="number">0</span>) &#123;</span><br><span class="line">                s++;</span><br><span class="line">                a /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// sum(i, k)表示算i^0 + i^1 + …… + i^(k - 1)</span></span><br><span class="line">            <span class="comment">// 因为这里是i^0 + i^1 + …… + i^(b * s)，所以是sum(i, b * s + 1)</span></span><br><span class="line">            res = res * <span class="built_in">sum</span>(i, b * s + <span class="number">1</span>) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">1</span>) res = res * <span class="built_in">sum</span>(a, b + <span class="number">1</span>) % mod;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) res = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="141-周期"><a href="#141-周期" class="headerlink" title="141. 周期"></a><a href="https://www.acwing.com/problem/content/143/">141. 周期</a></h3><h3 id="题解视频："><a href="#题解视频：" class="headerlink" title="题解视频："></a>题解视频：</h3><p><a href="https://www.acwing.com/video/2793/">https://www.acwing.com/video/2793/</a></p>
<h3 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h3><p>这道题要加深记忆</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; str[j + <span class="number">1</span>] != str[i]) j = ne[j];</span><br><span class="line">            <span class="keyword">if</span> (str[i] == str[j + <span class="number">1</span>]) j++;</span><br><span class="line">            ne[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>, T++);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> t = i - ne[i]; </span><br><span class="line">            <span class="keyword">if</span> (i % t == <span class="number">0</span> &amp;&amp; i / t &gt;= <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, i / t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h3 id="限定迭代层数"><a href="#限定迭代层数" class="headerlink" title="限定迭代层数"></a>限定迭代层数</h3><h4 id="1562-微博转发"><a href="#1562-微博转发" class="headerlink" title="1562. 微博转发"></a><a href="https://www.acwing.com/problem/content/1564/">1562. 微博转发</a></h4><h4 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>, M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, L;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    st[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--) &#123;</span><br><span class="line">            <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = h[t]; ~j; j = ne[j]) &#123;</span><br><span class="line">                <span class="type">int</span> x = e[j];</span><br><span class="line">                <span class="keyword">if</span> (!st[x]) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                    q.<span class="built_in">push</span>(x);</span><br><span class="line">                    st[x] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; L;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cnt);</span><br><span class="line">        <span class="keyword">while</span> (cnt--) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">add</span>(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><h3 id="集合-Nim游戏"><a href="#集合-Nim游戏" class="headerlink" title="集合-Nim游戏"></a><a href="https://www.acwing.com/problem/content/895/">集合-Nim游戏</a></h3><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p><strong>sg</strong>函数</p>
<p><a href="https://www.acwing.com/solution/content/23435/">题解</a></p>
<h3 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k, n;</span><br><span class="line"><span class="type">int</span> s[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (~f[x]) <span class="keyword">return</span> f[x];</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= s[i]) S.<span class="built_in">insert</span>(<span class="built_in">sg</span>(x - s[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!S.<span class="built_in">count</span>(i)) <span class="keyword">return</span> f[x] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        res ^= <span class="built_in">sg</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="七段码"><a href="#七段码" class="headerlink" title="七段码"></a><a href="http://oj.ecustacm.cn/problem.php?id=1511">七段码</a></h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> used[N], res, e[N][N], fa[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*	</span></span><br><span class="line"><span class="comment">		连边建图，e[i][j] == 1表示第i段和第j段灯管相邻</span></span><br><span class="line"><span class="comment">		a b c d e f g</span></span><br><span class="line"><span class="comment">		1 2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	e[<span class="number">1</span>][<span class="number">2</span>] = e[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">2</span>][<span class="number">1</span>] = e[<span class="number">2</span>][<span class="number">7</span>] = e[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">3</span>][<span class="number">2</span>] = e[<span class="number">3</span>][<span class="number">4</span>] = e[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">4</span>][<span class="number">3</span>] = e[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">5</span>][<span class="number">4</span>] = e[<span class="number">5</span>][<span class="number">6</span>] = e[<span class="number">5</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">6</span>][<span class="number">1</span>] = e[<span class="number">6</span>][<span class="number">5</span>] = e[<span class="number">6</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">7</span>][<span class="number">2</span>] = e[<span class="number">7</span>][<span class="number">3</span>] = e[<span class="number">7</span>][<span class="number">5</span>] = e[<span class="number">7</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fa[x] == x ? x : (fa[x] = <span class="built_in">find</span>(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u &gt; <span class="number">7</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++ ) fa[i] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (e[i][j] &amp;&amp; used[i] &amp;&amp; used[j]) &#123;</span><br><span class="line">					<span class="type">int</span> fx = <span class="built_in">find</span>(i), fy = <span class="built_in">find</span>(j);</span><br><span class="line">					<span class="keyword">if</span> (fx != fy) fa[fx] = fy;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fa[i] == i &amp;&amp; used[i]) cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (cnt == <span class="number">1</span>) res++;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		used[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">		used[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><h3 id="日期统计"><a href="#日期统计" class="headerlink" title="日期统计"></a>日期统计</h3><h4 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">string s = <span class="string">&quot;24919823647759503875815861830379270588570991944686338516346707827689565614010094809128502533&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> days[<span class="number">13</span>] = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    string year = s.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (year != <span class="string">&quot;2023&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    string month = s.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    string day = s.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="string">&quot;00&quot;</span> || month &gt; <span class="string">&quot;12&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        m = m * <span class="number">10</span> + month[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        d = d * <span class="number">10</span> + day[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; <span class="number">1</span> || d &gt; days[m]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    set&lt;string&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt; s.<span class="built_in">size</span>(); i1++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i1] != <span class="string">&#x27;2&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i2 = i1 + <span class="number">1</span>; i2 &lt; s.<span class="built_in">size</span>(); i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i2] != <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i3 = i2 + <span class="number">1</span>; i3 &lt; s.<span class="built_in">size</span>(); i3++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i3] != <span class="string">&#x27;2&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i4 = i3 + <span class="number">1</span>; i4 &lt; s.<span class="built_in">size</span>(); i4++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[i4] != <span class="string">&#x27;3&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i5 = i4 + <span class="number">1</span>; i5 &lt; s.<span class="built_in">size</span>(); i5++) </span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i6 = i5 + <span class="number">1</span>; i6 &lt; s.<span class="built_in">size</span>(); i6++) </span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> i7 = i6 + <span class="number">1</span>; i7 &lt; s.<span class="built_in">size</span>(); i7++) </span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> i8 = i7 + <span class="number">1</span>; i8 &lt; s.<span class="built_in">size</span>(); i8++) &#123;</span><br><span class="line">                                    string k = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                                    string t = k + s[i1] + s[i2] +s[i3] +s[i4] +s[i5] +s[i6] +s[i7] +s[i8];</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="built_in">check</span>(t)) &#123;</span><br><span class="line">                                        res++;</span><br><span class="line">                                        S.<span class="built_in">insert</span>(t);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; S.size() &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="01-串的熵"><a href="#01-串的熵" class="headerlink" title="01 串的熵"></a>01 串的熵</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> eps = <span class="number">1e-2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> cnt1, cnt2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">p</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">double</span>)x / <span class="number">23333333.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> p1, <span class="type">double</span> p2)</span> </span>&#123;</span><br><span class="line">	<span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">	res += -p1 * cnt1 * <span class="built_in">log2</span>(p1);</span><br><span class="line">	res += -p2 * cnt2 * <span class="built_in">log2</span>(p2);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">23333333</span> / <span class="number">2</span> + <span class="number">1</span>; i &lt;= <span class="number">23333333</span>; i++) &#123;</span><br><span class="line">		cnt1 = i, cnt2 = <span class="number">23333333</span> - i;</span><br><span class="line">		<span class="type">double</span> p1 = <span class="built_in">p</span>(i), p2 = <span class="built_in">p</span>(<span class="number">23333333</span> - i);</span><br><span class="line">		<span class="type">double</span> res = <span class="built_in">f</span>(p1, p2);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">fabs</span>(res - <span class="number">11625907.5798</span>) &lt; eps) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="number">23333333</span> - i &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/03/15/2023-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="ISO-OSI参考模型"><a href="#ISO-OSI参考模型" class="headerlink" title="ISO&#x2F;OSI参考模型"></a>ISO&#x2F;OSI参考模型</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303152231242.jpg"></p>
<h1 id="期末笔记"><a href="#期末笔记" class="headerlink" title="期末笔记"></a>期末笔记</h1><ol>
<li>数据链路层传输的PDU是<strong>数据帧</strong></li>
<li>常用的公钥密码体制是<strong>RSA</strong></li>
<li><strong>RSA</strong>加密和解密都使用相同的算法，但使用不同的密钥</li>
<li>无线局域网的标准是<strong>IEEE 802.11</strong></li>
<li>无线城域网的标准是<strong>IEEE 802.16</strong></li>
<li>常用的对称密钥体制是<strong>DES</strong></li>
<li>IPSec VPN的安全技术用到了<strong>隧道技术、加密技术、身份认证技术</strong></li>
<li>IPSec协议是一组协议，可以作为一个完整的VPN方案，工作在OSI的<strong>网络层</strong></li>
<li>网络拓扑结构可分为<strong>总线型、星型、环形、树形、网状</strong></li>
<li>第一次对路由器进行配置，应该通过<strong>console端口</strong>配置</li>
<li>无线局域网中为实现传输媒体共享而采用的协议是<strong>CSMA&#x2F;CA</strong></li>
<li>在OSI&#x2F;RM中，完成路径选择功能的是<strong>网络层</strong></li>
<li>IEEE 802.3的物理层协议10BASE-T规定从网卡到集线器的最大传输距离是<strong>100m</strong></li>
<li>IEEE 802.3标准规定的以太网的物理地址长度是<strong>48bit</strong></li>
<li>交换机与双绞线进行连接的端口是<strong>RJ-45</strong></li>
<li>EGP在<strong>自治系统</strong>之间传播路由</li>
<li>以集线器为核心创建的网络，其物理拓扑结构是<strong>星型</strong></li>
<li>同步传输中的同步是指<strong>时钟同步</strong></li>
<li>从IPv4过渡到IPv6的技术有<strong>双协议栈、隧道技术、网络地址转换</strong></li>
<li>属于宽带接入技术的有<strong>ADSL、HFC、光纤接入、以太网接入、无线接入</strong></li>
<li>使用<strong>NET</strong>技术可以将私有的本地IP地址转换为合法的全球IP地址</li>
<li>波分多路复用技术主要用于<strong>光纤通信</strong></li>
<li>ICMP通常被认为是<strong>网络层</strong>的协议</li>
<li>对付网络安全中的被动攻击可采用各种<strong>数据加密</strong>技术</li>
<li>IPv6采用<strong>冒号十六进制</strong>法书写地址</li>
<li>在OSI&#x2F;RM的网络层中，数据以<strong>分组</strong>为单位进行传输</li>
<li>声音属于<strong>模拟数据</strong></li>
<li>串行通信中，PPP协议面向的是<strong>字符</strong></li>
<li><strong>通信子网</strong>向端系统提供虚电路和数据报两种网络服务</li>
<li>以太网使用MAC层协议的是<strong>CSMA&#x2F;CD协议</strong></li>
<li>Hash签名(MD5)生成的摘要长度是<strong>128bit</strong></li>
<li>将网络互相连接起来要使用一些中间设备，在网络层以上使用的中间设备是<strong>网关</strong></li>
<li>IP服务的主要特点是<strong>不可靠，无连接和尽最大努力投递</strong></li>
<li>同一个VLAN中的两台主机<strong>可以跨越多台交换机</strong></li>
<li>当<strong>没有专门申请的全局IP地址，只有一个连接ISP的全局IP地址</strong>时，需要使用<strong>NAPT</strong></li>
<li>以太网的帧格式，其数据部分最大长度是<strong>1500B</strong>，去掉首部1480B</li>
<li>IEEE 802.3或者Ethernet规定数据的传输必须使用<strong>曼彻斯特编码</strong>进行</li>
<li>计算机网络中负责节点间通信任务的那一部分称为<strong>通信子网</strong></li>
<li>ARP通常被认为是<strong>网络层</strong>的协议</li>
<li>TCP的滑动窗口以<strong>字节</strong>为单位</li>
<li>中继器的主要作用是<strong>延长通信距离</strong></li>
<li>OSPF是基于<strong>链路状态</strong>的路由协议</li>
<li>RIP是基于<strong>距离向量</strong>的路由选择协议</li>
<li>高速以太网100BASE-T采用的是<strong>星型</strong>拓扑结构</li>
<li>数据单元的点到点传递由<strong>数据链路</strong>层负责。</li>
<li>在物理层扩展局域网需要使用设备是<strong>集线器</strong></li>
<li>数据通信中举出的三种传输介质是<strong>双绞线 同轴电缆 光缆</strong></li>
<li>发送时延&#x3D;数据帧长度&#x2F;发送速率</li>
<li>传播时延&#x3D;信道长度&#x2F;电磁波在信道上的传播速率</li>
<li>以太网的端到端来回时延2t称为<strong>争用期</strong>,又称为碰撞窗口。</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>软考笔记</title>
    <url>/2023/02/01/2023-%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="知识产权"><a href="#知识产权" class="headerlink" title="知识产权"></a>知识产权</h1><ul>
<li><strong>《中华人民共和国著作权法》</strong>和<strong>《计算机软件保护条例》</strong>是构成我国保护计算机软件著作权的两个基本法律文件</li>
<li>著作权利中，只有<strong>发表权</strong>的保护期受时间限制（作者终生加死后50年）</li>
<li>《计算机软件保护条例》规定，软件著作权人享有<strong>发表权</strong>和<strong>开发者身份权</strong></li>
<li>根据《著作权法》和《计算机软件保护条例》的规定，计算机软件著作权的权利自<strong>软件开发完成之日</strong>起产生，保护期为<strong>50年</strong>。保护期满，除<strong>开发者身份权</strong>以外，其他权利终止。</li>
<li>我国商标的保护期限自核准注册之日起<strong>10年内</strong>有效，但可以根据其所有人的需要无限地延长权利期限，在期限届满前<strong>6个月</strong>内申请续展注册，每次续展注册的有效期为<strong>10年</strong>，续展注册的次数不限。</li>
<li><strong>烟草制品</strong>必须使用注册商标</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ol>
<li><p>数据库系统通常采用三级模式结构：外模式、模式和内模式。这三级模式分别对应数据库的<strong>视图、基本表和存储文件</strong>。</p>
</li>
<li><p>数据的物理独立性和逻辑独立性分别是通过修改**(概念)模式与内模式之间的映像、外模式与(概念)模式之间的映像**来完成的</p>
</li>
<li><p>主键<strong>primary key</strong>类似于写<strong>not null unique</strong></p>
</li>
<li><p><strong>check</strong>是用户自定义约束</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071000317.png"></p>
<ol start="5">
<li><strong>distinct</strong>去除列相同的元组(行)</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071017936.png"></p>
<ol start="6">
<li>模糊查询</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071026694.png"></p>
<ol start="7">
<li>确定系统边界和关系规范化分别在数据库设计的<strong>需求分析逻辑设计</strong>阶段进行。</li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302131546999.png"></li>
</ol>
<h1 id="下午题二"><a href="#下午题二" class="headerlink" title="下午题二"></a>下午题二</h1><ol>
<li>在E-R模型中，<strong>联系</strong>用菱形表示，<strong>实体</strong>用矩形表示，<strong>属性</strong>用圆圈表示</li>
</ol>
<h1 id="计算机基本工作原理"><a href="#计算机基本工作原理" class="headerlink" title="计算机基本工作原理"></a>计算机基本工作原理</h1><p>1. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161002776.png"></p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161314754.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161314769.png"></p>
<p><strong>注：</strong>6.9.10.11可以不看</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302162006402.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302162007828.png"></p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>终结者-&gt;中介者</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141518202.jpg"></p>
<h1 id="结构化语言"><a href="#结构化语言" class="headerlink" title="结构化语言"></a>结构化语言</h1><p><a href="https://blog.csdn.net/WHT869706733/article/details/124777145">语法</a></p>
<h1 id="上午试题六"><a href="#上午试题六" class="headerlink" title="上午试题六"></a>上午试题六</h1><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303181024801.png"></p>
<h1 id="上午题杂记"><a href="#上午题杂记" class="headerlink" title="上午题杂记"></a>上午题杂记</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304161804347.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304161810625.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304171350160.png" alt="image-20230417135004766"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304171354326.png" alt="image-20230417135445183"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181604926.jpg"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304242111124.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304242200523.png" alt="image-20230424220000390"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301901947.png" alt="image-20230430190113876"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305071619264.png" alt="image-20230507161921134"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305071622075.png" alt="image-20230507162224008"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141726870.png" alt="image-20230514172629734"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141727821.png" alt="image-20230514172712706"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141747087.png" alt="image-20230514174711001"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305171723548.png" alt="image-20230517172324439"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305171918458.png" alt="image-20230517191807945"></li>
</ol>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304162143841.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304162145335.png" alt="image-20230416214512098"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304171334675.png" alt="image-20230417133426647"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181538524.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304182215373.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304191656839.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304191658092.png"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304242113633.png" alt="image-20230424211322488"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304281648272.png" alt="image-20230428164845179"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141734548.png" alt="image-20230514173420466"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305171908058.png" alt="image-20230517190813779"></li>
</ol>
<h1 id="下午题杂记"><a href="#下午题杂记" class="headerlink" title="下午题杂记"></a>下午题杂记</h1><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304282100398.png" alt="image-20230428205935406"></li>
</ol>
]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>软著论文备份</title>
    <url>/2023/05/31/2023-%E8%BD%AF%E8%91%97%E8%AE%BA%E6%96%87%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“启橙”学习软件——基于昇思和大数据的校园学习平台提供了丰富的功能，其中包括二级子功能，例如：提醒事</span><br><span class="line">项管理、完成事项记录、添加事项等；还可以通过查看推荐课程、收藏课程、查看浏览历史，以及查看课表</span><br><span class="line">（本周、上周及下周）等功能，更好地管理自己的学习日程；同时，分类查看各科作业、完成作业、展开和折</span><br><span class="line">叠相应作业列表、添加作业等功能能够帮助用户更快、更好地完成学业；除此之外，还有学习单词、信息查</span><br><span class="line">询、查看动态等多种功能可供使用者探索和使用。在提醒事项管理及完成事项记录功能中，用户可以查看设置</span><br><span class="line">好的提醒事项，如果用户事项已完成，则可点击事项右侧的按钮可以使事项的状态变为完成，此时按钮将由绿</span><br><span class="line">色转为蓝色，给予用户以反馈。添加事项功能允许用户通过输入栏添加需要完成的任务，按回车键即可完成添</span><br><span class="line">加。界面将一并展示所有已添加的任务。推荐课程功能提供系统智能推荐的课程，并为每个课程提供介绍、适</span><br><span class="line">用人群和常见问题等详细信息。用户可以点击课程名称查看详细信息或点击目录浏览具体的课程内容。同时，</span><br><span class="line">用户可通过评价模块了解其他人对该课程的反馈和评价。若用户喜欢某个课程，亦可以使用收藏功能将其保存</span><br><span class="line">至收藏页以供今后复习学习。历史记录功能可记录用户浏览过的课程，方便查询相关信息内容。课表功能可让</span><br><span class="line">用户查看当天及未来的课程，并展示上课时间、课程名称、教师和教室等信息。用户可通过周数栏旁边的加减</span><br><span class="line">号切换至其它时间周期的课程信息。在分类查看各科作业功能中，用户可以分类查看每一科目的作业，列表根</span><br><span class="line">据不同的学科进行了分类展示。在作业完成后，用户可以通过完成作业功能，将完成后的页面事项变成绿色，</span><br><span class="line">按钮变成蓝色。同时可通过点击作业名字，使用展开和折叠相应作业列表功能以方便用户查看。在添加作业功</span><br><span class="line">能中，用户可以输入课程名和作业内容来添加作业，输入完成后可以点击绿色的按钮来完成作业的添加，返回</span><br><span class="line">到页面可以查看添加作业，如果用户想要取消，可以点击下方左侧的叉。在学习单词功能中，用户可以查看不</span><br><span class="line">同的单词并进行单词学习。该功能界面提供了单词释义、读音、变形、图文例句和英文释义等信息。通过点击</span><br><span class="line">音标旁边的蓝色按钮，用户可以听取单词的发音；而点击图文例句旁边的蓝色按钮，则可以聆听该段例句的发</span><br><span class="line">音。当完成当前单词的学习后，用户可通过点击“下一个”按钮继续学习下个单词，或通过点击“上一个”按钮</span><br><span class="line">复习之前所学的单词。在信息查询功能中，用户可以便捷地完成多种任务。例如，通过点击“考试报名”，用</span><br><span class="line">户可以进入考试报名界面。而通过点击“成绩查询”和“学分认定”，用户可以查询个人成绩和认定的学分，并</span><br><span class="line">跳转到相应的教务系统页面进行相关操作。此外，用户还可使用实训选择、教务咨询和自习预约等功能，只需</span><br><span class="line">点击对应按钮即可进入学校相应页面进行使用。在查询动态功能中，用户可以点击不同的动态以查看详细内</span><br><span class="line">容。</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2023/06/03/2023-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031104412.png" alt="image-20230603110403357"></p>
<h4 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031105576.png" alt="image-20230603110536524"></p>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031107017.png" alt="image-20230603110712925"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031110769.png" alt="image-20230603111024672"></p>
]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>项目</title>
    <url>/2023/09/05/2023-%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="苍穹外卖"><a href="#苍穹外卖" class="headerlink" title="苍穹外卖"></a>苍穹外卖</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>1.启动F:\Project\cangqiongwaimai\nginx-1.20.2里面的<strong>nginx.exe</strong>,访问端口号为80</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052334098.png" alt="image-20230905233441971"></p>
<h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309061735362.png" alt="image-20230906173516115"></p>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309061736215.png" alt="image-20230906173613170"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309061737134.png" alt="image-20230906173745036"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309061738466.png" alt="image-20230906173810379"></p>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309061750813.png" alt="image-20230906175049739"></p>
<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.jwt过期时间为admin-ttl: 7200000毫秒，每隔这么久就会重新进行jwt校验，导致有时候会调用接口失败，解决方法是在<strong><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong>重新调用登录接口，然后复制jwt，在文档管理的全局参数设置粘贴到这里</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052348169.png" alt="image-20230905234815048"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052350808.png" alt="image-20230905235010748"></p>
<h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><h4 id="表的作用"><a href="#表的作用" class="headerlink" title="表的作用"></a>表的作用</h4><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309060007659.png" alt="image-20230906000706596"></p>
<blockquote>
<p>可以在F:\百度网盘\1、黑马程序员Java项目《苍穹外卖》企业级开发实战\资料\day01\数据库查看详细信息	</p>
</blockquote>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052353643.png" alt="image-20230905235355595"></p>
<h2 id="git操作流程"><a href="#git操作流程" class="headerlink" title="git操作流程"></a>git操作流程</h2><p>1.点击VSC（版本控制系统）<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052354840.png" alt="image-20230905235458713"></p>
<ol start="2">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052355102.png" alt="image-20230905235526051"></p>
<p>3.选择项目根目录层<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052356600.png" alt="image-20230905235605540"></p>
<p>4.提交<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052356206.png" alt="image-20230905235652089"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309052357027.png" alt="image-20230905235754956"></p>
<p>5.推送(push操作)</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309060001416.png" alt="image-20230906000114357"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309060001213.png" alt="image-20230906000159156"></p>
<blockquote>
<p>URL为仓库地址</p>
</blockquote>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>1.出现这种情况是梯子问题，我这个需要打开白鲸即可解决<br><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309060003048.png" alt="image-20230906000358981"></p>
<h1 id="Like-Girl"><a href="#Like-Girl" class="headerlink" title="Like Girl"></a><a href="https://wcqh.cn/3215.html">Like Girl</a></h1><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p><a href="http://116.205.231.93:520/">http://116.205.231.93:520</a></p>
<h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><p><a href="http://116.205.231.93:520/admin">http://116.205.231.93:520/admin</a></p>
<h3 id="默认账号密码"><a href="#默认账号密码" class="headerlink" title="默认账号密码"></a>默认账号密码</h3><p>账号：GanBro	</p>
<p>密码：Wu929619@</p>
<h2 id="安全码"><a href="#安全码" class="headerlink" title="安全码"></a>安全码</h2><p>wuboandluxiaolan</p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>题解备份</title>
    <url>/2023/03/21/2023-%E9%A2%98%E8%A7%A3%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="2023计科蓝桥杯第一场训练赛"><a href="#2023计科蓝桥杯第一场训练赛" class="headerlink" title="2023计科蓝桥杯第一场训练赛"></a>2023计科蓝桥杯第一场训练赛</h1><h2 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>签到题，把每一个数字的每一位拆出来，用一位便把对应卡片数量减一，直到没有卡片便退出</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 卡片0~9的数量初始为2021张，共20210张</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        w[i] = <span class="number">2021</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从1开始拼</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; ; i++) &#123;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        <span class="comment">// 把i的每一位分解，假如数字12，分成1和2</span></span><br><span class="line">        <span class="keyword">while</span> (t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!w[t % <span class="number">10</span>]) &#123; <span class="comment">// 如果该位置的数没有对应卡片了，便退出</span></span><br><span class="line">                cout &lt;&lt; i - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            w[t % <span class="number">10</span>]--;</span><br><span class="line">            <span class="comment">// 否则便继续分</span></span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="成绩统计"><a href="#成绩统计" class="headerlink" title="成绩统计"></a>成绩统计</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>签到题，把每个数判断一次即可</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ji = <span class="number">0</span>, yo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">60</span>) ji++;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">85</span>) yo++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> res1, res2;</span><br><span class="line">    res1 = ji / (<span class="number">1.0</span> * n);</span><br><span class="line">    res2 = yo / (<span class="number">1.0</span> * n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  // %.0lf表示保留0位小数，即只保留整数部分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf%\n%.0lf%\n&quot;</span>, res1 * <span class="number">100</span>, res2 * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单词分析"><a href="#单词分析" class="headerlink" title="单词分析"></a>单词分析</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><p>先把每个单词出现的次数记录下来，最后遍历26个字母，求出哪个字母出现次数最多</p>
<h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="comment">// 常用操作，把a-z映射到0-25</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        w[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> res;</span><br><span class="line">    <span class="comment">// 遍历出出现次数最多的字母res和出现的最大次数maxx</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (w[i] &gt; maxx) &#123;</span><br><span class="line">            res = i + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            maxx = w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl &lt;&lt; maxx &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2023计科蓝桥杯第二场训练赛"><a href="#2023计科蓝桥杯第二场训练赛" class="headerlink" title="2023计科蓝桥杯第二场训练赛"></a>2023计科蓝桥杯第二场训练赛</h1><h2 id="时间显示"><a href="#时间显示" class="headerlink" title="时间显示"></a>时间显示</h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>暴力判断即可，纯体力活。。。</p>
<p>但注意数据是$10^{18}$，记得开long long</p>
<h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL hs;</span><br><span class="line">    cin &gt;&gt; hs; <span class="comment">// 时间</span></span><br><span class="line">    hs /= <span class="number">1000</span>; <span class="comment">// 舍去毫秒 </span></span><br><span class="line">    LL s = hs % <span class="number">60</span>; <span class="comment">// 秒</span></span><br><span class="line">    LL m = hs / <span class="number">60</span> % <span class="number">60</span>; <span class="comment">// 分</span></span><br><span class="line">    LL h = hs / <span class="number">3600</span> % <span class="number">24</span>; <span class="comment">// 时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; h &lt;&lt; <span class="string">&quot;:&quot;</span>; <span class="comment">// 假如是9点，补零为09</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; h &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; m &lt;&lt; <span class="string">&quot;:&quot;</span>; <span class="comment">// 同理</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; m &lt;&lt; <span class="string">&quot;:&quot;</span>; </span><br><span class="line">    <span class="keyword">if</span> (s &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; s; <span class="comment">// 同理</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="炸弹"><a href="#炸弹" class="headerlink" title="炸弹"></a>炸弹</h2><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303212049600.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303212049728.png"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Genes on 2020/12/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 激光炸弹</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ios                               \</span></span><br><span class="line"><span class="meta">    ios::sync_with_stdio(false); \</span></span><br><span class="line"><span class="meta">    cin.tie(nullptr);                     \</span></span><br><span class="line"><span class="meta">    cout.tie(nullptr)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">10</span>; <span class="comment">//不能开 1e5+10, 内存限制比较严格</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"><span class="type">int</span> n, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    r = <span class="built_in">min</span>(<span class="number">5001</span>, r); <span class="comment">// 因为r最大可以取 10^9</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, w;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line"><span class="comment">//        s[++x][++y]=w;  //错误</span></span><br><span class="line">        s[++x][++y] += w; <span class="comment">//右移一位, 就不需要考虑边界了, 并且必须是+=, 不能是=, 因为1个位置可能有多个目标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5001</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5001</span>; j++) &#123;</span><br><span class="line"><span class="comment">//            s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + s[i][j];</span></span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt;= <span class="number">5001</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = r; j &lt;= <span class="number">5001</span>; j++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, s[i][j] - s[i - r][j] - s[i][j - r] + s[i - r][j - r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2023计科蓝桥杯第三四场训练赛"><a href="#2023计科蓝桥杯第三四场训练赛" class="headerlink" title="2023计科蓝桥杯第三四场训练赛"></a>2023计科蓝桥杯第三四场训练赛</h1><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>模板题，不难，但一定要会</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        a[i] += x;</span><br><span class="line">        a[i + <span class="number">1</span>] -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, c;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        a[l] += c;</span><br><span class="line">        a[r + <span class="number">1</span>] -= c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="翻硬币"><a href="#翻硬币" class="headerlink" title="翻硬币"></a>翻硬币</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>如果通过每次翻转两枚相邻硬币，能从状态一变为状态二，则两个状态之间必定有偶数个不同状态的硬币。</p>
<p>模拟法：</p>
<p>从最左侧开始遍历，如果该位置硬币状态与目标不同，就翻动该位置和该位置后面的两枚硬币。<br>因为题目说了有解，所以遍历到倒数第二枚的时候，所有硬币状态就与目标相同了。</p>
<p>这个方法也有点贪心的思路，每次追求当前位置状态与目标状态一致。我还是喜欢称它为模拟法。</p>
<p>时间复杂度：遍历了一边输出，时间复杂度是 O(n)。</p>
<p>该思路时间复杂度已是最优，要使起始状态变为目标状态，至少遍历一边来进行判断，时间复杂度最少是 O(n)。</p>
<p>空间复杂度：没有开辟与输入输出有关的空间，空间复杂度是O(1)。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;<span class="comment">//用不到，看范围就直接写了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1, s2;<span class="comment">//s1:初始状态，s2:目标状态</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//记录翻转次数</span></span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] != s2[i])<span class="comment">//第 i 个位置上状态不同，就翻转该位置和后一个位置硬币</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;<span class="comment">//翻转一次硬币</span></span><br><span class="line">            <span class="keyword">if</span> (s1[i] == <span class="string">&#x27;*&#x27;</span>) s1[i] = <span class="string">&#x27;o&#x27;</span>;<span class="comment">//翻转 i 位置上的硬币</span></span><br><span class="line">            <span class="keyword">else</span> s1[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (s1[i+<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span>) s1[i+<span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;<span class="comment">//翻转 i + 1 位置上的硬币</span></span><br><span class="line">            <span class="keyword">else</span> s1[i+<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;<span class="comment">//输出翻转次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="牡牛和牝牛"><a href="#牡牛和牝牛" class="headerlink" title="牡牛和牝牛"></a>牡牛和牝牛</h2><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">5000011</span>, N = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="comment">// 设牝牛为x， 牡牛为y</span></span><br><span class="line">    <span class="comment">// 在1到k+1中，前i头牛只能放一头y， 可以放在1 ~ i的任何位置，也可以不放，所以是i+1种放法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">1</span>; i++) f[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 之后就可以考虑第i为是放x还是y</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = (f[i - <span class="number">1</span>] + f[i - k - <span class="number">1</span>]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230328194535708.png" alt="image-20230328194535708"></p>
<h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mx = <span class="number">1</span>;    <span class="comment">// 找出所计算的f[i]之中的最大值，边算边找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;    <span class="comment">// 设f[i]默认为1，找不到前面数字小于自己的时候就为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w[i] &gt; w[j]) f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);    <span class="comment">// 前一个小于自己的数结尾的最大上升子序列加上自己，即+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; mx &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h2><h3 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h3><p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230328194700366.png"></p>
<h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">307</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="comment">// 区间 DP 枚举套路：长度+左端点 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; len ++) &#123; <span class="comment">// len表示[i, j]的元素个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>; <span class="comment">// 自动得到右端点</span></span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                f[i][j] = <span class="number">0</span>;  <span class="comment">// 边界初始化</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j - <span class="number">1</span>; k ++) &#123; <span class="comment">// 必须满足k + 1 &lt;= j</span></span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + s[j] - s[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>高数</title>
    <url>/2023/01/27/2023-%E9%AB%98%E6%95%B0/</url>
    <content><![CDATA[<h2 id="散记"><a href="#散记" class="headerlink" title="散记"></a>散记</h2><h3 id="高等数学预备知识"><a href="#高等数学预备知识" class="headerlink" title="高等数学预备知识"></a>高等数学预备知识</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181605667.jpg" alt="afsddfasadfs"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181606856.jpg" alt="fdsfdasadfs"></li>
</ol>
<h3 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181606274.jpg" alt="fsd"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181606230.jpg" alt="dfsdfs (2)"></li>
</ol>
<h3 id="函数极限与连续性"><a href="#函数极限与连续性" class="headerlink" title="函数极限与连续性"></a>函数极限与连续性</h3><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304201637880.PNG"></li>
</ol>
<h2 id="重要公式及结论"><a href="#重要公式及结论" class="headerlink" title="重要公式及结论"></a>重要公式及结论</h2><hr>
<h3 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011934921.jpg"></p>
<span id="more"></span>

<p>下面是百度搜的泰勒展开式(对上式补充)：</p>
<p><img src="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/0df3d7ca7bcb0a4605ac81256663f6246b60af24.jpg"></p>
<h3 id="基本求导公式"><a href="#基本求导公式" class="headerlink" title="基本求导公式"></a>基本求导公式</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011934192.png"></p>
<h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><ol>
<li>$(ln|x|)’&#x3D;(lnx)’&#x3D;\frac{1}{x},x\neq0。(绝对值可视而不见)$</li>
</ol>
<p>推广：</p>
<p>$(ln|u(x)|)’&#x3D;\frac{u’(x)}{u(x)},u(x)\neq0$</p>
<h3 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011935110.png"></p>
<h3 id="常用的等价无穷小"><a href="#常用的等价无穷小" class="headerlink" title="常用的等价无穷小"></a>常用的等价无穷小</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011935473.png"></p>
<p><strong>补充：</strong></p>
<p>当$x\to 0$时, 有：</p>
<ul>
<li>$x + \sin x$ ~ $2x$ </li>
<li>$\tan x-x$ ~ $\frac{1}{3}x^3$</li>
<li>$e^x-1-x$ ~ $\frac{1}{2}x^2$</li>
</ul>
<h3 id="P67"><a href="#P67" class="headerlink" title="P67"></a>P67</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302042054383.png"></p>
<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302042059828.png"></p>
<h3 id="高阶求导公式"><a href="#高阶求导公式" class="headerlink" title="高阶求导公式"></a>高阶求导公式</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302042115433.png"></p>
<h2 id="函数极限及连续性"><a href="#函数极限及连续性" class="headerlink" title="函数极限及连续性"></a>函数极限及连续性</h2><ul>
<li>当出现无穷小乘无穷大时，可化为$\frac{0}{0}$或$\frac{\infty}{\infty}$,但注意要化成的形式分母必须简单才容易做洛必达(倒三角)</li>
</ul>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011935628.png"></p>
<p>口令：<code>设置分母有原则，简单因式才下放</code>  </p>
<p>简单：$x^\alpha$,$e^{\beta x}$  </p>
<p>复杂：$lnx, \arcsin x, \arctan x$</p>
<ul>
<li><p>$ln u&#x3D;ln(1+u-1)$ ~ $u-1$, 当$u \to 1$$~~~~$ <code>注:</code>该公式由$ln(1+x)$~$x$推导而来</p>
</li>
<li><p>当$f(x)$-&gt;$0$,$g(x)\to0$ </p>
<p>根据$e^x - 1$ ~ $x$</p>
<p>有$e^{f(x)}-e^{g(x)}&#x3D;e^{g(x)}[e^{f(x)-g(x)}-1]$ $~$ ~ $f(x)-g(x)$</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011935549.png">  </p>
<br />

<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302011936160.png"></p>
<ul>
<li>谈论间断点，只看两类点：<ol>
<li>分段函数的分段点 (如1.3.20和1.3.21)</li>
<li>无意义点 (如1.3.22)</li>
</ol>
</li>
</ul>
<hr>
<h2 id="一元函数微分学的概念与计算"><a href="#一元函数微分学的概念与计算" class="headerlink" title="一元函数微分学的概念与计算"></a>一元函数微分学的概念与计算</h2><h3 id="导数定义："><a href="#导数定义：" class="headerlink" title="导数定义："></a>导数定义：</h3><p>$$<br>f’(x_0)&#x3D;\lim_{\Delta x\to0}\frac{\Delta y}{\Delta x}&#x3D;\lim_{\Delta x\to0}\frac{f({x_0+\Delta x})-f(x_0)}{\Delta x}<br>$$</p>
<ul>
<li>函数$f(x)$在点$x_0$处可导的充分必要条件是在其左导数$f’<em>-(x_0)$与右导数$f’</em>+(x_0)$均存在且相等</li>
</ul>
<h3 id="定理："><a href="#定理：" class="headerlink" title="定理："></a>定理：</h3><p>1. </p>
<p>$若f(x)在x&#x3D;x_0处连续,<br>且\lim_{x\to x_0}\frac{f(x)}{x-x_0}&#x3D;A(存在),则<br>f(x_0)&#x3D;0且f’(x_0)&#x3D;A$</p>
<p>证明：</p>
<p>$因为f(x)在x&#x3D;x_0处连续,$</p>
<p>$则f(x_0)&#x3D;\lim_{x\to x_0}f(x)&#x3D;\lim_{x\to x0}\frac{f(x)}{x-x0}(x-x0)&#x3D;0,$</p>
<p>$又f’(x_0)&#x3D;\lim_{x\to x_0}\frac{f(x)-f(x_0)}{x-x_0}&#x3D;A$</p>
<h3 id="笔记-1"><a href="#笔记-1" class="headerlink" title="笔记"></a>笔记</h3><ol>
<li><p>$\int \frac{1}{\sqrt{x^2+a^2}}dx&#x3D;\ln(x+\sqrt{x^2+a^2})+C$</p>
</li>
<li><p>若$y&#x3D;f(x)$可导，且$f’(x)\neq0$,则$f’(x)$必保号(恒正或恒负),$f(x)$必单调</p>
<p>依据：</p>
<p>若$f’(a)*f’(b)&lt;0$,则存在一个数$\xi\in(a,b)$,使得$f’(\xi)&#x3D;0$</p>
</li>
</ol>
<h2 id="一元函数微分学的几何运用"><a href="#一元函数微分学的几何运用" class="headerlink" title="一元函数微分学的几何运用"></a>一元函数微分学的几何运用</h2><h3 id="单调性与极值的判别"><a href="#单调性与极值的判别" class="headerlink" title="单调性与极值的判别"></a>单调性与极值的判别</h3><ol>
<li>设$f(x)$在$x&#x3D;x_0$处二阶可导，且$f’(x_0)&#x3D;0,f’’(x_0)\neq0$.</li>
</ol>
<p>则结论一：若$f’’(x_0)&lt;0$,则$f(x)$在$x_0$处取得极大值；</p>
<p>结论二：若$f’’(x_0)&gt;0$，则$f(x)$在$x_0$处取得极小值。<br><strong>证明：</strong></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302061645154.png"></p>
<h3 id="凹凸性与拐点的概念"><a href="#凹凸性与拐点的概念" class="headerlink" title="凹凸性与拐点的概念"></a>凹凸性与拐点的概念</h3><ol>
<li><p><strong>拐点定义</strong>：连续曲线的凹弧与凸弧的分界点称为该曲线的拐点</p>
</li>
<li><p><strong>拐点</strong>要求连续，<strong>极值点</strong>不要求连续</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071940546.png"></p>
<ol start="3">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071946170.png"></li>
</ol>
<h3 id="渐近线"><a href="#渐近线" class="headerlink" title="渐近线"></a>渐近线</h3><ol>
<li>有水平渐近线在<strong>这个方向</strong>上就没有斜渐近线</li>
<li>有斜渐近线在<strong>这个方向</strong>上就没有水平渐近线</li>
<li>求渐近线步骤：</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302081540479.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302081540842.png"></p>
<h3 id="最值及作函数图形"><a href="#最值及作函数图形" class="headerlink" title="最值及作函数图形"></a>最值及作函数图形</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302091314238.png"></p>
<h2 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h2><ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302101442112.png"></li>
</ol>
<h3 id="费马定理"><a href="#费马定理" class="headerlink" title="费马定理"></a>费马定理</h3><p>必须自己证一遍</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302122059213.png"></p>
<p>极限保号（脱帽带帽）：</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302122104132.png"></p>
<h3 id="罗尔定理"><a href="#罗尔定理" class="headerlink" title="罗尔定理"></a>罗尔定理</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302131325718.png" alt="image-20230213132546341"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302141527646.png" alt="image-20230214152709435"></p>
<h3 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h3><p>函数和导数有联系（$f(x)与f’(x)$），考虑拉格朗日</p>
<h3 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h3><h3 id="泰勒公式-1"><a href="#泰勒公式-1" class="headerlink" title="泰勒公式"></a>泰勒公式</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161405306.png"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161405434.png"></p>
<h4 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h4><ol>
<li><p>中值是端点的<strong>函数</strong></p>
</li>
<li><p>函数到高阶导数，考虑泰勒公式</p>
</li>
</ol>
<h3 id="零点问题"><a href="#零点问题" class="headerlink" title="零点问题"></a>零点问题</h3><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302171406575.png"></p>
<h2 id="一元函数积分学的概念与计算"><a href="#一元函数积分学的概念与计算" class="headerlink" title="一元函数积分学的概念与计算"></a>一元函数积分学的概念与计算</h2><p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302191332555.png"></p>
<h3 id="笔记：-1"><a href="#笔记：-1" class="headerlink" title="笔记："></a>笔记：</h3><ol>
<li>如果一个函数可导，有可能导出含震荡间断点的函数</li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302231659513.png"></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302231659837.png"></p>
<ol start="3">
<li>点火公式</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303181026811.png"></p>
<ol start="4">
<li>基本不等式（部分）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303181027238.png"></p>
<ol start="5">
<li>例题1.10.6</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303181028786.png"></p>
<ol start="6">
<li>推广的积分中值定理</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303181029951.png"></p>
<h2 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h2><h3 id="散记-1"><a href="#散记-1" class="headerlink" title="散记:"></a>散记:</h3><p>1. </p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303251201709.png"></p>
]]></content>
      <categories>
        <category>考研</category>
        <category>高数</category>
      </categories>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
