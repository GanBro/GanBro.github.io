<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vscode配置</title>
    <url>/2023/11/09/vscode%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1><span id="插件作用"> 插件作用</span></h1>
<h2><span id="live-server"> Live Server</span></h2>
<p>快速保存</p>
<h3><span id="github-theme"> Github Theme</span></h3>
<p>设置主题</p>
<h2><span id="github-pull-requests-and-issues"> GitHub Pull requests and Issues</span></h2>
<p>在Visual Studio Code中查看和管理GitHub拉取请求和问题</p>
<p><video src="C:/Users/wubo/Desktop/4f673338-df8c-11ed-8ab0-22b6cfbb5fb2-v1_f4_t2_Kyb3zzAZ.mp4"></video></p>
<h3><span id="git-graph"> Git Graph</span></h3>
<p>Git 图形化显示和操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091001708.gif" alt="动图"></p>
<h3><span id="markdown-preview-enhanced"> Markdown Preview Enhanced</span></h3>
<p>在 VSCode 里编写 Markdown，支持预览</p>
<h2><span id="image-preview"> Image Preview</span></h2>
<p>图片预览</p>
<h3><span id="github-copilot"> GitHub Copilot</span></h3>
<p>GitHub Copilot 使用 OpenAI Codex 从您的编辑器中实时建议代码和整个功能。经过数十亿行公共代码的训练，GitHub Copilot 将包括注释和方法名称在内的自然语言提示转化为数十种语言的编码建议。</p>
<h1><span id="c配置"> c++配置</span></h1>
<p><a href="https://blog.csdn.net/CC031023/article/details/130163136">csdn参考</a></p>
<p>以后如果新建c++文件夹，F5之后，选第一个<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091101402.png" alt="image-20231109110109341"></p>
<p>然后导入g++.exe就可以了</p>
]]></content>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2023/11/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1><span id="基础信息"> 基础信息</span></h1>
<p><a href="https://b11et3un53m.feishu.cn/wiki/FJAnwOhpIihMkLkOKQocdWZ7nUc">参考文档</a></p>
<p><a href="https://www.bilibili.com/video/BV1kH4y1S7wz/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=a76b9df816154c5c105a543f1d93bb5b">视频链接</a></p>
<h2><span id="前端配置"> 前端配置</span></h2>
<p>nginx目录在F:\nginxDocument\hmall-nginx</p>
<h1><span id="笔记"> 笔记</span></h1>
<ol>
<li>此视频中dps等价于docker ps</li>
</ol>
<h1><span id="服务器"> 服务器</span></h1>
<h2><span id="基础信息"> 基础信息</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091631628.png" alt="image-20231109161850880"></p>
<h1><span id="docker"> docker</span></h1>
<p>本安装教程参考Docker官方文档，地址如下：</p>
<p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<h2><span id="安装docker"> 安装docker</span></h2>
<h3><span id="1卸载旧版"> 1.卸载旧版</span></h3>
<p>首先如果系统中已经存在旧的Docker，则先卸载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure>
<h3><span id="2配置docker的yum库"> 2.配置Docker的yum库</span></h3>
<p>首先要安装一个yum工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>安装成功后，执行命令，配置Docker的yum源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h3><span id="3安装docker"> 3.安装Docker</span></h3>
<p>最后，执行命令，安装Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>
<h3><span id="4启动和校验"> 4.启动和校验</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<h3><span id="5配置镜像加速"> 5.配置镜像加速</span></h3>
<p>这里以阿里云镜像加速为例。</p>
<h4><span id="51注册阿里云账号"> 5.1.注册阿里云账号</span></h4>
<p>首先访问阿里云网站:</p>
<p><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p>
<p>注册一个账号。</p>
<h4><span id="52开通镜像服务"> 5.2.开通镜像服务</span></h4>
<p>在首页的产品中，找到阿里云的<strong>容器镜像服务</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091643402.png" alt="img"></p>
<p>点击后进入控制台：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091643610.png" alt="img"></p>
<p>首次可能需要选择立刻开通，然后进入控制台。</p>
<h4><span id="53配置镜像加速"> 5.3.配置镜像加速</span></h4>
<p>找到<strong>镜像工具</strong>下的<strong>镜像加速器</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091643455.png" alt="img"></p>
<p>具体命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://hq9hunxv.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2><span id="命令"> 命令</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<h1><span id="nacos"> nacos</span></h1>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/11/16/Linux/</url>
    <content><![CDATA[<h1><span id="linux基础命令"> Linux基础命令</span></h1>
<h2><span id="linux的目录结构"> Linux的目录结构</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034963.png" alt="image-20221027214128453"></p>
<ul>
<li><code>/</code>，根目录是最顶级的目录了</li>
<li>Linux只有一个顶级目录：<code>/</code></li>
<li>路径描述的层次关系同样适用<code>/</code>来表示</li>
<li>/home/itheima/a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li>
</ul>
<h2><span id="ls命令"> ls命令</span></h2>
<p>功能：列出文件夹信息</p>
<p>语法：<code>ls [-l -h -a] [参数]</code></p>
<ul>
<li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li>
<li>-l，以列表形式查看</li>
<li>-h，配合-l，以更加人性化的方式显示文件大小</li>
<li>-a，显示隐藏文件</li>
</ul>
<h3><span id="隐藏文件-文件夹"> 隐藏文件、文件夹</span></h3>
<p>在Linux中以<code>.</code>开头的，均是隐藏的。</p>
<p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p>
<h2><span id="pwd命令"> pwd命令</span></h2>
<p>功能：展示当前工作目录</p>
<p>语法：<code>pwd</code></p>
<h2><span id="cd命令"> cd命令</span></h2>
<p>功能：切换工作目录</p>
<p>语法：<code>cd [目标目录]</code></p>
<p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p>
<h2><span id="home目录"> HOME目录</span></h2>
<p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p>
<ul>
<li>
<p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p>
</li>
<li>
<p>root用户的HOME目录，在：<code>/root</code></p>
</li>
</ul>
<p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p>
<h2><span id="相对路径-绝对路径"> 相对路径、绝对路径</span></h2>
<ul>
<li>
<p>相对路径，<mark>非</mark><code>/</code>开头的称之为相对路径</p>
<p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p>
</li>
<li>
<p>绝对路径，<mark>以</mark><code>/</code>开头的称之为绝对路径</p>
<p>绝对路径从<code>根</code>开始描述路径</p>
</li>
</ul>
<h2><span id="特殊路径符"> 特殊路径符</span></h2>
<ul>
<li><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的<code>a.txt</code>文件</li>
<li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li>
<li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li>
</ul>
<h2><span id="mkdir命令"> mkdir命令</span></h2>
<p>功能：创建文件夹</p>
<p>语法：<code>mkdir [-p] 参数</code></p>
<ul>
<li>参数：被创建文件夹的路径</li>
<li>选项：-p，可选，表示创建前置路径</li>
</ul>
<h2><span id="touch命令"> touch命令</span></h2>
<p>功能：创建文件</p>
<p>语法：<code>touch 参数</code></p>
<ul>
<li>参数：被创建的文件路径</li>
</ul>
<h2><span id="cat命令"> cat命令</span></h2>
<p>功能：查看文件内容</p>
<p>语法：<code>cat 参数</code></p>
<ul>
<li>参数：被查看的文件路径</li>
</ul>
<h2><span id="more命令"> more命令</span></h2>
<p>功能：查看文件，可以支持翻页查看</p>
<p>语法：<code>more 参数</code></p>
<ul>
<li>参数：被查看的文件路径</li>
<li>在查看过程中：
<ul>
<li><code>空格</code>键翻页</li>
<li><code>q</code>退出查看</li>
</ul>
</li>
</ul>
<h2><span id="cp命令"> cp命令</span></h2>
<p>功能：复制文件、文件夹</p>
<p>语法：<code>cp [-r] 参数1 参数2</code></p>
<ul>
<li>参数1，被复制的</li>
<li>参数2，要复制去的地方</li>
<li>选项：-r，可选，复制文件夹使用</li>
</ul>
<p>示例：</p>
<ul>
<li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li>
<li>cp a.txt test/，复制当前目录a.txt到test文件夹内</li>
<li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li>
</ul>
<h2><span id="mv命令"> mv命令</span></h2>
<p>功能：移动文件、文件夹</p>
<p>语法：<code>mv 参数1 参数2</code></p>
<ul>
<li>参数1：被移动的</li>
<li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li>
</ul>
<h2><span id="rm命令"> rm命令</span></h2>
<p>功能：删除文件、文件夹</p>
<p>语法：<code>rm [-r -f] 参数...参数</code></p>
<ul>
<li>参数：支持多个，每一个表示被删除的，空格进行分隔</li>
<li>选项：-r，删除文件夹使用</li>
<li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li>
</ul>
<blockquote>
<p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p>
</blockquote>
<h2><span id="which命令"> which命令</span></h2>
<p>功能：查看命令的程序本体文件路径</p>
<p>语法：<code>which 参数</code></p>
<ul>
<li>参数：被查看的命令</li>
</ul>
<h2><span id="find命令"> find命令</span></h2>
<p>功能：搜索文件</p>
<p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p>
<ul>
<li>路径，搜索的起始路径</li>
<li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li>
</ul>
<h2><span id="grep命令"> grep命令</span></h2>
<p>功能：过滤关键字</p>
<p>语法：<code>grep [-n] 关键字 文件路径</code></p>
<ul>
<li>选项-n，可选，表示在结果中显示匹配的行的行号。</li>
<li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li>
<li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li>
</ul>
<blockquote>
<p>参数文件路径，可以作为管道符的输入</p>
</blockquote>
<h2><span id="wc命令"> wc命令</span></h2>
<p>功能：统计</p>
<p>语法：<code>wc [-c -m -l -w] 文件路径</code></p>
<ul>
<li>选项，-c，统计bytes数量</li>
<li>选项，-m，统计字符数量</li>
<li>选项，-l，统计行数</li>
<li>选项，-w，统计单词数量</li>
<li>参数，文件路径，被统计的文件，可作为内容输入端口</li>
</ul>
<blockquote>
<p>参数文件路径，可作为管道符的输入</p>
</blockquote>
<h2><span id="管道符"> 管道符|</span></h2>
<p>写法：<code>|</code></p>
<p>功能：将符号左边的结果，作为符号右边的输入</p>
<p>示例：</p>
<p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p>
<p>可以支持嵌套：</p>
<p><code>cat a.txt | grep itheima | grep itcast</code></p>
<h2><span id="echo命令"> echo命令</span></h2>
<p>功能：输出内容</p>
<p>语法：<code>echo 参数</code></p>
<ul>
<li>参数：被输出的内容</li>
</ul>
<h2><span id="反引号"> `反引号</span></h2>
<p>功能：被两个反引号包围的内容，会作为命令执行</p>
<p>示例：</p>
<ul>
<li>echo `pwd`，会输出当前工作目录</li>
</ul>
<h2><span id="tail命令"> tail命令</span></h2>
<p>功能：查看文件尾部内容</p>
<p>语法：<code>tail [-f] 参数</code></p>
<ul>
<li>参数：被查看的文件</li>
<li>选项：-f，持续跟踪文件修改</li>
</ul>
<h2><span id="head命令"> head命令</span></h2>
<p>功能：查看文件头部内容</p>
<p>语法：<code>head [-n] 参数</code></p>
<ul>
<li>参数：被查看的文件</li>
<li>选项：-n，查看的行数</li>
</ul>
<h2><span id="重定向符"> 重定向符</span></h2>
<p>功能：将符号左边的结果，输出到右边指定的文件中去</p>
<ul>
<li><code>&gt;</code>，表示覆盖输出</li>
<li><code>&gt;&gt;</code>，表示追加输出</li>
</ul>
<h2><span id="vi编辑器"> vi编辑器</span></h2>
<h3><span id="命令模式快捷键"> 命令模式快捷键</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034844.png" alt="image-20221027215841573"></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034971.png" alt="image-20221027215846581"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p>
<h3><span id="底线命令快捷键"> 底线命令快捷键</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034869.png" alt="image-20221027215858967"></p>
<h2><span id="命令的选项"> 命令的选项</span></h2>
<p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p>
<p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p>
<p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p>
<p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p>
<h3><span id="查看命令的帮助"> 查看命令的帮助</span></h3>
<p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034151.png" alt="image-20221027220005610"></p>
<h3><span id="查看命令的详细手册"> 查看命令的详细手册</span></h3>
<p>可以通过：<code>man 命令</code>查看某命令的详细手册</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034274.png" alt="image-20221027220009949"></p>
<h1><span id="linux常用操作"> Linux常用操作</span></h1>
<h2><span id="软件安装"> 软件安装</span></h2>
<ul>
<li>CentOS系统使用：
<ul>
<li>yum [install remove search] [-y] 软件名称
<ul>
<li>install 安装</li>
<li>remove 卸载</li>
<li>search 搜索</li>
<li>-y，自动确认</li>
</ul>
</li>
</ul>
</li>
<li>Ubuntu系统使用
<ul>
<li>apt [install remove search] [-y] 软件名称
<ul>
<li>install 安装</li>
<li>remove 卸载</li>
<li>search 搜索</li>
<li>-y，自动确认</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>yum 和 apt 均需要root权限</p>
</blockquote>
<h2><span id="systemctl"> systemctl</span></h2>
<p>功能：控制系统服务的启动关闭等</p>
<p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p>
<ul>
<li>start，启动</li>
<li>stop，停止</li>
<li>status，查看状态</li>
<li>disable，关闭开机自启</li>
<li>enable，开启开机自启</li>
<li>restart，重启</li>
</ul>
<h2><span id="软链接"> 软链接</span></h2>
<p>功能：创建文件、文件夹软链接（快捷方式）</p>
<p>语法：<code>ln -s 参数1 参数2</code></p>
<ul>
<li>参数1：被链接的</li>
<li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li>
</ul>
<h2><span id="日期"> 日期</span></h2>
<p>语法：<code>date [-d] [+格式化字符串]</code></p>
<ul>
<li>
<p>-d 按照给定的字符串显示日期，一般用于日期计算</p>
</li>
<li>
<p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p>
<ul>
<li>%Y   年%y   年份后两位数字 (00…99)</li>
<li>%m   月份 (01…12)</li>
<li>%d   日 (01…31)</li>
<li>%H   小时 (00…23)</li>
<li>%M   分钟 (00…59)</li>
<li>%S   秒 (00…60)</li>
<li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li>
</ul>
</li>
</ul>
<p>示例：</p>
<ul>
<li>
<p>按照2022-01-01的格式显示日期</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034113.png" alt="image-20221027220514640"></p>
</li>
<li>
<p>按照2022-01-01 10:00:00的格式显示日期</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034221.png" alt="image-20221027220525625"></p>
</li>
<li>
<p>-d选项日期计算</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161040976.png" alt="image-20221027220429831"></p>
<ul>
<li>
<p>支持的时间标记为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161040937.png" alt="image-20221027220449312"></p>
</li>
</ul>
</li>
</ul>
<h2><span id="时区"> 时区</span></h2>
<p>修改时区为中国时区</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034713.png" alt="image-20221027220554654"></p>
<h2><span id="ntp"> ntp</span></h2>
<p>功能：同步时间</p>
<p>安装：<code>yum install -y ntp</code></p>
<p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p>
<p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p>
<h2><span id="ip地址"> ip地址</span></h2>
<p>格式：a.b.c.d</p>
<ul>
<li>abcd为0~255的数字</li>
</ul>
<p>特殊IP：</p>
<ul>
<li>127.0.0.1，表示本机</li>
<li>0.0.0.0
<ul>
<li>可以表示本机</li>
<li>也可以表示任意IP（看使用场景）</li>
</ul>
</li>
</ul>
<p>查看ip：<code>ifconfig</code></p>
<h2><span id="主机名"> 主机名</span></h2>
<p>功能：Linux系统的名称</p>
<p>查看：<code>hostname</code></p>
<p>设置：<code>hostnamectl set-hostname 主机名</code></p>
<h2><span id="配置vmware固定ip"> 配置VMware固定IP</span></h2>
<ol>
<li>
<p>修改VMware网络，参阅PPT，图太多</p>
</li>
<li>
<p>设置Linux内部固定IP</p>
<p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<p>示例文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;			# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;		# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;		# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;		# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;			# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="ps命令"> ps命令</span></h2>
<p>功能：查看进程信息</p>
<p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p>
<h2><span id="kill命令"> kill命令</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161041536.png" alt="image-20221027221303037"></p>
<h2><span id="nmap命令"> nmap命令</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034358.png" alt="image-20221027221241123"></p>
<h2><span id="netstat命令"> netstat命令</span></h2>
<p>功能：查看端口占用</p>
<p>用法：<code>netstat -anp | grep xxx</code></p>
<h2><span id="ping命令"> ping命令</span></h2>
<p>测试网络是否联通</p>
<p>语法：<code>ping [-c num] 参数</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034835.png" alt="image-20221027221129782"></p>
<h2><span id="wget命令"> wget命令</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034660.png" alt="image-20221027221148964"></p>
<h2><span id="curl命令"> curl命令</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034778.png" alt="image-20221027221201079"></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034676.png" alt="image-20221027221210518"></p>
<h2><span id="top命令"> top命令</span></h2>
<p>功能：查看主机运行状态</p>
<p>语法：<code>top</code>，查看基础信息</p>
<p>可用选项：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034093.png" alt="image-20221027221340729"></p>
<p>交互式模式中，可用快捷键：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161039874.png" alt="image-20221027221354137"><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p>
<h2><span id="df命令"> df命令</span></h2>
<p>查看磁盘占用</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034661.png" alt="image-20221027221413787"></p>
<h2><span id="iostat命令"> iostat命令</span></h2>
<p>查看CPU、磁盘的相关信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034290.png" alt="image-20221027221439990"></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034538.png" alt="image-20221027221514237"></p>
<h2><span id="sar命令"> sar命令</span></h2>
<p>查看网络统计</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034999.png" alt="image-20221027221545822"></p>
<h2><span id="环境变量"> 环境变量</span></h2>
<ul>
<li>临时设置：export 变量名=变量值</li>
<li>永久设置：
<ul>
<li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li>
<li>针对全局，设置<code>/etc/profile</code></li>
</ul>
</li>
</ul>
<h3><span id="path变量"> PATH变量</span></h3>
<p>记录了执行程序的搜索路径</p>
<p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p>
<h2><span id="符号"> $符号</span></h2>
<p>可以取出指定的环境变量的值</p>
<p>语法：<code>$变量名</code></p>
<p>示例：</p>
<p><code>echo $PATH</code>，输出PATH环境变量的值</p>
<p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p>
<p>如果变量名和其它内容混淆在一起，可以使用${}</p>
<h2><span id="压缩解压"> 压缩解压</span></h2>
<h3><span id="压缩"> 压缩</span></h3>
<p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p>
<ul>
<li>-z表示使用gzip，可以不写</li>
</ul>
<p><code>zip [-r] 参数1 参数2 参数N</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p>
<h3><span id="解压"> 解压</span></h3>
<p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p>
<ul>
<li>-z表示使用gzip，可以省略</li>
<li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li>
</ul>
<p><code>unzip [-d] 参数</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p>
<h2><span id="su命令"> su命令</span></h2>
<p>切换用户</p>
<p>语法：<code>su [-] [用户]</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p>
<h2><span id="sudo命令"> sudo命令</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034005.png" alt="image-20221027222035337"></p>
<p>比如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p>
<h2><span id="chmod命令"> chmod命令</span></h2>
<p>修改文件、文件夹权限</p>
<p>语法：<code>chmod [-R] 权限 参数</code></p>
<ul>
<li>
<p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034547.png" alt="image-20221027222157276"></p>
</li>
<li>
<p>参数，被修改的文件、文件夹</p>
</li>
<li>
<p>选项-R，设置文件夹和其内部全部内容一样生效</p>
</li>
</ul>
<h2><span id="chown命令"> chown命令</span></h2>
<p>修改文件、文件夹所属用户、组</p>
<p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p>
<h2><span id="用户组管理"> 用户组管理</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034544.png" alt="image-20221027222354498"></p>
<h2><span id="用户管理"> 用户管理</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034727.png" alt="image-20221027222407618"></p>
<h2><span id="genenv命令"> genenv命令</span></h2>
<ul>
<li>
<p><code>getenv group</code>，查看系统全部的用户组</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034723.png" alt="image-20221027222446514"></p>
</li>
<li>
<p><code>getenv passwd</code>，查看系统全部的用户</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161034511.png" alt="image-20221027222512274"></p>
</li>
</ul>
<h2><span id="env命令"> env命令</span></h2>
<p>查看系统全部的环境变量</p>
<p>语法：<code>env</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MQ</title>
    <url>/2023/11/16/MQ/</url>
    <content><![CDATA[<p>微服务一旦拆分，必然涉及到服务之间的相互调用，目前我们服务之间调用采用的都是基于OpenFeign的调用。这种调用中，调用者发起请求后需要<strong>等待</strong>服务提供者执行业务返回结果后，才能继续执行后面的业务。也就是说调用者在调用过程中处于阻塞状态，因此我们成这种调用方式为<strong>同步调用</strong>，也可以叫<strong>同步通讯</strong>。但在很多场景下，我们可能需要采用<strong>异步通讯</strong>的方式，为什么呢？</p>
<p>我们先来看看什么是同步通讯和异步通讯。如图：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553496.png" alt="image.png"><br>
解读：</p>
<ul>
<li>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</li>
<li>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天。</li>
</ul>
<p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</p>
<p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯（同步调用）。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯（异步调用）。</p>
<p>同步调用的方式我们已经学过了，之前的OpenFeign调用就是。但是：</p>
<ul>
<li>异步调用又该如何实现？</li>
<li>哪些业务适合用异步调用来实现呢？</li>
</ul>
<p>通过今天的学习你就能明白这些问题了。</p>
<h1><span id="1初识mq"> 1.初识MQ</span></h1>
<h2><span id="11同步调用"> 1.1.同步调用</span></h2>
<p>之前说过，我们现在基于OpenFeign的调用都属于是同步调用，那么这种方式存在哪些问题呢？<br>
举个例子，我们以昨天留给大家作为作业的<strong>余额支付功能</strong>为例来分析，首先看下整个流程：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553472.jpeg" alt><br>
目前我们采用的是基于OpenFeign的同步调用，也就是说业务执行流程是这样的：</p>
<ul>
<li>支付服务需要先调用用户服务完成余额扣减</li>
<li>然后支付服务自己要更新支付流水单的状态</li>
<li>然后支付服务调用交易服务，更新业务订单状态为已支付</li>
</ul>
<p>三个步骤依次执行。<br>
这其中就存在3个问题：<br>
<strong>第一</strong>，<strong>拓展性差</strong><br>
我们目前的业务相对简单，但是随着业务规模扩大，产品的功能也在不断完善。<br>
在大多数电商业务中，用户支付成功后都会以短信或者其它方式通知用户，告知支付成功。假如后期产品经理提出这样新的需求，你怎么办？是不是要在上述业务中再加入通知用户的业务？<br>
某些电商项目中，还会有积分或金币的概念。假如产品经理提出需求，用户支付成功后，给用户以积分奖励或者返还金币，你怎么办？是不是要在上述业务中再加入积分业务、返还金币业务？<br>
。。。<br>
最终你的支付业务会越来越臃肿：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27967491/1686984472076-c05b2155-3346-40f5-b85e-5961caa998ab.jpeg" alt><br>
也就是说每次有新的需求，现有支付逻辑都要跟着变化，代码经常变动，不符合开闭原则，拓展性不好。</p>
<p><strong>第二</strong>，<strong>性能下降</strong><br>
由于我们采用了同步调用，调用者需要等待服务提供者执行完返回结果后，才能继续向下执行，也就是说每次远程调用，调用者都是阻塞等待状态。最终整个业务的响应时长就是每次远程调用的执行时长之和：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27967491/1686989760653-42e1ae3e-677b-4f27-b55a-eaa259f03ad3.jpeg" alt><br>
假如每个微服务的执行时长都是50ms，则最终整个业务的耗时可能高达300ms，性能太差了。</p>
<p><strong>第三，级联失败</strong><br>
由于我们是基于OpenFeign调用交易服务、通知服务。当交易服务、通知服务出现故障时，整个事务都会回滚，交易失败。<br>
这其实就是同步调用的<strong>级联失败</strong>问题。</p>
<p>但是大家思考一下，我们假设用户余额充足，扣款已经成功，此时我们应该确保支付流水单更新为已支付，确保交易成功。毕竟收到手里的钱没道理再退回去吧<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1686986652875-9e2924a9-e0f3-4de2-ae41-8b39ef6345bc.png#averageHue=%23d2c088&amp;clientId=uf9c47826-2719-4&amp;from=paste&amp;height=22&amp;id=u1eecfdc1&amp;originHeight=143&amp;originWidth=150&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=42199&amp;status=done&amp;style=none&amp;taskId=u80811df5-062e-457a-a9a8-0173e00f6b1&amp;title=&amp;width=22.999998092651367" alt="image.png">。</p>
<p>因此，这里不能因为短信通知、更新订单状态失败而回滚整个事务。</p>
<p>综上，同步调用的方式存在下列问题：</p>
<ul>
<li>拓展性差</li>
<li>性能下降</li>
<li>级联失败</li>
</ul>
<p>而要解决这些问题，我们就必须用<strong>异步调用</strong>的方式来代替<strong>同步调用</strong>。</p>
<h2><span id="12异步调用"> 1.2.异步调用</span></h2>
<p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p>
<ul>
<li>消息发送者：投递消息的人，就是原来的调用方</li>
<li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li>
<li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553454.jpeg" alt></p>
<p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。<br>
这样，发送消息的人和接收消息的人就完全解耦了。</p>
<p>还是以余额支付业务为例：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553012.jpeg" alt><br>
除了扣减余额、更新支付流水单状态以外，其它调用逻辑全部取消。而是改为发送一条消息到Broker。而相关的微服务都可以订阅消息通知，一旦消息到达Broker，则会分发给每一个订阅了的微服务，处理各自的业务。</p>
<p>假如产品经理提出了新的需求，比如要在支付成功后更新用户积分。支付代码完全不用变更，而仅仅是让积分服务也订阅消息即可：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553242.jpeg" alt><br>
不管后期增加了多少消息订阅者，作为支付服务来讲，执行问扣减余额、更新支付流水状态后，发送消息即可。业务耗时仅仅是这三部分业务耗时，仅仅100ms，大大提高了业务性能。</p>
<p>另外，不管是交易服务、通知服务，还是积分服务，他们的业务与支付关联度低。现在采用了异步调用，解除了耦合，他们即便执行过程中出现了故障，也不会影响到支付服务。</p>
<p>综上，异步调用的优势包括：</p>
<ul>
<li>耦合度更低</li>
<li>性能更好</li>
<li>业务拓展性强</li>
<li>故障隔离，避免级联失败</li>
</ul>
<p>当然，异步通信也并非完美无缺，它存在下列缺点：</p>
<ul>
<li>完全依赖于Broker的可靠性、安全性和性能</li>
<li>架构复杂，后期维护和调试麻烦</li>
</ul>
<h2><span id="13技术选型"> 1.3.技术选型</span></h2>
<p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.<br>
目比较常见的MQ实现：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<p>几种常见MQ的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RocketMQ</strong></th>
<th><strong>Kafka</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>公司/社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP，XMPP，SMTP，STOMP</td>
<td>OpenWire,STOMP，REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单机吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody>
</table>
<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ<br>
追求可靠性：RabbitMQ、RocketMQ<br>
追求吞吐能力：RocketMQ、Kafka<br>
追求消息低延迟：RabbitMQ、Kafka</p>
<p>据统计，目前国内消息队列使用最多的还是RabbitMQ，再加上其各方面都比较均衡，稳定性也好，因此我们课堂上选择RabbitMQ来学习。</p>
<h1><span id="2rabbitmq"> 2.RabbitMQ</span></h1>
<p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：<br>
<a href="https://www.rabbitmq.com/">Messaging that just works — RabbitMQ</a><br>
接下来，我们就学习它的基本概念和基础用法。</p>
<h2><span id="21安装"> 2.1.安装</span></h2>
<p>我们同样基于Docker来安装RabbitMQ，使用下面的命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itheima \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network hmall \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>
<p>如果拉取镜像困难的话，可以使用课前资料给大家准备的镜像，利用docker load命令加载：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689939432832-7ee45271-f96c-43fa-b0f5-8c01bcdf289f.png#averageHue=%23f8f2f2&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=169&amp;id=u6c039f48&amp;originHeight=188&amp;originWidth=747&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=15874&amp;status=done&amp;style=none&amp;taskId=ub0c7a06c-2f63-4bc5-98d6-da0bfc75c32&amp;title=&amp;width=669.5798176232812" alt="image.png"></p>
<p>可以看到在安装命令中有两个映射的端口：</p>
<ul>
<li>15672：RabbitMQ提供的管理控制台的端口</li>
<li>5672：RabbitMQ的消息发送处理接口</li>
</ul>
<p>安装完成后，我们访问 http://192.168.150.101:15672即可看到管理控制台。首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。<br>
登录后即可看到管理控制台总览页面：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687137883587-56417f79-a649-43a5-be88-2ff777d3cd25.png#averageHue=%23f7f6f6&amp;clientId=u6a529863-cf4b-4&amp;from=paste&amp;height=707&amp;id=u7d848ee1&amp;originHeight=876&amp;originWidth=1572&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=83168&amp;status=done&amp;style=none&amp;taskId=ub505f8cf-075f-462b-bce3-e0df935715d&amp;title=&amp;width=1268.168026574142" alt="image.png"></p>
<p>RabbitMQ对应的架构如图：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553406.png" alt="image.png"><br>
其中包含几个概念：</p>
<ul>
<li><code>publisher</code>：生产者，也就是发送消息的一方</li>
<li><code>consumer</code>：消费者，也就是消费消息的一方</li>
<li><code>queue</code>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li>
<li><code>exchange</code>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li>
<li><code>virtual host</code>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li>
</ul>
<p>上述这些东西都可以在RabbitMQ的管理控制台来管理，下一节我们就一起来学习控制台的使用。</p>
<h2><span id="22收发消息"> 2.2.收发消息</span></h2>
<h3><span id="221交换机"> 2.2.1.交换机</span></h3>
<p>我们打开Exchanges选项卡，可以看到已经存在很多交换机：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553493.png" alt="image.png"><br>
我们点击任意交换机，即可进入交换机详情页面。仍然会利用控制台中的publish message 发送一条消息：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553311.png" alt="image.png"><br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687138163403-839087fe-66f7-4710-a866-210aa0282be8.png#averageHue=%23f9f6f6&amp;clientId=u6a529863-cf4b-4&amp;from=paste&amp;height=616&amp;id=ubca84480&amp;originHeight=763&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=46085&amp;status=done&amp;style=none&amp;taskId=u5f176fff-eda8-457c-94cd-bb7d6bbd997&amp;title=&amp;width=880.9411482308925" alt="image.png"><br>
这里是由控制台模拟了生产者发送的消息。由于没有消费者存在，最终消息丢失了，这样说明交换机没有存储消息的能力。</p>
<h3><span id="222队列"> 2.2.2.队列</span></h3>
<p>我们打开<code>Queues</code>选项卡，新建一个队列：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687138308409-be6e1649-af03-4ee7-bee3-8518fd0dca03.png#averageHue=%23f9f8f7&amp;clientId=u6a529863-cf4b-4&amp;from=paste&amp;height=417&amp;id=u398bfe43&amp;originHeight=517&amp;originWidth=1157&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=35084&amp;status=done&amp;style=none&amp;taskId=u3b2b568c-e113-4abf-971c-2aea7bfaa4b&amp;title=&amp;width=933.3781213398743" alt="image.png"><br>
命名为<code>hello.queue1</code>：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687255044231-4b0e0339-c1ab-468a-8a72-9ae1b184594c.png#averageHue=%23f9f6f6&amp;clientId=u1711eaf3-9387-4&amp;from=paste&amp;height=548&amp;id=uf3cb4af4&amp;originHeight=679&amp;originWidth=1163&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=51428&amp;status=done&amp;style=none&amp;taskId=u71f9590b-0cc5-4727-bd4c-65b353c4df7&amp;title=&amp;width=938.2184573191648" alt="image.png"><br>
再以相同的方式，创建一个队列，密码为<code>hello.queue2</code>，最终队列列表如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553469.png" alt="image.png"><br>
此时，我们再次向<code>amq.fanout</code>交换机发送一条消息。会发现消息依然没有到达队列！！<br>
怎么回事呢？<br>
发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定。</p>
<h3><span id="223绑定关系"> 2.2.3.绑定关系</span></h3>
<p>点击<code>Exchanges</code>选项卡，点击<code>amq.fanout</code>交换机，进入交换机详情页，然后点击<code>Bindings</code>菜单，在表单中填写要绑定的队列名称：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687255547460-d87943cd-4309-4778-8e9e-374167a97e45.png#averageHue=%23f9f7f7&amp;clientId=u1711eaf3-9387-4&amp;from=paste&amp;height=481&amp;id=u04a61731&amp;originHeight=596&amp;originWidth=1022&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=34676&amp;status=done&amp;style=none&amp;taskId=u0ce69958-400b-4c37-89ea-adf0b369080&amp;title=&amp;width=824.4705618058354" alt="image.png"><br>
相同的方式，将hello.queue2也绑定到改交换机。<br>
最终，绑定结果如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553082.png" alt="image.png"></p>
<h3><span id="224发送消息"> 2.2.4.发送消息</span></h3>
<p>再次回到exchange页面，找到刚刚绑定的<code>amq.fanout</code>，点击进入详情页，再次发送一条消息：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687138163403-839087fe-66f7-4710-a866-210aa0282be8.png#averageHue=%23f9f6f6&amp;clientId=u6a529863-cf4b-4&amp;from=paste&amp;height=616&amp;id=GyhjT&amp;originHeight=763&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=46085&amp;status=done&amp;style=none&amp;taskId=u5f176fff-eda8-457c-94cd-bb7d6bbd997&amp;title=&amp;width=880.9411482308925" alt="image.png"><br>
回到<code>Queues</code>页面，可以发现<code>hello.queue</code>中已经有一条消息了：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553166.png" alt="image.png"><br>
点击队列名称，进入详情页，查看队列详情，这次我们点击get message：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553254.png" alt="image.png"><br>
可以看到消息到达队列了：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687255798153-dda9b729-a3a0-415c-9167-48c525c75800.png#averageHue=%23f9f7f7&amp;clientId=u1711eaf3-9387-4&amp;from=paste&amp;height=466&amp;id=u66fa5450&amp;originHeight=578&amp;originWidth=762&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=33500&amp;status=done&amp;style=none&amp;taskId=u665361c6-23b2-4fc4-b1a9-fdf6c880545&amp;title=&amp;width=614.7226693699085" alt="image.png"><br>
这个时候如果有消费者监听了MQ的<code>hello.queue1</code>或<code>hello.queue2</code>队列，自然就能接收到消息了。</p>
<h2><span id="23数据隔离"> 2.3.数据隔离</span></h2>
<h3><span id="231用户管理"> 2.3.1.用户管理</span></h3>
<p>点击<code>Admin</code>选项卡，首先会看到RabbitMQ控制台的用户管理界面：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687151143347-f7e2aaff-0a14-4022-8d50-582ee75e2998.png#averageHue=%23f7f5f5&amp;clientId=uc5430584-57f9-4&amp;from=paste&amp;height=450&amp;id=u2a51a990&amp;originHeight=558&amp;originWidth=1580&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=55212&amp;status=done&amp;style=none&amp;taskId=u18a12c4e-be8d-4ccb-a14a-415a21db44a&amp;title=&amp;width=1274.621807879863" alt="image.png"><br>
这里的用户都是RabbitMQ的管理或运维人员。目前只有安装RabbitMQ时添加的<code>itheima</code>这个用户。仔细观察用户表格中的字段，如下：</p>
<ul>
<li><code>Name</code>：<code>itheima</code>，也就是用户名</li>
<li><code>Tags</code>：<code>administrator</code>，说明<code>itheima</code>用户是超级管理员，拥有所有权限</li>
<li><code>Can access virtual host</code>： <code>/</code>，可以访问的<code>virtual host</code>，这里的<code>/</code>是默认的<code>virtual host</code></li>
</ul>
<p>对于小型企业而言，出于成本考虑，我们通常只会搭建一套MQ集群，公司内的多个不同项目同时使用。这个时候为了避免互相干扰， 我们会利用<code>virtual host</code>的隔离特性，将不同项目隔离。一般会做两件事情：</p>
<ul>
<li>给每个项目创建独立的运维账号，将管理权限分离。</li>
<li>给每个项目创建不同的<code>virtual host</code>，将每个项目的数据隔离。</li>
</ul>
<p>比如，我们给黑马商城创建一个新的用户，命名为<code>hmall</code>：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687151725993-05fe9bd1-8f8b-468d-8456-eac36278bea2.png#averageHue=%23f7f5f5&amp;clientId=uc5430584-57f9-4&amp;from=paste&amp;height=609&amp;id=ua32ca0ae&amp;originHeight=755&amp;originWidth=1569&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=70298&amp;status=done&amp;style=none&amp;taskId=u4f4ed00c-b8dd-4ffd-8a83-75d03c11fb5&amp;title=&amp;width=1265.7478585844967" alt="image.png"><br>
你会发现此时hmall用户没有任何<code>virtual host</code>的访问权限：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553891.png" alt="image.png"><br>
别急，接下来我们就来授权。</p>
<h3><span id="232virtual-host"> 2.3.2.virtual host</span></h3>
<p>我们先退出登录：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553996.png" alt="image.png"><br>
切换到刚刚创建的hmall用户登录，然后点击<code>Virtual Hosts</code>菜单，进入<code>virtual host</code>管理页：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687152310566-2531b1c8-b362-47c7-ba81-1b7c1880c18b.png#averageHue=%23f5f4f3&amp;clientId=uc5430584-57f9-4&amp;from=paste&amp;height=409&amp;id=uf51820c2&amp;originHeight=507&amp;originWidth=1565&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=60462&amp;status=done&amp;style=none&amp;taskId=ud7655191-c9d5-4801-9669-55b47348861&amp;title=&amp;width=1262.5209679316363" alt="image.png"><br>
可以看到目前只有一个默认的<code>virtual host</code>，名字为 <code>/</code>。<br>
我们可以给黑马商城项目创建一个单独的<code>virtual host</code>，而不是使用默认的<code>/</code>。<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687152363999-edb47263-f303-4ee8-a80d-be55d6b0ed37.png#averageHue=%23f6f5f4&amp;clientId=uc5430584-57f9-4&amp;from=paste&amp;height=553&amp;id=ufc5bd4a7&amp;originHeight=685&amp;originWidth=1555&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=67199&amp;status=done&amp;style=none&amp;taskId=u38a5fe38-fcb5-4163-bee4-ddffaba416b&amp;title=&amp;width=1254.4537412994853" alt="image.png"><br>
创建完成后如图：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687152448758-d0a05827-10ac-459b-a92f-495304dddf89.png#averageHue=%23f5f5f4&amp;clientId=uc5430584-57f9-4&amp;from=paste&amp;height=232&amp;id=ue38b9ba4&amp;originHeight=287&amp;originWidth=990&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=24622&amp;status=done&amp;style=none&amp;taskId=ue5f326dc-340c-46e0-83d5-84a19fef1d9&amp;title=&amp;width=798.655436582952" alt="image.png"><br>
由于我们是登录<code>hmall</code>账户后创建的<code>virtual host</code>，因此回到<code>users</code>菜单，你会发现当前用户已经具备了对<code>/hmall</code>这个<code>virtual host</code>的访问权限了：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553674.png" alt="image.png"></p>
<p>此时，点击页面右上角的<code>virtual host</code>下拉菜单，切换<code>virtual host</code>为 <code>/hmall</code>：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553701.png" alt="image.png"><br>
然后再次查看queues选项卡，会发现之前的队列已经看不到了：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553775.png" alt="image.png"><br>
这就是基于<code>virtual host </code>的隔离效果。</p>
<h1><span id="3springamqp"> 3.SpringAMQP</span></h1>
<p>将来我们开发业务功能的时候，肯定不会在控制台收发消息，而是应该基于编程的方式。由于<code>RabbitMQ</code>采用了AMQP协议，因此它具备跨语言的特性。任何语言只要遵循AMQP协议收发消息，都可以与<code>RabbitMQ</code>交互。并且<code>RabbitMQ</code>官方也提供了各种不同语言的客户端。<br>
但是，RabbitMQ官方提供的Java客户端编码相对复杂，一般生产环境下我们更多会结合Spring来使用。而Spring的官方刚好基于RabbitMQ提供了这样一套消息收发的模板工具：SpringAMQP。并且还基于SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAmqp的官方地址：<br>
<a href="https://spring.io/projects/spring-amqp">Spring AMQP</a><br>
SpringAMQP提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系</li>
<li>基于注解的监听器模式，异步接收消息</li>
<li>封装了RabbitTemplate工具，用于发送消息</li>
</ul>
<p>这一章我们就一起学习一下，如何利用SpringAMQP实现对RabbitMQ的消息收发。</p>
<h2><span id="31导入demo工程"> 3.1.导入Demo工程</span></h2>
<p>在课前资料给大家提供了一个Demo工程，方便我们学习SpringAMQP的使用：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689939402093-e0e0a3d4-84ed-40b5-bedc-0884fcb4ae64.png#averageHue=%23f9f9f8&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=169&amp;id=u1dad7a09&amp;originHeight=188&amp;originWidth=752&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=15464&amp;status=done&amp;style=none&amp;taskId=u1668b30b-b977-4fc3-89ba-6c2e029e374&amp;title=&amp;width=674.0616102445883" alt="image.png"><br>
将其复制到你的工作空间，然后用Idea打开，项目结构如图：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687156248415-3fe7ae5b-302b-4a35-a520-b2419e616862.png#averageHue=%23f9fbf8&amp;clientId=ud5bd9b1f-141b-4&amp;from=paste&amp;height=253&amp;id=u53ed8a5e&amp;originHeight=314&amp;originWidth=664&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=30988&amp;status=done&amp;style=none&amp;taskId=u5ab16e5b-840d-4511-b27b-07f42a60f4c&amp;title=&amp;width=535.6638483748284" alt="image.png"><br>
包括三部分：</p>
<ul>
<li>mq-demo：父工程，管理项目依赖</li>
<li>publisher：消息的发送者</li>
<li>consumer：消息的消费者</li>
</ul>
<p>在mq-demo这个父工程中，已经配置好了SpringAMQP相关的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>publisher<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因此，子工程中就可以直接使用SpringAMQP了。</p>
<h2><span id="32快速入门"> 3.2.快速入门</span></h2>
<p>在之前的案例中，我们都是经过交换机发送消息到队列，不过有时候为了测试方便，我们也可以直接向队列发送消息，跳过交换机。<br>
在入门案例中，我们就演示这样的简单模型，如图：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27967491/1687261777988-23fff732-dcfa-499a-a8a1-a66328fe05e7.jpeg" alt><br>
也就是：</p>
<ul>
<li>publisher直接发送消息到队列</li>
<li>消费者监听并处理队列中的消息</li>
</ul>
<p>:::warning<br>
<strong>注意</strong>：这种模式一般测试使用，很少在生产中使用。<br>
:::</p>
<p>为了方便测试，我们现在控制台新建一个队列：simple.queue<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553342.png" alt="image.png"><br>
添加成功：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687172012283-e19d8da6-8944-4f51-a40b-a15f0814b015.png#averageHue=%23f7f6f6&amp;clientId=u0fe93ba5-a0ba-4&amp;from=paste&amp;height=405&amp;id=u61761e6f&amp;originHeight=502&amp;originWidth=1187&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=40787&amp;status=done&amp;style=none&amp;taskId=uaf3c44d8-727d-4f46-8ae6-46245932d99&amp;title=&amp;width=957.5798012363273" alt="image.png"><br>
接下来，我们就可以利用Java代码收发消息了。</p>
<h3><span id="311消息发送"> 3.1.1.消息发送</span></h3>
<p>首先配置MQ地址，在<code>publisher</code>服务的<code>application.yml</code>中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>
<p>然后在<code>publisher</code>服务中编写测试类<code>SpringAmqpTest</code>，并利用<code>RabbitTemplate</code>实现消息发送：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.publisher.amqp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开控制台，可以看到消息已经发送到队列中：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553373.png" alt="image.png"><br>
接下来，我们再来实现消息接收。</p>
<h3><span id="312消息接收"> 3.1.2.消息接收</span></h3>
<p>首先配置MQ地址，在<code>consumer</code>服务的<code>application.yml</code>中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>
<p>然后在<code>consumer</code>服务的<code>com.itheima.consumer.listener</code>包中新建一个类<code>SpringRabbitListener</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">	<span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span></span><br><span class="line">    <span class="comment">// 可以看到方法体中接收的就是消息体的内容</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="313测试"> 3.1.3.测试</span></h3>
<p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息。最终consumer收到消息：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553681.png" alt="image.png"></p>
<h2><span id="33workqueues模型"> 3.3.WorkQueues模型</span></h2>
<p>Work queues，任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。<br>
<img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27967491/1687261956699-4b3c9999-ee86-4dda-a795-1ea5f4f9eef3.jpeg" alt></p>
<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。<br>
此时就可以使用work 模型，<strong>多个消费者共同处理消息处理，消息处理的速度就能大大提高</strong>了。</p>
<p>接下来，我们就来模拟这样的场景。<br>
首先，我们在控制台创建一个新的队列，命名为<code>work.queue</code>：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553006.png" alt="image.png"></p>
<h3><span id="331消息发送"> 3.3.1.消息发送</span></h3>
<p>这次我们循环发送，模拟大量消息堆积现象。<br>
在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息，每20毫秒发送一次，相当于每秒发送50条消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="332消息接收"> 3.3.2.消息接收</span></h3>
<p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到这两消费者，都设置了<code>Thead.sleep</code>，模拟任务耗时：</p>
<ul>
<li>消费者1 sleep了20毫秒，相当于每秒钟处理50个消息</li>
<li>消费者2 sleep了200毫秒，相当于每秒处理5个消息</li>
</ul>
<h3><span id="333测试"> 3.3.3.测试</span></h3>
<p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。<br>
最终结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_0】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.869555300</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_1】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.884518</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.907454400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.953332100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.997867300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_8】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.042178700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_3】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.086478800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.087476600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.132578300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.175851200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_16】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.218533400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.261322900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_5】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.287003700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_20】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.304412400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.349950100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_24】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.394533900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.439876500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.482937800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_7】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.488977100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.526409300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_32】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.572148</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.618264800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.660780600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_9】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.689189300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.705261</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_40】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.746927300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.789835</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.834393100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.875312100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_11】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.889969500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_48】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.920702500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_13】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.090725900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_15】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.293060600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_17】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.493748</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_19】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.696635100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_21】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.896809700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_23】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.099533400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_25】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.301446400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_27】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.504999100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_29】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.705702500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_31】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.906601200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_33】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.108118500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_35】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.308945400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_37】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.511547700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_39】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.714038400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_41】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.916192700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_43】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.116286400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_45】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.318055100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_47】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.520656400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_49】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.723106700</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p>
<ul>
<li>消费者1很快完成了自己的25条消息</li>
<li>消费者2却在缓慢的处理自己的25条消息。</li>
</ul>
<p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。没有充分利用每一个消费者的能力，最终消息处理的耗时远远超过了1秒。这样显然是有问题的。</p>
<h3><span id="334能者多劳"> 3.3.4.能者多劳</span></h3>
<p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure>
<p>再次测试，发现结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_0】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.659664200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_1】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.680610</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.703625</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_3】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.724330100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.746651100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_5】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.768401400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.790511400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_7】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.812559800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_8】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.834500600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_9】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.857438800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.880379600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_11】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.899327100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.922828400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_13】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.945617400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.968942500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_15】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.992215400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_16】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.013325600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_17】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.035687100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.058188</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_19】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.081208400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_20】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.103406200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_21】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.123827300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.146165100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_23】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.168828300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_24】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.191769500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_25】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.214839100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.238998700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_27】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.259772600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.284131800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_29】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.306190600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.325315800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_31】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.347012500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_32】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.368508600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_33】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.391785100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.416383800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_35】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.439019</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.461733900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_37】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.485990</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.509219900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_39】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.523683400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_40】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.547412100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_41】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.571191800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.593024600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_43】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.616731800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.640317</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_45】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.663111100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.686727</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_47】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.709266500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_48】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.725884900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_49】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.746299900</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。<br>
正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题。</p>
<h3><span id="335总结"> 3.3.5.总结</span></h3>
<p>Work模型的使用：</p>
<ul>
<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li>
<li>通过设置prefetch来控制消费者预取的消息数量</li>
</ul>
<h2><span id="34交换机类型"> 3.4.交换机类型</span></h2>
<p>在之前的两个测试案例中，都没有交换机，生产者直接发送消息到队列。而一旦引入交换机，消息发送的模式会有很大变化：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553152.jpeg" alt><br>
可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p>
<ul>
<li><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</li>
<li><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</li>
<li><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</li>
<li><strong>Consumer</strong>：消费者，与以前一样，订阅队列，没有变化</li>
</ul>
<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<p>交换机的类型有四种：</p>
<ul>
<li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</li>
<li><strong>Direct</strong>：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</li>
<li><strong>Topic</strong>：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</li>
<li><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，用的较少。</li>
</ul>
<p>课堂中，我们讲解前面的三种交换机模式。</p>
<h2><span id="35fanout交换机"> 3.5.Fanout交换机</span></h2>
<p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。<br>
在广播模式下，消息发送流程是这样的：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553232.png" alt="image.png"></p>
<ul>
<li>1）  可以有多个队列</li>
<li>2）  每个队列都要绑定到Exchange（交换机）</li>
<li>3）  生产者发送的消息，只能发送到交换机</li>
<li>4）  交换机把消息发送给绑定过的所有队列</li>
<li>5）  订阅队列的消费者都能拿到消息</li>
</ul>
<p>我们的计划是这样的：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687182474076-2b479229-56a6-4163-93c4-a6a7187f3dbe.png#averageHue=%23f9f4f4&amp;clientId=u0fe93ba5-a0ba-4&amp;from=paste&amp;height=248&amp;id=ue59e0d8c&amp;originHeight=308&amp;originWidth=1314&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=48827&amp;status=done&amp;style=none&amp;taskId=u7d52896e-f59b-494d-bb25-b376c96414e&amp;title=&amp;width=1060.0335794646453" alt="image.png"></p>
<ul>
<li>创建一个名为<code> hmall.fanout</code>的交换机，类型是<code>Fanout</code></li>
<li>创建两个队列<code>fanout.queue1</code>和<code>fanout.queue2</code>，绑定到交换机<code>hmall.fanout</code></li>
</ul>
<h3><span id="351声明队列和交换机"> 3.5.1.声明队列和交换机</span></h3>
<p>在控制台创建队列<code>fanout.queue1</code>:<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553908.png" alt="image.png"><br>
在创建一个队列<code>fanout.queue2</code>：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689946949922-c4e442c3-568b-4164-a327-74e30aa9b9d0.png#averageHue=%23f8f6f5&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=380&amp;id=u452ddf31&amp;originHeight=424&amp;originWidth=916&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=29357&amp;status=done&amp;style=none&amp;taskId=u657c70e9-017c-4339-98e0-2d408950262&amp;title=&amp;width=821.0644082234613" alt="image.png"><br>
然后再创建一个交换机：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553196.png" alt="image.png"><br>
然后绑定两个队列到交换机：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689947064113-23e123ec-a601-4af4-a44f-70f7b4ef4063.png#averageHue=%23f8f7f7&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=527&amp;id=u2d63999d&amp;originHeight=588&amp;originWidth=978&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=34267&amp;status=done&amp;style=none&amp;taskId=uc512438d-9693-44f1-9c35-33917ddbced&amp;title=&amp;width=876.6386367276695" alt="image.png"><br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553265.png" alt="image.png"></p>
<h3><span id="352消息发送"> 3.5.2.消息发送</span></h3>
<p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="353消息接收"> 3.5.3.消息接收</span></h3>
<p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="354总结"> 3.5.4.总结</span></h3>
<p>交换机的作用是什么？</p>
<ul>
<li>接收publisher发送的消息</li>
<li>将消息按照规则路由到与之绑定的队列</li>
<li>不能缓存消息，路由失败，消息丢失</li>
<li>FanoutExchange的会将消息路由到每个绑定的队列</li>
</ul>
<h2><span id="36direct交换机"> 3.6.Direct交换机</span></h2>
<p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687182404437-027a5191-b037-4033-baab-6bafd998161d.png#averageHue=%23fbf5f5&amp;clientId=u0fe93ba5-a0ba-4&amp;from=paste&amp;height=430&amp;id=uf5b6a678&amp;originHeight=533&amp;originWidth=1686&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=93278&amp;status=done&amp;style=none&amp;taskId=ud6ffb209-4207-40a6-a7ab-4977cab3b5d&amp;title=&amp;width=1360.1344101806637" alt="image.png"><br>
在Direct模型下：</p>
<ul>
<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li>
<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>
<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li>
</ul>
<p><strong>案例需求如图</strong>：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553466.png" alt="image.png"></p>
<ol>
<li>声明一个名为<code>hmall.direct</code>的交换机</li>
<li>声明队列<code>direct.queue1</code>，绑定<code>hmall.direct</code>，<code>bindingKey</code>为<code>blud</code>和<code>red</code></li>
<li>声明队列<code>direct.queue2</code>，绑定<code>hmall.direct</code>，<code>bindingKey</code>为<code>yellow</code>和<code>red</code></li>
<li>在<code>consumer</code>服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</li>
<li>在publisher中编写测试方法，向<code>hmall.direct</code>发送消息</li>
</ol>
<h3><span id="361声明队列和交换机"> 3.6.1.声明队列和交换机</span></h3>
<p>首先在控制台声明两个队列<code>direct.queue1</code>和<code>direct.queue2</code>，这里不再展示过程：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689947864231-5ace5d74-fdac-4a2a-9f92-180df06fe4ad.png#averageHue=%23f2f0ef&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=403&amp;id=u292b8851&amp;originHeight=450&amp;originWidth=1157&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=56948&amp;status=done&amp;style=none&amp;taskId=uf110e543-1005-4b1a-b23e-d8529df3c0c&amp;title=&amp;width=1037.0868125704637" alt="image.png"><br>
然后声明一个direct类型的交换机，命名为<code>hmall.direct</code>:<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553157.png" alt="image.png"><br>
然后使用<code>red</code>和<code>blue</code>作为key，绑定<code>direct.queue1</code>到<code>hmall.direct</code>：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553890.png" alt="image.png"><br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689948181033-6b1e6556-0110-4ed8-a2cb-8bc2dd388903.png#averageHue=%23f8f6f6&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=522&amp;id=u4e6a2147&amp;originHeight=582&amp;originWidth=874&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=34608&amp;status=done&amp;style=none&amp;taskId=u274e41ea-73f2-4da5-bc23-fed091d234d&amp;title=&amp;width=783.4173502044816" alt="image.png"></p>
<p>同理，使用<code>red</code>和<code>yellow</code>作为key，绑定<code>direct.queue2</code>到<code>hmall.direct</code>，步骤略，最终结果：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553139.png" alt="image.png"></p>
<h3><span id="362消息接收"> 3.6.2.消息接收</span></h3>
<p>在consumer服务的SpringRabbitListener中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="363消息发送"> 3.6.3.消息发送</span></h3>
<p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于使用的red这个key，所以两个消费者都收到了消息：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553250.png" alt="image.png"><br>
我们再切换为blue这个key：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;最新报道，哥斯拉是居民自治巨型气球，虚惊一场！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你会发现，只有消费者1收到了消息：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687182898732-afba28a8-c57e-4ccb-a330-9e3315879b31.png#averageHue=%23f7f9f4&amp;clientId=u0fe93ba5-a0ba-4&amp;from=paste&amp;height=175&amp;id=udcac360f&amp;originHeight=217&amp;originWidth=1237&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=99781&amp;status=done&amp;style=none&amp;taskId=ua85a2eca-9806-4a15-997d-ee3c73528b6&amp;title=&amp;width=997.9159343970824" alt="image.png"></p>
<h3><span id="364总结"> 3.6.4.总结</span></h3>
<p>描述下Direct交换机与Fanout交换机的差异？</p>
<ul>
<li>Fanout交换机将消息路由给每一个与之绑定的队列</li>
<li>Direct交换机根据RoutingKey判断路由给哪个队列</li>
<li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li>
</ul>
<h2><span id="37topic交换机"> 3.7.Topic交换机</span></h2>
<h3><span id="371说明"> 3.7.1.说明</span></h3>
<p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。<br>
只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>BindingKey</code> 的时候使用通配符！</p>
<p><code>BindingKey</code> 一般都是有一个或多个单词组成，多个单词之间以<code>.</code>分割，例如： <code>item.insert</code></p>
<p>通配符规则：</p>
<ul>
<li><code>#</code>：匹配一个或多个词</li>
<li><code>*</code>：匹配不多不少恰好1个词</li>
</ul>
<p>举例：</p>
<ul>
<li><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></li>
<li><code>item.*</code>：只能匹配<code>item.spu</code></li>
</ul>
<p>图示：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553748.png" alt="image.png"><br>
假如此时publisher发送的消息使用的<code>RoutingKey</code>共有四种：</p>
<ul>
<li><code>china.news </code>代表有中国的新闻消息；</li>
<li><code>china.weather</code> 代表中国的天气消息；</li>
<li><code>japan.news</code> 则代表日本新闻</li>
<li><code>japan.weather</code> 代表日本的天气消息；</li>
</ul>
<p>解释：</p>
<ul>
<li><code>topic.queue1</code>：绑定的是<code>china.#</code> ，凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到，包括：
<ul>
<li><code>china.news</code></li>
<li><code>china.weather</code></li>
</ul>
</li>
<li><code>topic.queue2</code>：绑定的是<code>#.news</code> ，凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括:
<ul>
<li><code>china.news</code></li>
<li><code>japan.news</code></li>
</ul>
</li>
</ul>
<p>接下来，我们就按照上图所示，来演示一下Topic交换机的用法。<br>
首先，在控制台按照图示例子创建队列、交换机，并利用通配符绑定队列和交换机。此处步骤略。最终结果如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553596.png" alt="image.png"></p>
<h3><span id="372消息发送"> 3.7.2.消息发送</span></h3>
<p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topicExchange</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="373消息接收"> 3.7.3.消息接收</span></h3>
<p>在consumer服务的SpringRabbitListener中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="374总结"> 3.7.4.总结</span></h3>
<p>描述下Direct交换机与Topic交换机的差异？</p>
<ul>
<li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li>
<li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li>
<li><code>#</code>：代表0个或多个词</li>
<li><code>*</code>：代表1个词</li>
</ul>
<h2><span id="38声明队列和交换机"> 3.8.声明队列和交换机</span></h2>
<p>在之前我们都是基于RabbitMQ控制台来创建队列、交换机。但是在实际开发时，队列和交换机是程序员定义的，将来项目上线，又要交给运维去创建。那么程序员就需要把程序中运行的所有队列和交换机都写下来，交给运维。在这个过程中是很容易出现错误的。<br>
因此推荐的做法是由程序启动时检查队列和交换机是否存在，如果不存在自动创建。</p>
<h3><span id="381基本api"> 3.8.1.基本API</span></h3>
<p>SpringAMQP提供了一个Queue类，用来创建队列：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553628.png" alt="image.png"></p>
<p>SpringAMQP还提供了一个Exchange接口，来表示所有不同类型的交换机：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171617362.png" alt="image.png"><br>
<img src="C:/Users/wubo/Downloads/assets/image-20210717165552676.png" alt>我们可以自己创建队列和交换机，不过SpringAMQP还提供了ExchangeBuilder来简化这个过程：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553055.png" alt="image.png"><br>
而在绑定队列和交换机时，则需要使用BindingBuilder来创建Binding对象：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1689945503733-13d2179c-f586-4de5-b18c-d3b5749f1f96.png#averageHue=%23dcab6a&amp;clientId=uf6195e90-5366-4&amp;from=paste&amp;height=145&amp;id=u91096ccd&amp;originHeight=162&amp;originWidth=659&amp;originalType=binary&amp;ratio=1.115625023841858&amp;rotation=0&amp;showTitle=false&amp;size=16128&amp;status=done&amp;style=none&amp;taskId=u1da153f0-6e86-45b2-900b-8f83e489358&amp;title=&amp;width=590.7002674882763" alt="image.png"></p>
<h3><span id="382fanout示例"> 3.8.2.fanout示例</span></h3>
<p>在consumer中创建一个类，声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;hmall.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="382direct示例"> 3.8.2.direct示例</span></h3>
<p>direct模式由于要绑定多个KEY，会非常麻烦，每一个Key都要编写一个binding：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Direct类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;hmall.direct&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithRed</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithBlue</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithRed</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithYellow</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="384基于注解声明"> 3.8.4.基于注解声明</span></h3>
<p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p>
<p>例如，我们同样声明Direct模式的交换机和队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是简单多了。<br>
再试试Topic模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="39消息转换器"> 3.9.消息转换器</span></h2>
<p>Spring的消息发送代码接收的消息体是一个Object：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553713.png" alt="image.png"><br>
而在数据传输时，它会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。<br>
只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p>
<ul>
<li>数据体积过大</li>
<li>有安全漏洞</li>
<li>可读性差</li>
</ul>
<p>我们来测试一下。</p>
<h3><span id="391测试默认转换器"> 3.9.1.测试默认转换器</span></h3>
<p>1）创建测试队列<br>
首先，我们在consumer服务中声明一个新的配置类：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553354.png" alt="image.png"><br>
利用@Bean的方式创建一个队列，<img src="C:/Users/wubo/Downloads/assets/image-20211104102144275.png" alt>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">objectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，这里我们先不要给这个队列添加消费者，我们要查看消息体的格式。</p>
<p>重启consumer服务以后，该队列就会被自动创建出来了：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171623107.png" alt="image.png"><br>
<img src="C:/Users/wubo/Downloads/assets/image-20211104102409347.png" alt></p>
<p>2）发送消息<br>
我们在publisher模块的SpringAmqpTest中新增一个消息发送的代码，发送一个Map对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送消息后查看控制台：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687184206574-69117533-5b4e-4172-b254-23130023f711.png#averageHue=%23f9f7f7&amp;clientId=u0fe93ba5-a0ba-4&amp;from=paste&amp;height=528&amp;id=u038b25c3&amp;originHeight=654&amp;originWidth=1244&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=46749&amp;status=done&amp;style=none&amp;taskId=u8bea522c-fa98-48f1-bd84-1acfb50fff8&amp;title=&amp;width=1003.5629930395882" alt="image.png"><br>
可以看到消息格式非常不友好。</p>
<h3><span id="392配置json转换器"> 3.9.2.配置JSON转换器</span></h3>
<p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p>
<p>在<code>publisher</code>和<code>consumer</code>两个服务中都引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，如果项目中引入了<code>spring-boot-starter-web</code>依赖，则无需再次引入<code>Jackson</code>依赖。</p>
<p>配置消息转换器，在<code>publisher</code>和<code>consumer</code>两个服务的启动类中添加一个Bean即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消息转换器中添加的messageId可以便于我们将来做幂等性判断。</p>
<p>此时，我们到MQ控制台<strong>删除</strong><code>object.queue</code>中的旧的消息。然后再次执行刚才的消息发送的代码，到MQ的控制台查看消息结构：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553682.png" alt="image.png"><br>
<img src="C:/Users/wubo/Downloads/assets/image-20211104102831385.png" alt></p>
<h3><span id="393消费者接收object"> 3.9.3.消费者接收Object</span></h3>
<p>我们在consumer服务中定义一个新的消费者，publisher是用Map发送，那么消费者也一定要用Map接收，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(Map&lt;String, Object&gt; msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到object.queue消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/wubo/Downloads/assets/image-20211104103017170.png" alt></p>
<h1><span id="4业务改造"> 4.业务改造</span></h1>
<p>案例需求：改造余额支付功能，将支付成功后基于OpenFeign的交易服务的更新订单状态接口的同步调用，改为基于RabbitMQ的异步通知。<br>
如图：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553973.png" alt="image.png"><br>
说明，我们只关注交易服务，步骤如下：</p>
<ul>
<li>定义topic类型交换机，命名为<code>pay.topic</code></li>
<li>定义消息队列，命名为<code>mark.order.pay.queue</code></li>
<li>将<code>mark.order.pay.queue</code>与<code>pay.topic</code>绑定，<code>BindingKey</code>为<code>pay.success</code></li>
<li>支付成功时不再调用交易服务更新订单状态的接口，而是发送一条消息到<code>pay.topic</code>，发送消息的<code>RoutingKey</code>  为<code>pay.success</code>，消息内容是订单id</li>
<li>交易服务监听<code>mark.order.pay.queue</code>队列，接收到消息后更新订单状态为已支付</li>
</ul>
<h2><span id="41配置mq"> 4.1.配置MQ</span></h2>
<p>不管是生产者还是消费者，都需要配置MQ的基本信息。分为两步：<br>
1）添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--消息发送--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）配置MQ地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>
<h2><span id="41接收消息"> 4.1.接收消息</span></h2>
<p>在trade-service服务中定义一个消息监听类：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553761.png" alt="image.png"><br>
其代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStatusListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;mark.order.pay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;pay.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;pay.success&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenPaySuccess</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        orderService.markOrderPaySuccess(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="42发送消息"> 4.2.发送消息</span></h2>
<p>修改<code>pay-service</code>服务下的<code>com.hmall.pay.service.impl.PayOrderServiceImpl</code>类中的<code>tryPayOrderByBalance</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPayOrderByBalance</span><span class="params">(PayOrderDTO payOrderDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询支付单</span></span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">po</span> <span class="operator">=</span> getById(payOrderDTO.getId());</span><br><span class="line">    <span class="comment">// 2.判断状态</span></span><br><span class="line">    <span class="keyword">if</span>(!PayStatus.WAIT_BUYER_PAY.equalsValue(po.getStatus()))&#123;</span><br><span class="line">        <span class="comment">// 订单不是未支付，状态异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试扣减余额</span></span><br><span class="line">    userClient.deductMoney(payOrderDTO.getPw(), po.getAmount());</span><br><span class="line">    <span class="comment">// 4.修改支付单状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> markPayOrderSuccess(payOrderDTO.getId(), LocalDateTime.now());</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.修改订单状态</span></span><br><span class="line">    <span class="comment">// tradeClient.markOrderPaySuccess(po.getBizOrderNo());</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;pay.topic&quot;</span>, <span class="string">&quot;pay.success&quot;</span>, po.getBizOrderNo());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;支付成功的消息发送失败，支付单id：&#123;&#125;， 交易单id：&#123;&#125;&quot;</span>, po.getId(), po.getBizOrderNo(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="5练习"> 5.练习</span></h1>
<h2><span id="51抽取共享的mq配置"> 5.1.抽取共享的MQ配置</span></h2>
<p>将MQ配置抽取到Nacos中管理，微服务中直接使用共享配置。</p>
<h2><span id="52改造下单功能"> 5.2.改造下单功能</span></h2>
<p>改造下单功能，将基于OpenFeign的清理购物车同步调用，改为基于RabbitMQ的异步通知：</p>
<ul>
<li>定义topic类型交换机，命名为<code>trade.topic</code></li>
<li>定义消息队列，命名为<code>cart.clear.queue</code></li>
<li>将<code>cart.clear.queue</code>与<code>trade.topic</code>绑定，<code>BindingKey</code>为<code>order.create</code></li>
<li>下单成功时不再调用清理购物车接口，而是发送一条消息到<code>trade.topic</code>，发送消息的<code>RoutingKey</code>  为<code>order.create</code>，消息内容是下单的具体商品、当前登录用户信息</li>
<li>购物车服务监听<code>cart.clear.queue</code>队列，接收到消息后清理指定用户的购物车中的指定商品</li>
</ul>
<h2><span id="53登录信息传递优化"> 5.3.登录信息传递优化</span></h2>
<p>某些业务中，需要根据登录用户信息处理业务，而基于MQ的异步调用并不会传递登录用户信息。前面我们的做法比较麻烦，至少要做两件事：</p>
<ul>
<li>消息发送者在消息体中传递登录用户</li>
<li>消费者获取消息体中的登录用户，处理业务</li>
</ul>
<p>这样做不仅麻烦，而且编程体验也不统一，毕竟我们之前都是使用UserContext来获取用户。</p>
<p>大家思考一下：有没有更优雅的办法传输登录用户信息，让使用MQ的人无感知，依然采用UserContext来随时获取用户。</p>
<p>参考资料：<br>
<a href="https://docs.spring.io/spring-amqp/docs/2.4.14/reference/html/#post-processing">Spring AMQP</a></p>
<h2><span id="54改造项目一"> 5.4.改造项目一</span></h2>
<p>思考一下，项目一中的哪些业务可以由同步方式改为异步方式调用？试着改造一下。<br>
举例：短信发送</p>
<p><a href="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553890.png">https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553890.png</a></p>
<p>在昨天的练习作业中，我们改造了余额支付功能，在支付成功后利用RabbitMQ通知交易服务，更新业务订单状态为已支付。<br>
但是大家思考一下，如果这里MQ通知失败，支付服务中支付流水显示支付成功，而交易服务中的订单状态却显示未支付，数据出现了不一致。<br>
此时前端发送请求查询支付状态时，肯定是查询交易服务状态，会发现业务订单未支付，而用户自己知道已经支付成功，这就导致用户体验不一致。</p>
<p>因此，这里我们必须尽可能确保MQ消息的可靠性，即：消息应该至少被消费者处理1次<br>
那么问题来了：</p>
<ul>
<li><strong>我们该如何确保MQ消息的可靠性</strong>？</li>
<li><strong>如果真的发送失败，有没有其它的兜底方案？</strong></li>
</ul>
<p>这些问题，在今天的学习中都会找到答案。</p>
<h1><span id="1发送者的可靠性"> 1.发送者的可靠性</span></h1>
<p>首先，我们一起分析一下消息丢失的可能性有哪些。<br>
消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27967491/1687334552247-cab38ab5-ae63-4f06-9ece-e9f244e3c170.jpeg" alt><br>
消息从生产者到消费者的每一步都可能导致消息丢失：</p>
<ul>
<li>发送消息时丢失：
<ul>
<li>生产者发送消息时连接MQ失败</li>
<li>生产者发送消息到达MQ后未找到<code>Exchange</code></li>
<li>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code></li>
<li>消息到达MQ后，处理消息的进程发生异常</li>
</ul>
</li>
<li>MQ导致消息丢失：
<ul>
<li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li>
</ul>
</li>
<li>消费者处理消息时：
<ul>
<li>消息接收后尚未处理突然宕机</li>
<li>消息接收后处理过程中抛出异常</li>
</ul>
</li>
</ul>
<p>综上，我们要解决消息丢失问题，保证MQ的可靠性，就必须从3个方面入手：</p>
<ul>
<li>确保生产者一定把消息发送到MQ</li>
<li>确保MQ不会将消息弄丢</li>
<li>确保消费者一定要处理消息</li>
</ul>
<p>这一章我们先来看如何确保生产者一定能把消息发送到MQ。</p>
<h2><span id="11生产者重试机制"> 1.1.生产者重试机制</span></h2>
<p>首先第一种情况，就是生产者发送消息时，出现了网络故障，导致与MQ的连接中断。</p>
<p>为了解决这个问题，SpringAMQP提供的消息发送时的重试机制。即：当<code>RabbitTemplate</code>与MQ连接超时后，多次重试。</p>
<p>修改<code>publisher</code>模块的<code>application.yaml</code>文件，添加下面的内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="string">1s</span> <span class="comment"># 设置MQ的连接超时时间</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启超时重试机制</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 失败后的初始等待时间</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br></pre></td></tr></table></figure>
<p>我们利用命令停掉RabbitMQ服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop mq</span><br></pre></td></tr></table></figure>
<p>然后测试发送一条消息，会发现会每隔1秒重试1次，总共重试了3次。消息发送的超时重试机制配置成功了！</p>
<p>:::warning<br>
<strong>注意</strong>：当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是<strong>阻塞式</strong>的重试，也就是说多次重试等待的过程中，当前线程是被阻塞的。<br>
如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。<br>
:::</p>
<h2><span id="12生产者确认机制"> 1.2.生产者确认机制</span></h2>
<p>一般情况下，只要生产者与MQ之间的网路连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。<br>
不过，在少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：</p>
<ul>
<li>MQ内部处理消息的进程发生了异常</li>
<li>生产者发送消息到达MQ后未找到<code>Exchange</code></li>
<li>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code>，因此无法路由</li>
</ul>
<p>针对上述情况，RabbitMQ提供了生产者消息确认机制，包括<code>Publisher Confirm</code>和<code>Publisher Return</code>两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的<strong>回执</strong>。<br>
具体如图所示：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1690366611659-d5c7f355-7ab1-4eb8-8488-13e1d98843ce.png#averageHue=%23faf7f7&amp;clientId=ucb403171-cc9e-4&amp;from=paste&amp;height=376&amp;id=ue3c6e070&amp;originHeight=466&amp;originWidth=1434&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=81765&amp;status=done&amp;style=none&amp;taskId=ue6af669a-1775-4a0f-ad77-cd9bc059880&amp;title=&amp;width=1156.8402990504578" alt="image.png"><br>
总结如下：</p>
<ul>
<li>当消息投递到MQ，但是路由失败时，通过<strong>Publisher Return</strong>返回异常信息，同时返回ack的确认信息，代表投递成功</li>
<li>临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</li>
<li>持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</li>
<li>其它情况都会返回NACK，告知投递失败</li>
</ul>
<p>其中<code>ack</code>和<code>nack</code>属于<strong>Publisher Confirm</strong>机制，<code>ack</code>是投递成功；<code>nack</code>是投递失败。而<code>return</code>则属于<strong>Publisher Return</strong>机制。<br>
默认两种机制都是关闭状态，需要通过配置文件来开启。</p>
<h2><span id="13实现生产者确认"> 1.3.实现生产者确认</span></h2>
<h3><span id="131开启生产者确认"> 1.3.1.开启生产者确认</span></h3>
<p>在publisher模块的<code>application.yaml</code>中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment"># 开启publisher confirm机制，并设置confirm类型</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 开启publisher return机制</span></span><br></pre></td></tr></table></figure>
<p>这里<code>publisher-confirm-type</code>有三种模式可选：</p>
<ul>
<li><code>none</code>：关闭confirm机制</li>
<li><code>simple</code>：同步阻塞等待MQ的回执</li>
<li><code>correlated</code>：MQ异步回调返回回执</li>
</ul>
<p>一般我们推荐使用<code>correlated</code>，回调机制。</p>
<h3><span id="132定义returncallback"> 1.3.2.定义ReturnCallback</span></h3>
<p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此我们可以在配置类中统一设置。我们在publisher模块定义一个配置类：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553773.png" alt="image.png"><br>
内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.publisher.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;触发return callback,&quot;</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;exchange: &#123;&#125;&quot;</span>, returned.getExchange());</span><br><span class="line">                log.debug(<span class="string">&quot;routingKey: &#123;&#125;&quot;</span>, returned.getRoutingKey());</span><br><span class="line">                log.debug(<span class="string">&quot;message: &#123;&#125;&quot;</span>, returned.getMessage());</span><br><span class="line">                log.debug(<span class="string">&quot;replyCode: &#123;&#125;&quot;</span>, returned.getReplyCode());</span><br><span class="line">                log.debug(<span class="string">&quot;replyText: &#123;&#125;&quot;</span>, returned.getReplyText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="133定义confirmcallback"> 1.3.3.定义ConfirmCallback</span></h3>
<p>由于每个消息发送时的处理逻辑不一定相同，因此ConfirmCallback需要在每次发消息时定义。具体来说，是在调用RabbitTemplate中的convertAndSend方法时，多传递一个参数：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687348187394-21a3698a-277a-478b-8cb8-2ee5bc79207f.png#averageHue=%23f1efed&amp;clientId=ue4302575-73b6-4&amp;from=paste&amp;height=167&amp;id=ubbb0d508&amp;originHeight=207&amp;originWidth=939&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=26725&amp;status=done&amp;style=none&amp;taskId=u0ffba104-eb55-4f79-be54-f249333680d&amp;title=&amp;width=757.5125807589818" alt="image.png"><br>
这里的CorrelationData中包含两个核心的东西：</p>
<ul>
<li><code>id</code>：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</li>
<li><code>SettableListenableFuture</code>：回执结果的Future对象</li>
</ul>
<p>将来MQ的回执就会通过这个<code>Future</code>来返回，我们可以提前给<code>CorrelationData</code>中的<code>Future</code>添加回调函数来处理消息回执：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553755.png" alt="image.png"></p>
<p>我们新建一个测试，向系统自带的交换机发送消息，并且添加<code>ConfirmCallback</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherConfirm</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建CorrelationData</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>();</span><br><span class="line">    <span class="comment">// 2.给Future添加ConfirmCallback</span></span><br><span class="line">    cd.getFuture().addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.1.Future发生异常时的处理逻辑，基本不会触发</span></span><br><span class="line">            log.error(<span class="string">&quot;send message fail&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(CorrelationData.Confirm result)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.2.Future接收到回执的处理逻辑，参数中的result就是回执内容</span></span><br><span class="line">            <span class="keyword">if</span>(result.isAck())&#123; <span class="comment">// result.isAck()，boolean类型，true代表ack回执，false 代表 nack回执</span></span><br><span class="line">                log.debug(<span class="string">&quot;发送消息成功，收到 ack!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// result.getReason()，String类型，返回nack时的异常描述</span></span><br><span class="line">                log.error(<span class="string">&quot;发送消息失败，收到 nack, reason : &#123;&#125;&quot;</span>, result.getReason());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 3.发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;hmall.direct&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;hello&quot;</span>, cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687351726363-c27337c1-cd6e-497e-96ad-ac55fe4cb9e4.png#averageHue=%23f9f6df&amp;clientId=ue4302575-73b6-4&amp;from=paste&amp;height=321&amp;id=u37548b33&amp;originHeight=398&amp;originWidth=1657&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=224878&amp;status=done&amp;style=none&amp;taskId=u5b86f40b-a7f8-4c5f-8fae-4edb9ab2cee&amp;title=&amp;width=1336.7394529474257" alt="image.png"><br>
可以看到，由于传递的<code>RoutingKey</code>是错误的，路由失败后，触发了<code>return callback</code>，同时也收到了ack。<br>
当我们修改为正确的<code>RoutingKey</code>以后，就不会触发<code>return callback</code>了，只收到ack。<br>
而如果连交换机都是错误的，则只会收到nack。</p>
<p>:::warning<br>
<strong>注意</strong>：<br>
开启生产者确认比较消耗MQ性能，一般不建议开启。而且大家思考一下触发确认的几种情况：</p>
<ul>
<li>路由失败：一般是因为RoutingKey错误导致，往往是编程导致</li>
<li>交换机名称错误：同样是编程错误导致</li>
<li>MQ内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback处理nack就可以了。<br>
:::</li>
</ul>
<h1><span id="2mq的可靠性"> 2.MQ的可靠性</span></h1>
<p>消息到达MQ以后，如果MQ不能及时保存，也会导致消息丢失，所以MQ的可靠性也非常重要。</p>
<h2><span id="21数据持久化"> 2.1.数据持久化</span></h2>
<p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p>
<ul>
<li>交换机持久化</li>
<li>队列持久化</li>
<li>消息持久化</li>
</ul>
<p>我们以控制台界面为例来说明。</p>
<h3><span id="211交换机持久化"> 2.1.1.交换机持久化</span></h3>
<p>在控制台的<code>Exchanges</code>页面，添加交换机时可以配置交换机的<code>Durability</code>参数：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553051.png" alt="image.png"><br>
设置为<code>Durable</code>就是持久化模式，<code>Transient</code>就是临时模式。</p>
<h3><span id="212队列持久化"> 2.1.2.队列持久化</span></h3>
<p>在控制台的Queues页面，添加队列时，同样可以配置队列的<code>Durability</code>参数：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553271.png" alt="image.png"><br>
除了持久化以外，你可以看到队列还有很多其它参数，有一些我们会在后期学习。</p>
<h3><span id="213消息持久化"> 2.1.3.消息持久化</span></h3>
<p>在控制台发送消息的时候，可以添加很多参数，而消息的持久化是要配置一个<code>properties</code>：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687354083723-84971642-712d-42bc-ba65-6e3b3b33758c.png#averageHue=%23faf8f8&amp;clientId=ue4302575-73b6-4&amp;from=paste&amp;height=423&amp;id=T4xqJ&amp;originHeight=524&amp;originWidth=995&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=17663&amp;status=done&amp;style=none&amp;taskId=u75d6c2e2-1770-43f8-9a9f-9bc5f480099&amp;title=&amp;width=802.6890498990275" alt="image.png"></p>
<p>:::warning<br>
<strong>说明</strong>：在开启持久化机制以后，如果同时还开启了生产者确认，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性。<br>
不过出于性能考虑，为了减少IO次数，发送到MQ的消息并不是逐条持久化到数据库的，而是每隔一段时间批量持久化。一般间隔在100毫秒左右，这就会导致ACK有一定的延迟，因此建议生产者确认全部采用异步方式。<br>
:::</p>
<h2><span id="22lazyqueue"> 2.2.LazyQueue</span></h2>
<p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：</p>
<ul>
<li>消费者宕机或出现网络故障</li>
<li>消息发送量激增，超过了消费者处理速度</li>
<li>消费者处理业务发生阻塞</li>
</ul>
<p>一旦出现消息堆积问题，RabbitMQ的内存占用就会越来越高，直到触发内存预警上限。此时RabbitMQ会将内存消息刷到磁盘上，这个行为成为<code>PageOut</code>. <code>PageOut</code>会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞。</p>
<p>为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：</p>
<ul>
<li>接收到消息后直接存入磁盘而非内存</li>
<li>消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）</li>
<li>支持数百万条的消息存储</li>
</ul>
<p>而在3.12版本之后，LazyQueue已经成为所有队列的默认格式。因此官方推荐升级MQ为3.12版本或者所有队列都设置为LazyQueue模式。</p>
<h3><span id="221控制台配置lazy模式"> 2.2.1.控制台配置Lazy模式</span></h3>
<p>在添加队列的时候，添加<code>x-queue-mod=lazy</code>参数即可设置队列为Lazy模式：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687421366634-1dfca4a6-2407-43c2-8e65-fd7ba9e660dc.png#averageHue=%23f8f6f5&amp;clientId=ud69cf815-2833-4&amp;from=paste&amp;height=361&amp;id=auTfj&amp;originHeight=447&amp;originWidth=1127&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=34943&amp;status=done&amp;style=none&amp;taskId=ue22630f9-97c2-47c9-989b-e1963580eb6&amp;title=&amp;width=909.1764414434211" alt="image.png"></p>
<h3><span id="222代码配置lazy模式"> 2.2.2.代码配置Lazy模式</span></h3>
<p>在利用SpringAMQP声明队列的时候，添加<code>x-queue-mod=lazy</code>参数也可设置队列为Lazy模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">            .durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">            .lazy() <span class="comment">// 开启Lazy模式</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是通过<code>QueueBuilder</code>的<code>lazy()</code>函数配置Lazy模式，底层源码如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553620.png" alt="image.png"></p>
<p>当然，我们也可以基于注解来声明队列并设置为Lazy模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">        name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">        durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">        arguments = @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到 lazy.queue的消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="223更新已有队列为lazy模式"> 2.2.3.更新已有队列为lazy模式</span></h3>
<p>对于已经存在的队列，也可以配置为lazy模式，但是要通过设置policy实现。<br>
可以基于命令行设置policy：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues  </span><br></pre></td></tr></table></figure>
<p>命令解读：</p>
<ul>
<li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li>
<li><code>set_policy</code> ：添加一个策略</li>
<li><code>Lazy</code> ：策略名称，可以自定义</li>
<li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li>
<li><code>'&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;'</code> ：设置队列模式为lazy模式</li>
<li><code>--apply-to queues</code>：策略的作用对象，是所有的队列</li>
</ul>
<p>当然，也可以在控制台配置policy，进入在控制台的<code>Admin</code>页面，点击<code>Policies</code>，即可添加配置：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553757.png" alt="image.png"></p>
<h1><span id="3消费者的可靠性"> 3.消费者的可靠性</span></h1>
<p>当RabbitMQ向消费者投递消息以后，需要知道消费者的处理状态如何。因为消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：</p>
<ul>
<li>消息投递的过程中出现了网络故障</li>
<li>消费者接收到消息后突然宕机</li>
<li>消费者接收到消息后，因处理不当导致异常</li>
<li>…</li>
</ul>
<p>一旦发生上述情况，消息也会丢失。因此，RabbitMQ必须知道消费者的处理状态，一旦消息处理失败才能重新投递消息。<br>
但问题来了：RabbitMQ如何得知消费者的处理状态呢？</p>
<p>本章我们就一起研究一下消费者处理消息时的可靠性解决方案。</p>
<h2><span id="21消费者确认机制"> 2.1.消费者确认机制</span></h2>
<p>为了确认消费者是否成功处理消息，RabbitMQ提供了消费者确认机制（<strong>Consumer Acknowledgement</strong>）。即：当消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。回执有三种可选值：</p>
<ul>
<li>ack：成功处理消息，RabbitMQ从队列中删除该消息</li>
<li>nack：消息处理失败，RabbitMQ需要再次投递消息</li>
<li>reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息</li>
</ul>
<p>一般reject方式用的较少，除非是消息格式有问题，那就是开发问题了。因此大多数情况下我们需要将消息处理的代码通过<code>try catch</code>机制捕获，消息处理成功时返回ack，处理失败时返回nack.</p>
<p>由于消息回执的处理代码比较统一，因此SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：</p>
<ul>
<li><code>none</code>：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</li>
<li><code>manual</code>：手动模式。需要自己在业务代码中调用api，发送<code>ack</code>或<code>reject</code>，存在业务入侵，但更灵活</li>
<li><code>auto</code>：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回<code>ack</code>.  当业务出现异常时，根据异常判断返回不同结果：
<ul>
<li>如果是<strong>业务异常</strong>，会自动返回<code>nack</code>；</li>
<li>如果是<strong>消息处理或校验异常</strong>，自动返回<code>reject</code>;</li>
</ul>
</li>
</ul>
<p>返回Reject的常见异常有：</p>
<blockquote>
<p>Starting with version 1.3.2, the default ErrorHandler is now a ConditionalRejectingErrorHandler that rejects (and does not requeue) messages that fail with an irrecoverable error. Specifically, it rejects messages that fail with the following errors:</p>
<ul>
<li>o.s.amqp…MessageConversionException: Can be thrown when converting the incoming message payload using a MessageConverter.</li>
<li>o.s.messaging…MessageConversionException: Can be thrown by the conversion service if additional conversion is required when mapping to a @RabbitListener method.</li>
<li>o.s.messaging…MethodArgumentNotValidException: Can be thrown if validation (for example, @Valid) is used in the listener and the validation fails.</li>
<li>o.s.messaging…MethodArgumentTypeMismatchException: Can be thrown if the inbound message was converted to a type that is not correct for the target method. For example, the parameter is declared as Message<foo> but Message<bar> is received.</bar></foo></li>
<li>java.lang.NoSuchMethodException: Added in version 1.6.3.</li>
<li>java.lang.ClassCastException: Added in version 1.6.3.</li>
</ul>
</blockquote>
<p>通过下面的配置可以修改SpringAMQP的ACK处理方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment"># 不做处理</span></span><br></pre></td></tr></table></figure>
<p>修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理的异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MessageConversionException</span>(<span class="string">&quot;故意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;消息处理完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试可以发现：当消息处理发生异常时，消息依然被RabbitMQ删除了。</p>
<p>我们再次把确认机制修改为auto：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># 自动ack</span></span><br></pre></td></tr></table></figure>
<p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为<code>unacked</code>（未确定状态）：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553647.png" alt="image.png"><br>
放行以后，由于抛出的是<strong>消息转换异常</strong>，因此Spring会自动返回<code>reject</code>，所以消息依然会被删除：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553798.png" alt="image.png"></p>
<p>我们将异常改为RuntimeException类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;故意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;消息处理完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在异常位置打断点，然后再次发送消息测试，程序卡在断点时，可以发现此时消息状态为<code>unacked</code>（未确定状态）：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687489262801-36725872-cc98-470a-ab6b-85cfd9c1b0ce.png#averageHue=%23f5f3f3&amp;clientId=uaa251f98-ecdc-4&amp;from=paste&amp;height=194&amp;id=WusVn&amp;originHeight=241&amp;originWidth=1100&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=24869&amp;status=done&amp;style=none&amp;taskId=ufc5a8f88-61f6-4518-ad83-77d7037cd6b&amp;title=&amp;width=887.3949295366134" alt="image.png">放行以后，由于抛出的是业务异常，所以Spring返回<code>ack</code>，最终消息恢复至<code>Ready</code>状态，并且没有被RabbitMQ删除：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553257.png" alt="image.png"><br>
当我们把配置改为<code>auto</code>时，消息处理失败后，会回到RabbitMQ，并重新投递到消费者。</p>
<h2><span id="22失败重试机制"> 2.2.失败重试机制</span></h2>
<p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。<br>
极端情况就是消费者一直无法执行成功，那么消息requeue就会无限循环，导致mq的消息处理飙升，带来不必要的压力：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553410.png" alt="image.png"></p>
<p>当然，上述极端情况发生的概率还是非常低的，不过不怕一万就怕万一。为了应对上述情况Spring又提供了消费者失败重试机制：在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p>
<p>修改consumer服务的application.yml文件，添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 初识的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure>
<p>重启consumer服务，重复之前的测试。可以发现：</p>
<ul>
<li>消费者在失败后消息没有重新回到MQ无限重新投递，而是在本地重试了3次</li>
<li>本地重试3次以后，抛出了<code>AmqpRejectAndDontRequeueException</code>异常。查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是<code>reject</code></li>
</ul>
<p>结论：</p>
<ul>
<li>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</li>
<li>重试达到最大次数后，Spring会返回reject，消息会被丢弃</li>
</ul>
<h2><span id="23失败处理策略"> 2.3.失败处理策略</span></h2>
<p>在之前的测试中，本地测试达到最大重试次数后，消息会被丢弃。这在某些对于消息可靠性要求较高的业务场景下，显然不太合适了。<br>
因此Spring允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由<code>MessageRecovery</code>接口来定义的，它有3个不同实现：</p>
<ul>
<li><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式</li>
<li><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，返回<code>nack</code>，消息重新入队</li>
<li><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</li>
</ul>
<p>比较优雅的一种处理方案是<code>RepublishMessageRecoverer</code>，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p>
<p>1）在consumer服务中定义处理失败消息的交换机和队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）定义一个RepublishMessageRecoverer，关联队列和交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.retry.MessageRecoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="24业务幂等性"> 2.4.业务幂等性</span></h2>
<p>何为幂等性？<br>
<strong>幂等</strong>是一个数学概念，用函数表达式来描述是这样的：<code>f(x) = f(f(x))</code>，例如求绝对值函数。<br>
在程序开发中，则是指同一个业务，执行一次或多次对业务状态的影响是一致的。例如：</p>
<ul>
<li>根据id删除数据</li>
<li>查询数据</li>
<li>新增数据</li>
</ul>
<p>但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：</p>
<ul>
<li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li>
<li>退款业务。重复退款对商家而言会有经济损失。</li>
</ul>
<p>所以，我们要尽可能避免业务被重复执行。<br>
然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：</p>
<ul>
<li>页面卡顿时频繁刷新导致表单重复提交</li>
<li>服务间调用的重试</li>
<li>MQ消息的重复投递</li>
</ul>
<p>我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息重复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。<br>
举例：</p>
<ol>
<li>假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为<strong>已支付</strong>状态。</li>
<li>由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后<strong>重新投递</strong>给交易服务。</li>
<li>但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了<strong>已退款</strong>状态。</li>
<li>退款完成后，新投递的消息才被消费，那么订单状态会被再次改为<strong>已支付</strong>。业务异常。</li>
</ol>
<p>因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：</p>
<ul>
<li>唯一消息ID</li>
<li>业务状态判断</li>
</ul>
<h3><span id="241唯一消息id"> 2.4.1.唯一消息ID</span></h3>
<p>这个思路非常简单：</p>
<ol>
<li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li>
<li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li>
<li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</li>
</ol>
<p>我们该如何给消息添加唯一ID呢？<br>
其实很简单，SpringAMQP的MessageConverter自带了MessageID的功能，我们只要开启这个功能即可。<br>
以Jackson的消息转换器为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jjmc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jjmc.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jjmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="242业务判断"> 2.4.2.业务判断</span></h3>
<p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。<br>
例如我们当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理。</p>
<p>相比较而言，消息ID的方案需要改造原有的数据库，所以我更推荐使用业务判断的方案。</p>
<p>以支付修改订单的业务为例，我们需要修改<code>OrderServiceImpl</code>中的<code>markOrderPaySuccess</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">old</span> <span class="operator">=</span> getById(orderId);</span><br><span class="line">    <span class="comment">// 2.判断订单状态</span></span><br><span class="line">    <span class="keyword">if</span> (old == <span class="literal">null</span> || old.getStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 订单不存在或者订单状态不是1，放弃处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试更新订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setId(orderId);</span><br><span class="line">    order.setStatus(<span class="number">2</span>);</span><br><span class="line">    order.setPayTime(LocalDateTime.now());</span><br><span class="line">    updateById(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码逻辑上符合了幂等判断的需求，但是由于判断和更新是两步动作，因此在极小概率下可能存在线程安全问题。</p>
<p>我们可以合并上述操作为这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// UPDATE `order` SET status = ? , pay_time = ? WHERE id = ? AND status = 1</span></span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(Order::getStatus, <span class="number">2</span>)</span><br><span class="line">            .set(Order::getPayTime, LocalDateTime.now())</span><br><span class="line">            .eq(Order::getId, orderId)</span><br><span class="line">            .eq(Order::getStatus, <span class="number">1</span>)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意看，上述代码等同于这样的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">order</span>` <span class="keyword">SET</span> status <span class="operator">=</span> ? , pay_time <span class="operator">=</span> ? <span class="keyword">WHERE</span> id <span class="operator">=</span> ? <span class="keyword">AND</span> status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>我们在where条件中除了判断id以外，还加上了status必须为1的条件。如果条件不符（说明订单已支付），则SQL匹配不到数据，根本不会执行。</p>
<h2><span id="25兜底方案"> 2.5.兜底方案</span></h2>
<p>虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息100%的可靠。万一真的MQ通知失败该怎么办呢？<br>
有没有其它兜底方案，能够确保订单的支付状态一致呢？</p>
<p>其实思想很简单：既然MQ通知不一定发送到交易服务，那么交易服务就必须自己<strong>主动去查询</strong>支付状态。这样即便支付服务的MQ通知失败，我们依然能通过主动查询来保证订单状态的一致。<br>
流程如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553749.jpeg" alt></p>
<p>图中黄色线圈起来的部分就是MQ通知失败后的兜底处理方案，由交易服务自己主动去查询支付状态。</p>
<p>不过需要注意的是，交易服务并不知道用户会在什么时候支付，如果查询的时机不正确（比如查询的时候用户正在支付中），可能查询到的支付状态也不正确。<br>
那么问题来了，我们到底该在什么时间主动查询支付状态呢？</p>
<p>这个时间是无法确定的，因此，通常我们采取的措施就是利用<strong>定时任务</strong>定期查询，例如每隔20秒就查询一次，并判断支付状态。如果发现订单已经支付，则立刻更新订单状态为已支付即可。<br>
定时任务大家之前学习过，具体的实现这里就不再赘述了。</p>
<p>至此，消息可靠性的问题已经解决了。</p>
<p>综上，支付服务与交易服务之间的订单状态一致性是如何保证的？</p>
<ul>
<li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li>
<li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li>
<li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li>
</ul>
<h1><span id="4延迟消息"> 4.延迟消息</span></h1>
<p>在电商的支付业务中，对于一些库存有限的商品，为了更好的用户体验，通常都会在用户下单时立刻扣减商品库存。例如电影院购票、高铁购票，下单后就会锁定座位资源，其他人无法重复购买。</p>
<p>但是这样就存在一个问题，假如用户下单后一直不付款，就会一直占有库存资源，导致其他客户无法正常交易，最终导致商户利益受损！</p>
<p>因此，电商中通常的做法就是：<strong>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存</strong>。</p>
<p>例如，订单支付超时时间为30分钟，则我们应该在用户下单后的第30分钟检查订单支付状态，如果发现未支付，应该立刻取消订单，释放库存。</p>
<p>但问题来了：如何才能准确的实现在下单后第30分钟去检查支付状态呢？</p>
<p>像这种在一段时间以后才执行的任务，我们称之为<strong>延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了。</p>
<p>在RabbitMQ中实现延迟消息也有两种方案：</p>
<ul>
<li>死信交换机+TTL</li>
<li>延迟消息插件</li>
</ul>
<p>这一章我们就一起研究下这两种方案的实现方式，以及优缺点。</p>
<h2><span id="41死信交换机和延迟消息"> 4.1.死信交换机和延迟消息</span></h2>
<p>首先我们来学习一下基于死信交换机的延迟消息方案。</p>
<h3><span id="411死信交换机"> 4.1.1.死信交换机</span></h3>
<p>什么是死信？</p>
<p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p>
<ul>
<li>消费者使用<code>basic.reject</code>或 <code>basic.nack</code>声明消费失败，并且消息的<code>requeue</code>参数设置为false</li>
<li>消息是一个过期消息，超时无人消费</li>
<li>要投递的队列消息满了，无法投递</li>
</ul>
<p>如果一个队列中的消息已经成为死信，并且这个队列通过<code>**dead-letter-exchange**</code>属性指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机就称为<strong>死信交换机</strong>（Dead Letter Exchange）。而此时加入有队列与死信交换机绑定，则最终死信就会被投递到这个队列中。</p>
<p>死信交换机有什么作用呢？</p>
<ol>
<li>收集那些因处理失败而被拒绝的消息</li>
<li>收集那些因队列满了而被拒绝的消息</li>
<li>收集因TTL（有效期）到期的消息</li>
</ol>
<h3><span id="412延迟消息"> 4.1.2.延迟消息</span></h3>
<p>前面两种作用场景可以看做是把死信交换机当做一种消息处理的最终兜底方案，与消费者重试时讲的<code>RepublishMessageRecoverer</code>作用类似。</p>
<p>而最后一种场景，大家设想一下这样的场景：<br>
如图，有一组绑定的交换机（<code>ttl.fanout</code>）和队列（<code>ttl.queue</code>）。但是<code>ttl.queue</code>没有消费者监听，而是设定了死信交换机<code>hmall.direct</code>，而队列<code>direct.queue1</code>则与死信交换机绑定，RoutingKey是blue：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687573175803-41a1c870-93bc-4307-974f-891de1b5a42d.png#averageHue=%23faf3f2&amp;clientId=u76b62a19-f8dc-4&amp;from=paste&amp;height=340&amp;id=u380f1403&amp;originHeight=422&amp;originWidth=1301&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=59423&amp;status=done&amp;style=none&amp;taskId=ucbcde27e-d210-43e8-8e35-7557d121729&amp;title=&amp;width=1049.546184842849" alt="image.png"></p>
<p>假如我们现在发送一条消息到<code>ttl.fanout</code>，RoutingKey为blue，并设置消息的<strong>有效期</strong>为5000毫秒：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553355.png" alt="image.png"><br>
:::warning<br>
<strong>注意</strong>：尽管这里的<code>ttl.fanout</code>不需要RoutingKey，但是当消息变为死信并投递到死信交换机时，会沿用之前的RoutingKey，这样<code>hmall.direct</code>才能正确路由消息。<br>
:::</p>
<p>消息肯定会被投递到<code>ttl.queue</code>之后，由于没有消费者，因此消息无人消费。5秒之后，消息的有效期到期，成为死信：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553462.png" alt="image.png"><br>
死信被再次投递到死信交换机<code>hmall.direct</code>，并沿用之前的RoutingKey，也就是<code>blue</code>：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553875.png" alt="image.png"><br>
由于<code>direct.queue1</code>与<code>hmall.direct</code>绑定的key是blue，因此最终消息被成功路由到<code>direct.queue1</code>，如果此时有消费者与<code>direct.queue1</code>绑定， 也就能成功消费消息了。但此时已经是5秒钟以后了：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553258.png" alt="image.png"><br>
也就是说，publisher发送了一条消息，但最终consumer在5秒后才收到消息。我们成功实现了<strong>延迟消息</strong>。</p>
<h3><span id="413总结"> 4.1.3.总结</span></h3>
<p>:::warning<br>
<strong>注意：</strong><br>
RabbitMQ的消息过期是基于追溯方式来实现的，也就是说当一个消息的TTL到期以后不一定会被移除或投递到死信交换机，而是在消息恰好处于队首时才会被处理。<br>
当队列中消息堆积很多的时候，过期消息可能不会被按时处理，因此你设置的TTL时间不一定准确。<br>
:::</p>
<h2><span id="42delayexchange插件"> 4.2.DelayExchange插件</span></h2>
<p>基于死信队列虽然可以实现延迟消息，但是太麻烦了。因此RabbitMQ社区提供了一个延迟消息插件来实现相同的效果。<br>
官方文档说明：<br>
<a href="https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq">Scheduling Messages with RabbitMQ | RabbitMQ - Blog</a></p>
<h3><span id="421下载"> 4.2.1.下载</span></h3>
<p>插件下载地址：<br>
<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">GitHub - rabbitmq/rabbitmq-delayed-message-exchange: Delayed Messaging for RabbitMQ</a><br>
由于我们安装的MQ是<code>3.8</code>版本，因此这里下载<code>3.8.17</code>版本：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553692.png" alt="image.png"><br>
当然，也可以直接使用课前资料提供好的插件：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553008.png" alt="image.png"></p>
<h3><span id="422安装"> 4.2.2.安装</span></h3>
<p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2024-06-19T09:22:59+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/mq-plugins/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;mq-plugins&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>插件目录被挂载到了<code>/var/lib/docker/volumes/mq-plugins/_data</code>这个目录，我们上传插件到该目录下。</p>
<p>接下来执行命令，安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553094.png" alt="image.png"></p>
<h3><span id="423声明延迟交换机"> 4.2.3.声明延迟交换机</span></h3>
<p>基于注解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayMessage</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到delay.queue的延迟消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于<code>@Bean</code>的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayExchangeConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .directExchange(<span class="string">&quot;delay.direct&quot;</span>) <span class="comment">// 指定交换机类型和名称</span></span><br><span class="line">                .delayed() <span class="comment">// 设置delay的属性为true</span></span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">// 持久化</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="424发送延迟消息"> 4.2.4.发送延迟消息</span></h3>
<p>发送消息时，必须通过x-delay属性设定延迟时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, delayed message&quot;</span>;</span><br><span class="line">    <span class="comment">// 2.发送消息，利用消息后置处理器添加消息头</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>, <span class="string">&quot;delay&quot;</span>, message, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            <span class="comment">// 添加延迟消息属性</span></span><br><span class="line">            message.getMessageProperties().setDelay(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>:::warning<br>
<strong>注意：</strong><br>
延迟消息插件内部会维护一个本地数据库表，同时使用Elang Timers功能实现计时。如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，同时延迟消息的时间会存在误差。<br>
因此，<strong>不建议设置延迟时间过长的延迟消息</strong>。<br>
:::</p>
<h2><span id="45订单状态同步问题"> 4.5.订单状态同步问题</span></h2>
<p>接下来，我们就在交易服务中利用延迟消息实现订单支付状态的同步。其大概思路如下：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27967491/1690343275577-b0f99b4a-40e2-40cf-8da2-11f0dfbd7d7c.jpeg" alt></p>
<p>假如订单超时支付时间为30分钟，理论上说我们应该在下单时发送一条延迟消息，延迟时间为30分钟。这样就可以在接收到消息时检验订单支付状态，关闭未支付订单。<br>
但是大多数情况下用户支付都会在1分钟内完成，我们发送的消息却要在MQ中停留30分钟，额外消耗了MQ的资源。因此，我们最好多检测几次订单支付状态，而不是在最后第30分钟才检测。<br>
例如：我们在用户下单后的第10秒、20秒、30秒、45秒、60秒、1分30秒、2分、…30分分别设置延迟消息，如果提前发现订单已经支付，则后续的检测取消即可。<br>
这样就可以有效避免对MQ资源的浪费了。</p>
<p>优化后的实现思路如下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553691.jpeg" alt></p>
<p>由于我们要多次发送延迟消息，因此需要先定义一个记录消息延迟时间的消息体，处于通用性考虑，我们将其定义到<code>hm-common</code>模块下：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553181.png" alt="image.png"><br>
代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.common.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.common.utils.CollUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiDelayMessage</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录延迟时间的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; delayMillis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MultiDelayMessage</span><span class="params">(T data, List&lt;Long&gt; delayMillis)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.delayMillis = delayMillis;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; MultiDelayMessage&lt;T&gt; <span class="title function_">of</span><span class="params">(T data, Long ... delayMillis)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MultiDelayMessage</span>&lt;&gt;(data, CollUtils.newArrayList(delayMillis));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取并移除下一个延迟时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列中的第一个延迟时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">removeNextDelay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delayMillis.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否还有下一个延迟时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNextDelay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !delayMillis.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="451定义常量"> 4.5.1.定义常量</span></h3>
<p>无论是消息发送还是接收都是在交易服务完成，因此我们在<code>trade-service</code>中定义一个常量类，用于记录交换机、队列、RoutingKey等常量：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553802.png" alt="image.png"><br>
内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MqConstants</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DELAY_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;trade.delay.topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DELAY_ORDER_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;trade.order.delay.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DELAY_ORDER_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;order.query&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="452抽取共享mq配置"> 4.5.2.抽取共享mq配置</span></h3>
<p>我们将mq的配置抽取到nacos中，方便各个微服务共享配置。<br>
在nacos中定义一个名为<code>shared-mq.xml</code>的配置文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;hm.mq.host:192.168.150.101&#125;</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;hm.mq.port:5672&#125;</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">$&#123;hm.mq.vhost:/hmall&#125;</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;hm.mq.un:hmall&#125;</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.mq.pw:123&#125;</span> <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure>
<p>这里只添加一些基础配置，至于生产者确认，消费者确认配置则由微服务根据业务自己决定。</p>
<p>在<code>trade-service</code>模块添加共享配置：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687595291593-378450c1-ef00-4cbf-9be8-235d1eea8e7c.png#averageHue=%23f6f9f5&amp;clientId=u76b62a19-f8dc-4&amp;from=paste&amp;height=515&amp;id=uc4ebf7e5&amp;originHeight=638&amp;originWidth=952&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=129257&amp;status=done&amp;style=none&amp;taskId=uc6221e28-aa92-49da-bc73-1ff8258fda5&amp;title=&amp;width=767.9999753807781" alt="image.png"></p>
<h3><span id="453改造下单业务"> 4.5.3.改造下单业务</span></h3>
<p>接下来，我们改造下单业务，在下单完成后，发送延迟消息，查询支付状态。</p>
<p>1）引入依赖<br>
在<code>trade-service</code>模块的<code>pom.xml</code>中引入amqp的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）改造下单业务<br>
修改<code>trade-service</code>模块的<code>com.hmall.trade.service.impl.OrderServiceImpl</code>类的<code>createOrder</code>方法，添加消息发送的代码：<br>
<img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1687595921876-005c46d9-4278-411b-bfc1-c5e545949cd5.png#averageHue=%23f6f8f4&amp;clientId=u76b62a19-f8dc-4&amp;from=paste&amp;height=496&amp;id=u29260a5b&amp;originHeight=615&amp;originWidth=1668&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=182037&amp;status=done&amp;style=none&amp;taskId=udb3ccb23-163c-406d-9d8c-bc7087da8f1&amp;title=&amp;width=1345.6134022427918" alt="image.png"></p>
<h3><span id="454编写查询支付状态接口"> 4.5.4.编写查询支付状态接口</span></h3>
<p>由于MQ消息处理时需要查询支付状态，因此我们要在pay-service模块定义一个这样的接口，并提供对应的FeignClient.<br>
首先，在hm-api模块定义三个类：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553228.png" alt="image.png"><br>
说明：</p>
<ul>
<li>PayOrderDTO：支付单的数据传输实体</li>
<li>PayClient：支付系统的Feign客户端</li>
<li>PayClientFallback：支付系统的fallback逻辑</li>
</ul>
<p>PayOrderDTO代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 支付订单</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;支付单数据传输实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayOrderDTO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;业务订单号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bizOrderNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付单号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long payOrderNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bizUserId;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付渠道编码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String payChannelCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付金额，单位分&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;付类型，1：h5,2:小程序，3：公众号，4：扫码，5：余额支付&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer payType;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;付状态，0：待提交，1:待支付，2：支付超时或取消，3：支付成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;拓展字段，用于传递不同渠道单独处理的字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String expandJson;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;第三方返回业务码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resultCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;第三方返回提示信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付成功时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime paySuccessTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付超时时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime payOverTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付二维码链接&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qrCodeUrl;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PayClient代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.api.client.fallback.PayClientFallback;</span><br><span class="line"><span class="keyword">import</span> com.hmall.api.dto.PayOrderDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;pay-service&quot;, fallbackFactory = PayClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayClient</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据交易订单id查询支付单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 业务订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 支付单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pay-orders/biz/&#123;id&#125;&quot;)</span></span><br><span class="line">    PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PayClientFallback代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.client.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.api.client.PayClient;</span><br><span class="line"><span class="keyword">import</span> com.hmall.api.dto.PayOrderDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FallbackFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayClientFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;PayClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PayClient <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PayClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后，在pay-service模块的PayController中实现该接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询支付单&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/biz/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">payOrder</span> <span class="operator">=</span> payOrderService.lambdaQuery().eq(PayOrder::getBizOrderNo, id).one();</span><br><span class="line">    <span class="keyword">return</span> BeanUtils.copyBean(payOrder, PayOrderDTO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="455消息监听"> 4.5.5.消息监听</span></h3>
<p>接下来，我们在trader-service编写一个监听器，监听延迟消息，查询订单支付状态：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311161553554.png" alt="image.png"><br>
代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.api.client.PayClient;</span><br><span class="line"><span class="keyword">import</span> com.hmall.api.dto.PayOrderDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmall.common.domain.MultiDelayMessage;</span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.constants.MqConstants;</span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.domain.po.Order;</span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStatusListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PayClient payClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = MqConstants.DELAY_ORDER_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = MqConstants.DELAY_EXCHANGE, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = MqConstants.DELAY_ORDER_ROUTING_KEY</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenOrderCheckDelayMessage</span><span class="params">(MultiDelayMessage&lt;Long&gt; msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取消息中的订单id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> msg.getData();</span><br><span class="line">        <span class="comment">// 2.查询订单，判断状态：1是未支付，大于1则是已支付或已关闭</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getById(orderId);</span><br><span class="line">        <span class="keyword">if</span> (order == <span class="literal">null</span> || order.getStatus() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 订单不存在或交易已经结束，放弃处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.可能是未支付，查询支付服务</span></span><br><span class="line">        <span class="type">PayOrderDTO</span> <span class="variable">payOrder</span> <span class="operator">=</span> payClient.queryPayOrderByBizOrderNo(orderId);</span><br><span class="line">        <span class="keyword">if</span> (payOrder != <span class="literal">null</span> &amp;&amp; payOrder.getStatus() == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 支付成功，更新订单状态</span></span><br><span class="line">            orderService.markOrderPaySuccess(orderId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.确定未支付，判断是否还有剩余延迟时间</span></span><br><span class="line">        <span class="keyword">if</span> (msg.hasNextDelay()) &#123;</span><br><span class="line">            <span class="comment">// 4.1.有延迟时间，需要重发延迟消息，先获取延迟时间的int值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">delayVal</span> <span class="operator">=</span> msg.removeNextDelay().intValue();</span><br><span class="line">            <span class="comment">// 4.2.发送延迟消息</span></span><br><span class="line">            rabbitTemplate.convertAndSend(MqConstants.DELAY_EXCHANGE, MqConstants.DELAY_ORDER_ROUTING_KEY, msg,</span><br><span class="line">                    message -&gt; &#123;</span><br><span class="line">                        message.getMessageProperties().setDelay(delayVal);</span><br><span class="line">                        <span class="keyword">return</span> message;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.没有剩余延迟时间了，说明订单超时未支付，需要取消订单</span></span><br><span class="line">        orderService.cancelOrder(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意，这里要在OrderServiceImpl中实现cancelOrder方法，留作作业大家自行实现。</p>
<h1><span id="5作业"> 5.作业</span></h1>
<h2><span id="51取消订单"> 5.1.取消订单</span></h2>
<p>在处理超时未支付订单时，如果发现订单确实超时未支付，最终需要关闭该订单。<br>
关闭订单需要完成两件事情：</p>
<ul>
<li>将订单状态修改为已关闭</li>
<li>恢复订单中已经扣除的库存</li>
</ul>
<p>这部分功能尚未实现。<br>
大家要在<code>IOrderService</code>接口中定义<code>cancelOrder</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">cancelOrder</span><span class="params">(Long orderId)</span>;</span><br></pre></td></tr></table></figure>
<p>并且在<code>OrderServiceImpl</code>中实现该方法。实现过程中要注意业务幂等性判断。</p>
<h2><span id="52抽取mq工具"> 5.2.抽取MQ工具</span></h2>
<p>MQ在企业开发中的常见应用我们就学习完毕了，除了收发消息以外，消息可靠性的处理、生产者确认、消费者确认、延迟消息等等编码还是相对比较复杂的。<br>
因此，我们需要将这些常用的操作封装为工具，方便在项目中使用。要求如下：</p>
<ul>
<li>在<code>hm-commom</code>模块下编写发送消息的工具类<code>RabbitMqHelper</code></li>
<li>定义一个自动配置类<code>MqConsumeErrorAutoConfiguration</code>，内容包括：
<ul>
<li>声明一个交换机，名为<code>error.direct</code>，类型为<code>direct</code></li>
<li>声明一个队列，名为：<code>微服务名 + error.queue</code>，也就是说要动态获取</li>
<li>将队列与交换机绑定，绑定时的<code>RoutingKey</code>就是<code>微服务名</code></li>
<li>声明<code>RepublishMessageRecoverer</code>，消费失败消息投递到上述交换机</li>
<li>给配置类添加条件，当<code>spring.rabbitmq.listener.simple.retry.enabled</code>为<code>true</code>时触发</li>
</ul>
</li>
</ul>
<p>RabbitMqHelper的结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchange, String routingKey, Object msg)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDelayMessage</span><span class="params">(String exchange, String routingKey, Object msg, <span class="type">int</span> delay)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageWithConfirm</span><span class="params">(String exchange, String routingKey, Object msg, <span class="type">int</span> maxRetries)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="53改造业务"> 5.3.改造业务</span></h2>
<p>利用你编写的工具，改造支付服务、购物车服务、交易服务中消息发送功能，并且添加消息确认或消费者重试机制，确保消息的可靠性。</p>
]]></content>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>2023暑假日程备忘录</title>
    <url>/2023/07/23/2023-2023%E6%9A%91%E5%81%87%E6%97%A5%E7%A8%8B%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1><span id="高数"> 高数</span></h1>
<p><strong>第4讲</strong>4.10</p>
<h1><span id="计算机三级"> 计算机三级</span></h1>
<h2><span id="进度"> 进度</span></h2>
<p>第7套卷子18题</p>
<h2><span id="笔记"> 笔记</span></h2>
<h3><span id="传输速度"> 传输速度</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. OC-1 对应 51.84 Mbps</span><br></pre></td></tr></table></figure>
<h1><span id="计算机四级"> 计算机四级</span></h1>
<h2><span id="进度"> 进度</span></h2>
<p>真题试卷4</p>
<h2><span id="操作系统笔记"> 操作系统笔记</span></h2>
<h3><span id="杂记"> 杂记</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151610196.png" alt="image-20230815161045108"></p>
<p>2.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820150129121.png" alt="image-20230820150129121"></p>
<p>3.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820150216880.png" alt="image-20230820150216880"></p>
<h3><span id="中断"> 中断</span></h3>
<ol>
<li>串口数据到达说明中断</li>
</ol>
<h3><span id="并发"> 并发</span></h3>
<ol>
<li>并发程序执行结果不可再现</li>
<li>并发程序与计算过程无法一一对应</li>
<li>并发程序在执行期间具有相互制约关系</li>
<li>并发程序在执行过程失去了封闭性</li>
</ol>
<h3><span id="系统调用"> 系统调用</span></h3>
<ol>
<li>函数fork()<strong>进程控制类</strong>系统调用</li>
</ol>
<h3><span id="pcb"> PCB</span></h3>
<ol>
<li>PCB内容</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241121124.png" alt="image-20230724112156055"></p>
<ol start="2">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241629029.png" alt="image-20230724162957947"></li>
</ol>
<h3><span id="调度算法"> 调度算法</span></h3>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241612970.png" alt="image-20230724161251867"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241614023.png" alt="image-20230724161440935"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171028068.png" alt="image-20230817102837957"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171031774.png" alt="image-20230817103104681"></li>
<li><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230819120840584.png" alt=" "></li>
</ol>
<h3><span id="平均周转时间"> 平均周转时间</span></h3>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241617747.png" alt="image-20230724161756677"></li>
<li></li>
</ol>
<h3><span id="多道程序设计"> 多道程序设计</span></h3>
<ol>
<li>特点：</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241624300.png" alt="image-20230724162435250"></p>
<h3><span id="linux"> Linux</span></h3>
<ol>
<li>linux进程状态有：运行状态、中断状态、不可中断状态、僵尸状态、停止状态。</li>
<li></li>
</ol>
<h3><span id="进程"> 进程</span></h3>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307241858000.png" alt="image-20230724185823922"></li>
<li>创建新进程过程：</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307251843824.png" alt="image-20230725184331728"></p>
<ol start="3">
<li>进程间制约关系</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261938159.png" alt="image-20230726193802100"></p>
<ol start="4">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271807751.png" alt="image-20230727180758648"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161040757.png" alt="image-20230816104018629"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161507748.png" alt="image-20230816150739661"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161509517.png" alt="image-20230816150942427"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161515084.png" alt="image-20230816151508996"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308161525307.png" alt="image-20230816152558204"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171425662.png" alt="image-20230817142543573"></li>
</ol>
<h3><span id="fork函数"> fork函数</span></h3>
<ol>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261406944.png" alt="image-20230726140645835"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261419007.png" alt="image-20230726141940922"></p>
</li>
<li>
<p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230726142008834.png" alt="image-20230726142008834"></p>
</li>
</ol>
<h3><span id="计算公式"> 计算公式</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307261944884.png" alt="image-20230726194413789"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271355354.png" alt="image-20230727135559270"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271358795.png" alt="image-20230727135837704"></p>
<p>4.LRU缺页率</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271812045.png" alt="image-20230727181212974"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271822587.png" alt="image-20230727182223511"></p>
<p>5.缺页中断</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271829541.png" alt="image-20230727182948458"></p>
<p>6.缺页次数</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307272013385.png" alt="image-20230727201308280"></p>
<p>7.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281001896.png" alt="image-20230728100148788"></p>
<p>8.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281010172.png" alt="image-20230728101026070"></p>
<p>9.缺页中断</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281145136.png" alt="image-20230728114559043"></p>
<p>10.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307312000669.png" alt="image-20230731200028554"></p>
<ol start="11">
<li></li>
</ol>
<blockquote>
<p>后和前不一样</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307312003821.png" alt="image-20230731200359729"></p>
<p>12.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307312045328.png" alt="image-20230731204540227"></p>
<h3><span id="页面置换算法"> 页面置换算法</span></h3>
<h4><span id="nru"> NRU</span></h4>
<ol>
<li>
<p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230727133203093.png" alt="image-20230727133203093"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271332061.png" alt="image-20230727133220006"></p>
</li>
</ol>
<h4><span id="fifo"> FIFO</span></h4>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281013112.png" alt="image-20230728101336020"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281027959.png" alt="image-20230728102700897"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281027616.png" alt="image-20230728102723540"></p>
<h4><span id="clock"> CLOCK</span></h4>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281014228.png" alt="image-20230728101437160"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281014411.png" alt="image-20230728101452339"></p>
<h4><span id="opt"> OPT</span></h4>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281019007.png" alt="image-20230728101919935"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281019612.png" alt="image-20230728101937547"></p>
<h3><span id="寄存器"> 寄存器</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307271346156.png" alt="image-20230727134638072"></p>
<h3><span id="磁盘"> 磁盘</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281515768.png" alt="image-20230728151553682"></p>
<h3><span id="文件"> 文件</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281655506.png" alt="image-20230728165544415"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281720310.png" alt="image-20230728172052224"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281727380.png" alt="image-20230728172738286"></p>
<p>4.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820201241949.png" alt="image-20230820201241949"></p>
<h3><span id="外存储设备"> 外存储设备</span></h3>
<ol>
<li>存取过程<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307281704835.png" alt="image-20230728170446755"></li>
</ol>
<h3><span id="生产者与消费者"> 生产者与消费者</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151134788.png" alt="image-20230815113408668"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151134364.png" alt="image-20230815113427311"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151149106.png" alt="image-20230815114936007"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308151149158.png" alt="image-20230815114952105"></p>
<h3><span id="外碎片"> 外碎片</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308171437827.png" alt="image-20230817143729738"></p>
<h3><span id="可变分区"> 可变分区</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230819104326606.png" alt="image-20230819104326606"></p>
<h3><span id="fat"> FAT</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820175108120.png" alt="image-20230820175108120"></p>
<p>2.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230820175215199.png" alt="image-20230820175215199"></p>
<h3><span id="spooling"> SPOOLing</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821100631823.png" alt="image-20230821100631823"></p>
<h3><span id="通道"> 通道</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821115022788.png" alt="image-20230821115022788"></p>
<h3><span id="sdt"> SDT</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821150343582.png" alt="image-20230821150343582"></p>
<h3><span id="dct"> DCT</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821150434947.png" alt="image-20230821150434947"></p>
<h3><span id="coct"> COCT</span></h3>
<p>1.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230821150540413.png" alt="image-20230821150540413"></p>
<h2><span id="计算机网络笔记"> 计算机网络笔记</span></h2>
<h3><span id="协议标准"> 协议标准</span></h3>
<h4><span id="ieee-8021"> IEEE 802.1</span></h4>
<p>定义局域网体系结构、网络互联、网络管理与性能测试。</p>
<h4><span id="ieee-8023"> IEEE 802.3</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义CSMA/CD总线介质访问控制子层与物理层标准。</span><br><span class="line">2. 传统以太网(Ethernet)采用IEEE 802.3标准。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-8024"> IEEE 802.4</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义了总线拓扑结构的令牌总线介质访问控制方法与相应的物理规范。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-8025"> IEEE 802.5</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义了总线型Token Ring介质访问控制方法与相应的物理规范。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-8023u"> IEEE 802.3u</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 快速以太网(Fast Ethernet)采用IEEE 802.3u标准。其最大传输速率是传统以太网的10倍，支持的传输介质为双绞线和光纤。</span><br><span class="line">2. 100Base-FX是快速以太网(Fast Ethernet, 采用IEEE802.3u)相关传输介质中的一种，它支持2芯的多模或单模光纤，提供高速主干网使用，它是一个全双工系统。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-8023z"> IEEE 802.3z</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 千兆以太网(Gigabit Ethernet)采用IEEE 802.3z标准。</span><br><span class="line">2. 1000 BASE-T使用5类非屏蔽双绞线作为传输介质，双绞线长度可达100m，它是IEEE 802.3z的以太网物理层标准之一。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-802ae"> IEEE </span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 万兆以太网(10 Gigabit Ethernet)采用IEEE 802.ae标准</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-80211"> IEEE 802.11</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 无线局域网(WLAN)的介质访问控制协议及物理层技术规范。</span><br><span class="line">2. IEEE 802.11主要用于解决办公室局域网和校园网中用户与用户终端的无线接入。</span><br><span class="line">3. IEEE 802.11协议的帧头有4个地址字段，这4个地址共同表示基本服务集BSS的ID、源地址、目的地址、发送结点地址与接受结点地址。这里面的地址是硬件地址。</span><br><span class="line">4. IEEE 802.11的MAC层采用一种虚拟监听(VCS)机制，用于进一步减少发生冲突的概率。</span><br><span class="line">5. IEEE 802.11数据帧最特殊的地方是帧头有4个地址字段，但这4个地址字段并不是都出现在所有帧中。</span><br></pre></td></tr></table></figure>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301435216.png" alt="image-20230730143514164"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308081114057.png" alt="image-20230808111401943"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308101023294.png" alt="image-20230810102316185"></p>
<h4><span id="ieee-80211a"> IEEE 802.11a</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. IEEE 802.11a将传输速率提高到54Mbps。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-80211b"> IEEE 802.11b</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 采用2.4GHz频段，数据传输速率为11Mbps，是无线局域网协议标准。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-80211g"> IEEE 802.11g</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 在2.4GHz频段使用正交频分复用(OFDM)调制技术，使数据传输速率提高到20Mbps以上；能够与IEEE 802.11b的Wi-Fi系统互联互通，可共存于同一AP的网络里，从而保障了后向兼容性。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-80211n"> IEEE 802.11n</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. IEEE 802.11n是无线局域网传输标准，工作在5GHz波段，最大传送速率达600Mbps，采用无线局域网物理层与介质访问控制层规范。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-80212"> IEEE 802.12</span></h4>
<p>需求优先的介质访问控制协议</p>
<h4><span id="ieee-80215"> IEEE 802.15</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义近距离个人无线网络访问控制子层与物理层标准。</span><br><span class="line">2. 采用蓝牙技术的无线个人网技术规范。</span><br></pre></td></tr></table></figure>
<h4><span id="ieee-80216"> IEEE 802.16</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义宽带无线局域网访问控制子层与物理层标准。</span><br><span class="line">2. 宽带无线连接工作组，开发2~66GHz的无线接入系统空中接口。</span><br></pre></td></tr></table></figure>
<h3><span id="缩写"> 缩写</span></h3>
<ol>
<li>WSN(Wireless Sensor Network) 无线传感网</li>
<li>WAN(Wide Area Network) 广域网</li>
<li>WMN(Wiress Mesh Network) 无线网状网络</li>
<li>LAN(Local Area Network) 局域网</li>
<li>Ad hoc 无线自组网</li>
</ol>
<h3><span id="杂记"> 杂记</span></h3>
<ol>
<li>IEEE802.3u的最大传输速率</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307292212669.png" alt="image-20230729221213560"></p>
<p>2.<strong>Unix操作系统</strong>主要包括:IBM公司的<strong>AIX</strong>系统、Sun公司的<strong>Solaris</strong>系统、HP公司的<strong>HP-UX</strong>等</p>
<p>3.在 <strong>Ethernet</strong>帧中，前导码由**64位(8字节)**的比特序列组成</p>
<p>4.以太网帧中的前导码与帧前定界符字段的长度之和是<strong>8字节</strong></p>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301131334.png" alt="image-20230730113116253"></p>
<p>6.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301227946.png" alt="image-20230730122739899"></p>
<p>7.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301340895.png" alt="image-20230730134045831"></p>
<p>8.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301342805.png" alt="image-20230730134202757"></p>
<ol start="9">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301353017.png" alt="image-20230730135315958"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301355188.png" alt="image-20230730135534104"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307301558517.png" alt="image-20230730155838468"></li>
</ol>
<p>12.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302325733.png" alt="image-20230730232509660"></p>
<p>13.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302327376.png" alt="image-20230730232758318"></p>
<p>14.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302350242.png" alt="image-20230730235008194"></p>
<p>15.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307302355933.png" alt="image-20230730235519872"></p>
<p>16.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307310008317.png" alt="image-20230731000833259"></p>
<p>17.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311807536.png" alt="image-20230731180746485"></p>
<p>18.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011006241.png" alt="image-20230801100611133"></p>
<p>19.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011029817.png" alt="image-20230801102909739"></p>
<p>20.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011138703.png" alt="image-20230801113812598"></p>
<p>21.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011139543.png" alt="image-20230801113948433"></p>
<p>22.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308012101163.png" alt="image-20230801210125070"></p>
<p>23.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308012117860.png" alt="image-20230801211724799"></p>
<p>24.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021032144.png" alt="image-20230802103235053"></p>
<p>25.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021208354.png" alt="image-20230802120831309"></p>
<p>26.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062126791.png" alt="image-20230806212601701"></p>
<p>27.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062129249.png" alt="image-20230806212919177"></p>
<p>28.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062300417.png" alt="image-20230806230056331"></p>
<p>29.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122242065.png" alt="image-20230812224215965"></p>
<p>30.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122249043.png" alt="image-20230812224939942"></p>
<h3><span id="协议"> 协议</span></h3>
<p>1.OSI和TCP/IP模型</p>
<p>​	<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307291945686.png" alt="image-20230729194532595"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308111149770.png" alt="image-20230811114919670"></p>
<h3><span id="wsn"> WSN</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307291602219.png" alt="image-20230729160214092"></p>
<h3><span id="计算公式"> 计算公式</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307291648662.png" alt="image-20230729164820560"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311425240.png" alt="image-20230731142517133"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311518586.png" alt="image-20230731151823494"></p>
<h3><span id="icmp"> ICMP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311246603.png" alt="image-20230731124623513"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308111157822.png" alt="image-20230811115702726"></p>
<h3><span id="igmp"> IGMP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307311429218.png" alt="image-20230731142950117"></p>
<h3><span id="ftp"> FTP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011147806.png" alt="image-20230801114708709"></p>
<h3><span id="pop3"> POP3</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011153660.png" alt="image-20230801115349592"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011442060.png" alt="image-20230801144246994"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308012002191.png" alt="image-20230801200241090"></p>
<p>4.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308111835296.png" alt="image-20230811183514199"></p>
<h3><span id="im系统"> IM系统</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011952792.png" alt="image-20230801195219685"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308011953969.png" alt="image-20230801195333883"></p>
<h3><span id="sip"> SIP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021012360.png" alt="image-20230802101228218"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021040145.png" alt="image-20230802104037053"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021131162.png" alt="image-20230802113137075"></p>
<p>4.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230802113555962.png" alt="image-20230802113555962"></p>
<h3><span id="xmpp"> XMPP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021037803.png" alt="image-20230802103701717"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021154953.png" alt="image-20230802115432877"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021543300.png" alt="image-20230802154351203"></p>
<p>4.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021545987.png" alt="image-20230802154551893"></p>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021555528.png" alt="image-20230802155543439"></p>
<h3><span id="skype"> Skype</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021038456.png" alt="image-20230802103846384"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031740717.png" alt="image-20230803174033632"></p>
<p>3.Skype是融合了VoIP技术和P2P技术，而不是Skype制定的标准</p>
<p>4.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121714383.png" alt="image-20230812171422304"></p>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121715736.png" alt="image-20230812171532647"></p>
<p>6.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121719927.png" alt="image-20230812171901856"></p>
<p>7.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121724554.png" alt="image-20230812172400478"></p>
<p>8.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121725276.png" alt="image-20230812172558185"></p>
<h3><span id="p2p"> P2P</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021210571.png" alt="image-20230802121042495"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121659670.png" alt="image-20230812114607661"></p>
<h3><span id="simple"> SIMPLE</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308021558112.png" alt="image-20230802155813032"></p>
<h3><span id="netbios"> NetBIOS</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308030951034.png" alt="image-20230803095105927"></p>
<h3><span id="iptv"> IPTV</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031048490.png" alt="image-20230803104832388"></p>
<h3><span id="nfs"> NFS</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031050505.png" alt="image-20230803105029420"></p>
<h3><span id="maze"> Maze</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031353935.png" alt="image-20230803135342828"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031739457.png" alt="image-20230803173954365"></p>
<h3><span id="edonkey2000"> eDonkey2000</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031743310.png" alt="image-20230803174341229"></p>
<h3><span id="vod"> VOD</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308031747789.png" alt="image-20230803174716702"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121659797.png" alt="image-20230812165928714"></p>
<h3><span id="x509"> X.509</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062131206.png" alt="image-20230806213147135"></p>
<h3><span id="x800"> X.800</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308041206942.png" alt="image-20230804120645819"></p>
<h3><span id="cmip"> CMIP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308041212144.png" alt="image-20230804121234049"></p>
<h3><span id="e1gamal"> E1Gamal</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062120919.png" alt="image-20230806212021815"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122234282.png" alt="image-20230812223432188"></p>
<h3><span id="blowfish"> Blowfish</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062130163.png" alt="image-20230806213050093"></p>
<h3><span id="kdc"> KDC</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308062134490.png" alt="image-20230806213404395"></p>
<h3><span id="ipsec"> IPSec</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308071154673.png" alt="image-20230807115411555"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122232530.png" alt="image-20230812223205416"></p>
<h3><span id="voip"> VoIP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121144611.png" alt="image-20230812114411494"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121703827.png" alt="image-20230812170318734"></p>
<p>3.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308121720081.png" alt="image-20230812172045008"></p>
<h3><span id="rtcp"> RTCP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122046657.png" alt="image-20230812204645572"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122052065.png" alt="image-20230812205212973"></p>
<h3><span id="smime"> S/MIME</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122056698.png" alt="image-20230812205621607"></p>
<h3><span id="aes"> AES</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122232525.png" alt="image-20230812223251434"></p>
<h3><span id="认证函数"> 认证函数</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122237891.png" alt="image-20230812223720782"></p>
<h3><span id="认证中心"> 认证中心</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308122332981.png" alt="image-20230812233212893"></p>
<h3><span id="身份认证"> 身份认证</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308131624559.png" alt="image-20230813162435448"></p>
<h3><span id="pgp"> PGP</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308131635990.png" alt="image-20230813163520898"></p>
<h1><span id="四级错题"> 四级错题</span></h1>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291023951.png" alt="image-20230829100951887"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291023961.png" alt="image-20230829101933493"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291022685.png" alt="image-20230829102246796"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291026239.png" alt="image-20230829102600836"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291028796.png" alt="image-20230829102758407"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291030091.png" alt="image-20230829103026013"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291029768.png" alt="image-20230829102942692"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291036369.png" alt="image-20230829103651292"></li>
<li><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230829104051756.png" alt="image-20230829104051756"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291048041.png" alt="image-20230829104820957"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308291052297.png" alt="image-20230829105220205"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011506001.png" alt="image-20230901150650889"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011508623.png" alt="image-20230901150845545"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011509339.png" alt="image-20230901150909271"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011510190.png" alt="image-20230901151024104"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011511197.png" alt="image-20230901151153121"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011513412.png" alt="image-20230901151302321"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011514970.png" alt="image-20230901151427888"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011515736.png" alt="image-20230901151519655"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011517569.png" alt="image-20230901151738479"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011518280.png" alt="image-20230901151843194"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011520711.png" alt="image-20230901152006625"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011522038.png" alt="image-20230901152231937"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011523492.png" alt="image-20230901152330409"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011525636.png" alt="image-20230901152533529"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011528233.png" alt="image-20230901152842129"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011530348.png" alt="image-20230901153027250"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309011533708.png" alt="image-20230901153329618"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021744158.png" alt="image-20230902174439040"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021745840.png" alt="image-20230902174500766"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021745685.png" alt="image-20230902174554612"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021746979.png" alt="image-20230902174639909"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309021747465.png" alt="image-20230902174718380"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031731347.png" alt="image-20230903173158219"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031738346.png" alt="image-20230903173834252"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031741801.png" alt="image-20230903174123723"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031742108.png" alt="image-20230903174230020"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031744530.png" alt="image-20230903174407435"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032126156.png" alt="image-20230903212611073"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032127596.png" alt="image-20230903212720512"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032129680.png" alt="image-20230903212925607"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032130186.png" alt="image-20230903213050111"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032132859.png" alt="image-20230903213218782"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032132025.png" alt="image-20230903213233958"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032132385.png" alt="image-20230903213247303"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032133571.png" alt="image-20230903213343495"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309032137761.png" alt="image-20230903213701687"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309042212895.png" alt="image-20230904221254780"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309042227216.png" alt="image-20230904222755128"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062151586.png" alt="image-20230906215134458"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062152612.png" alt="image-20230906215238516"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062202968.png" alt="image-20230906220257853"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062203005.png" alt="image-20230906220354898"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062204121.png" alt="image-20230906220412017"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062214457.png" alt="image-20230906221448327"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062216426.png" alt="image-20230906221618321"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309062317093.png" alt="image-20230906231731973"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141541938.png" alt="image-20230914154113824"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141543899.png" alt="image-20230914154304821"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141544444.png" alt="image-20230914154439366"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141546255.png" alt="image-20230914154615157"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141546797.png" alt="image-20230914154645718"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141855415.png" alt="image-20230914185546351"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141856431.png" alt="image-20230914185621367"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141903873.png" alt="image-20230914190330802"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141913026.png" alt="image-20230914191326952"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141914863.png" alt="image-20230914191409784"></li>
</ol>
<h1><span id="三级错题"> 三级错题</span></h1>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308302015307.png" alt="image-20230830201504175"></li>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308302019861.png" alt="image-20230830201948812"></p>
<ol start="3">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202308302022734.png" alt="image-20230830202242644"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091635587.png" alt="image-20230909163506432"></li>
</ol>
<p>5.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091648697.png" alt="image-20230909164800581"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091648164.png" alt="image-20230909164813100"></p>
<ol start="6">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309091702797.png" alt="image-20230909170203709"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141851640.png" alt="image-20230914185107561"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141854457.png" alt="image-20230914185454384"></li>
<li>​       <img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309161219879.png" alt="image-20230916121954783"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309161222176.png" alt="image-20230916122225094"></li>
</ol>
<h1><span id="四级多选"> 四级多选</span></h1>
<ol>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141554662.png" alt="image-20230914155421575"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141555826.png" alt="image-20230914155531719"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141556596.png" alt="image-20230914155639509"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141558461.png" alt="image-20230914155844382"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141600999.png" alt="image-20230914160030926"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141601482.png" alt="image-20230914160106405"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141604576.png" alt="image-20230914160424493"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141914317.png" alt="image-20230914191440249"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141919770.png" alt="image-20230914191905688"></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309141921330.png" alt="image-20230914192134257"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>日程表</tag>
      </tags>
  </entry>
  <entry>
    <title>2024唐迟考研英语</title>
    <url>/2023/10/04/2023-2024%E5%94%90%E8%BF%9F%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h1><span id="好句"> 好句</span></h1>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310041035654.png" alt="image-20231004103551500"></p>
<h1><span id="笔记"> 笔记</span></h1>
<ol>
<li>当真题看到一个不会的词时，去有道翻译看牛津的<strong>英英释义</strong></li>
<li><strong>come to</strong>现在开始…。代表以前的不重要<br>
<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310081444061.png" alt="image-20231008144451977"></li>
<li>关注<strong>代词</strong>，获取充分信息</li>
<li><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20231010203035052.png" alt="image-20231010203035052"></li>
</ol>
<p>例子在前，<strong>yet</strong>说明前后意思相反，答案是yet后意思的相反的意思</p>
<ol start="5">
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310141928665.png" alt="image-20231014192820339"></li>
</ol>
<p>有<strong>But</strong>取反</p>
<ol start="6">
<li>考研文章中的斜体字表示书名，<strong>尽量读懂</strong></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考研英语</tag>
      </tags>
  </entry>
  <entry>
    <title>2025考研</title>
    <url>/2023/10/27/2023-2025%E8%80%83%E7%A0%94/</url>
    <content><![CDATA[<h1><span id="进度"> 进度</span></h1>
<h2><span id="高数"> 高数</span></h2>
<p>p9</p>
]]></content>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/05/11/2023-Docker/</url>
    <content><![CDATA[<h1><span id="docker基本操作命令"> Docker基本操作命令</span></h1>
<p>其实没什么记录必要，只需查看帮助文档就行了</p>
<p>不知道的命令，可以去<a href>docker hub</a>查看命令</p>
<h2><span id="启动"> 启动</span></h2>
<p><code>systemctl start docker</code></p>
<h2><span id="查看帮助文档"> 查看帮助文档</span></h2>
<p><code>docker --help</code></p>
<h2><span id="查看镜像"> 查看镜像</span></h2>
<p><code>docker images</code></p>
<h2><span id="查看容器状态"> 查看容器状态</span></h2>
<p><code>docker ps</code></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE</title>
    <url>/2023/09/03/2023-JavaEE/</url>
    <content><![CDATA[<h1><span id="spring"> Spring</span></h1>
<h2><span id="环境配置"> 环境配置</span></h2>
<p>1.如果不能创建.java文件，那么就是项目的src文件没有被当成sources文件，解决方法如下<br>
<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202309031942306.png" alt="img"></p>
<ol start="2">
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java程序设计</title>
    <url>/2023/03/03/2023-Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1><span id="javase"> JavaSE</span></h1>
<h2><span id="语法"> 语法</span></h2>
<h3><span id="散记"> 散记</span></h3>
<ol>
<li>一个源文件最多只有一个public类, 其他类的个数不限，如果一个源文件包含一个public类，那么该文件要以该public类名命名</li>
<li>关键字中所有字母都为小写</li>
<li>Java中不能用0和非0来表示真和假</li>
</ol>
<h3><span id="数据类型"> 数据类型</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303031047259.png" alt></p>
<h4><span id="基本数据类型转换"> 基本数据类型转换</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303031107093.png" alt></p>
<p>其中,当把任何基本类型的值和字符串值进行连接运算时(+)，基本类型的值将自动转化为字符串类型。</p>
<p>对其进行样例解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> + <span class="string">&quot;Hello&quot;</span>); <span class="comment">// 98Hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello!&quot;</span> + <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>); <span class="comment">// Hello!a1</span></span><br></pre></td></tr></table></figure>
<h4><span id="强制类型转换"> 强制类型转换</span></h4>
<ol>
<li>boolean类型不可以转换为其它的数据类型。</li>
</ol>
<h4><span id="数组"> 数组</span></h4>
<ol>
<li>数组是引用类型</li>
<li>对于基本数据类型而言，默认初始化值各有不同</li>
<li>对于引用数据类型而言，默认初始化值为null(注意与0不同)</li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303310832353.png" alt></li>
<li>特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组。</li>
<li>局部变量声明时不指定权限修饰符，与所在方法修饰符一样</li>
</ol>
<h3><span id="static"> Static</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120829731.png" alt="image-20230512082941627"></p>
<h3><span id="初始化块"> 初始化块</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120858659.png" alt="image-20230512085802559"></p>
<h3><span id="final"> Final</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120909328.png" alt="image-20230512090910259"></p>
<h3><span id="abstract"> abstract</span></h3>
<ol>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120916994.png" alt="image-20230512091604925"></p>
<p>2.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305120918302.png" alt="image-20230512091849225"></p>
<p>3.<img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230512091920488.png" alt="image-20230512091920488"></p>
<h2><span id="面向对象"> 面向对象</span></h2>
<ol>
<li>
<p>static方法访问非static,编译不通过</p>
</li>
<li>
<p>局部变量声明时不指定权限修饰符，与所在方法修饰符一样</p>
</li>
<li>
<p>类里面有属性和方法，不能有单独的语句</p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304070858050.png" alt></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304070941164.png" alt></p>
</li>
<li>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304071048269.png" alt></p>
</li>
</ol>
<h2><span id="高级特性"> 高级特性</span></h2>
<h3><span id="散记"> 散记</span></h3>
<p>1.Java只支持<strong>单继承</strong>,不允许多继承</p>
<p>2.方法的重写</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304101542067.png" alt></p>
<p>3.接口也可以继承另一个接口，使用extends关键字。</p>
<h3><span id="接口"> 接口</span></h3>
<p>1.<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305121050303.png" alt="image-20230512105057220"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2023/11/13/JavaScript/</url>
    <content><![CDATA[<blockquote>
<p>JavaScript 基础 - 第4天</p>
</blockquote>
<h1><span id="javascript-基础-第1天"> JavaScript 基础 - 第1天</span></h1>
<blockquote>
<p>了解变量、数据类型、运算符等基础概念，能够实现数据类型的转换，结合四则运算体会如何编程。</p>
</blockquote>
<ul>
<li>体会现实世界中的事物与计算机的关系</li>
<li>理解什么是数据并知道数据的分类</li>
<li>理解变量存储数据的“容器”</li>
<li>掌握常见运算符的使用，了解优先级关系</li>
<li>知道 JavaScript 数据类型隐式转换的特征</li>
</ul>
<h2><span id="介绍"> 介绍</span></h2>
<blockquote>
<p>掌握 JavaScript 的引入方式，初步认识 JavaScript 的作用</p>
</blockquote>
<h3><span id="引入方式"> 引入方式</span></h3>
<p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p>
<h4><span id="内部方式"> 内部方式</span></h4>
<p>通过 <code>script</code> 标签包裹 JavaScript 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="外部形式"> 外部形式</span></h4>
<p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处的代码会被忽略掉！！！！</span></span></span><br><span class="line"><span class="language-javascript">  	<span class="title function_">alert</span>(<span class="number">666</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="注释和结束符"> 注释和结束符</span></h3>
<p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p>
<h4><span id="单行注释"> 单行注释</span></h4>
<p>使用 <code>// </code> 注释单行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="多行注释"> 多行注释</span></h4>
<p>使用 <code>/* */</code> 注释多行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p>
<h3><span id="结束符"> 结束符</span></h3>
<p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 结束符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line">    alert(1);</span><br><span class="line">    alert(2);</span><br><span class="line">    alert(1)</span><br><span class="line">    alert(2)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p>
<h3><span id="输入和输出"> 输入和输出</span></h3>
<p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p>
<p>举例说明：如按键盘上的方向键，向上/下键可以滚动页面，按向上/下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p>
<h4><span id="输出"> 输出</span></h4>
<p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p>
<p><code>alert()</code>、<code>document.wirte()</code></p>
<p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，他都会以弹窗形式展示（输出）给用户。</p>
<h4><span id="输入"> 输入</span></h4>
<p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 输入输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 输入的任意数字，都会以弹窗形式展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="变量"> 变量</span></h2>
<blockquote>
<p>理解变量是计算机存储数据的“容器”，掌握变量的声明方式</p>
</blockquote>
<p>变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// x 符号代表了 5 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  x = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// y 符号代表了 6 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  y = <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//举例： 在 JavaScript 中使用变量可以将某个数据（数值）记录下来！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将用户输入的内容保存在 num 这个变量（容器）中</span></span></span><br><span class="line"><span class="language-javascript">  num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一数字!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过 num 变量（容器）将用户输入的内容输出出来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(num)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(num)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="声明"> 声明</span></h3>
<p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code></p>
<p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p>
<h3><span id="赋值"> 赋值</span></h3>
<p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 赋值，将 18 这个数据存入了 age 这个“容器”中</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这样 age 的值就成了 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(age)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 也可以声明和赋值同时进行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="关键字"> 关键字</span></h3>
<p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p>
<p>以下是使用 <code>let</code> 时的注意事项：</p>
<ol>
<li>允许声明和赋值同时进行</li>
<li>不允许重复声明</li>
<li>允许同时声明多个变量并赋值</li>
<li>JavaScript 中内置的一些关键字不能被当做变量名</li>
</ol>
<p>以下是使用 <code>var</code> 时的注意事项：</p>
<ol start="2">
<li>允许声明和赋值同时进行</li>
<li>允许重复声明</li>
<li>允许同时声明多个变量并赋值</li>
</ol>
<p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code>，后期会更进一步介绍二者间的区别。</p>
<h3><span id="变量名命名规则"> 变量名命名规则</span></h3>
<p>关于变量的名称（标识符）有一系列的规则需要遵守：</p>
<ol>
<li>只能是字母、数字、下划线、$，且不能能数字开头</li>
<li><strong>字母区分大小写</strong>，如 Age 和 age 是不同的变量</li>
<li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li>
<li>尽量保证变量具有一定的语义，见字知义</li>
</ol>
<p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 变量名命名规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age1 = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 1age = 18; // 错误，不可以数字开头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Age</span> = <span class="number">24</span> <span class="comment">// 正确，它与小写的 age 是不同的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let let = 18; // 错误，let 是关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> int = <span class="number">123</span> <span class="comment">// 不推荐，int 是保留字</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="常量"> 常量</span></h2>
<p>概念：使用 const 声明的变量称为“常量”。</p>
<p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。</p>
<p>命名规范：和变量一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p>
</blockquote>
<h2><span id="数据类型"> 数据类型</span></h2>
<blockquote>
<p>计算机世界中的万事成物都是数据。</p>
</blockquote>
<p>计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：</p>
<p>注：通过 typeof 关键字检测数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测 1 是什么类型数据，结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="数值类型"> 数值类型</span></h3>
<p>即我们数学中学习到的数字，可以是整数、小数、正数、负数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="number">100</span> <span class="comment">// 正整数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> price = <span class="number">12.345</span> <span class="comment">// 小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> temperature = -<span class="number">40</span> <span class="comment">// 负数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> score) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> price) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> temperature) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。</p>
<h3><span id="字符串类型"> 字符串类型</span></h3>
<p>通过单引号（ <code>''</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，<strong>单引号和双引号没有本质上的区别，推荐使用单引号。</strong></p>
<p>注意事项：</p>
<ol>
<li>无论单引号或是双引号必须成对使用</li>
<li><strong>单引号/双引号可以互相嵌套，但是不以自已嵌套自已</strong></li>
<li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user_name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 看上去是数字，但是用引号包裹了就成了字符串了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str1 = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> user_name) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> gender) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> str) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="布尔类型"> 布尔类型</span></h3>
<p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  pink老师帅不帅？回答 是 或 否</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isCool = <span class="literal">true</span> <span class="comment">// 是的，摔死了！</span></span></span><br><span class="line"><span class="language-javascript">    isCool = <span class="literal">false</span> <span class="comment">// 不，套马杆的汉子！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> isCool) <span class="comment">// 结果为 boolean</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="undefined"> undefined</span></h3>
<p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只声明了变量，并末赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：JavaScript 中变量的值决定了变量的数据类型。</strong></p>
<h2><span id="类型转换"> 类型转换</span></h2>
<blockquote>
<p>理解弱类型语言的特征，掌握显式类型转换的方法</p>
</blockquote>
<p>在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。</p>
<h3><span id="隐式转换"> 隐式转换</span></h3>
<p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 132</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后数值 13 减去 数值 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。</p>
<p>补充介绍模板字符串的拼接的使用</p>
<h3><span id="显式转换"> 显式转换</span></h3>
<p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p>
<h4><span id="number"> Number</span></h4>
<p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> f = <span class="number">8</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式将字符串 12 转换成数值 12</span></span></span><br><span class="line"><span class="language-javascript">    t = <span class="title class_">Number</span>(t)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测转换后的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof t);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并不是所有的值都可以被转成数值类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1><span id="javascript-基础-第2天"> JavaScript 基础 - 第2天</span></h1>
<blockquote>
<p>理解什么是流程控制，知道条件控制的种类并掌握其对应的语法规则，具备利用循环编写简易ATM取款机程序能力</p>
</blockquote>
<ul>
<li>运算符</li>
<li>语句</li>
<li>综合案例</li>
</ul>
<h2><span id="运算符"> 运算符</span></h2>
<h3><span id="算术运算符"> 算术运算符</span></h3>
<p>数字是用来计算的，比如：乘法 * 、除法 / 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p>
<p>算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>求和</td>
</tr>
<tr>
<td>-</td>
<td>求差</td>
</tr>
<tr>
<td>*</td>
<td>求积</td>
</tr>
<tr>
<td>/</td>
<td>求商</td>
</tr>
<tr>
<td><strong>%</strong></td>
<td>取模（取余数），开发中经常用于作为某个数字是否被整除</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：在计算失败时，显示的结果是 NaN （not a number）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算术运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> / <span class="number">2</span>) <span class="comment">//  4 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="number">10</span>)  <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + num)  <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 取模(取余数)  使用场景：  用来判断某个数是否能够被整除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>) <span class="comment">//  0  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span> % <span class="number">3</span>) <span class="comment">//  0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>) <span class="comment">//  2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>) <span class="comment">//  3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 注意事项 : 如果我们计算失败，则返回的结果是 NaN (not a number)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">2</span>)   <span class="comment">// pink老师2</span></span><br></pre></td></tr></table></figure>
<h3><span id="赋值运算符"> 赋值运算符</span></h3>
<p>赋值运算符：对变量进行赋值的运算符</p>
<p>=     将等号右边的值赋予给左边, 要求左边必须是一个容器</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>+=</td>
<td>加法赋值</td>
</tr>
<tr>
<td>-+</td>
<td>减法赋值</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值</td>
</tr>
<tr>
<td>%=</td>
<td>取余赋值</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="comment">// num = num + 1</span></span><br><span class="line"><span class="comment">// 采取赋值运算符</span></span><br><span class="line"><span class="comment">// num += 1</span></span><br><span class="line">num += <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="自增自减运算符"> 自增/自减运算符</span></h3>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>++</td>
<td>自增</td>
<td>变量自身的值加1，例如: x++</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>变量自身的值减1，例如: x–</td>
</tr>
</tbody>
</table>
<ol>
<li><ins>在前和</ins>在后在单独使用时二者并没有差别，而且一般开发中我们都是独立使用</li>
<li>++在后（后缀式）我们会使用更多</li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>只有变量能够使用自增和自减运算符</li>
<li><ins>、-- 可以在变量前面也可以在变量后面，比如: x</ins>  或者  ++x</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let num = 10</span></span><br><span class="line">    <span class="comment">// num = num + 1</span></span><br><span class="line">    <span class="comment">// num += 1</span></span><br><span class="line">    <span class="comment">// // 1. 前置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// ++i</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(++i + 1)</span></span><br><span class="line">    <span class="comment">// 2. 后置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// i++</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(i++ + 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 了解 </span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i++ + ++i + i)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="比较运算符"> 比较运算符</span></h3>
<p>使用场景：比较两个数据大小、是否相等，根据比较结果返回一个布尔值（true / false）</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;</td>
<td>左边是否大于右边</td>
</tr>
<tr>
<td>&lt;</td>
<td>左边是否小于右边</td>
</tr>
<tr>
<td>&gt;=</td>
<td>左边是否大于或等于右边</td>
</tr>
<tr>
<td>&lt;=</td>
<td>左边是否小于或等于右边</td>
</tr>
<tr>
<td>===</td>
<td>左右两边是否<code>类型</code>和<code>值</code>都相等（重点）</td>
</tr>
<tr>
<td>==</td>
<td>左右两边<code>值</code>是否相等</td>
</tr>
<tr>
<td>!=</td>
<td>左右值不相等</td>
</tr>
<tr>
<td>!==</td>
<td>左右两边是否不全等</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 比较运算符有隐式转换 把&#x27;2&#x27; 转换为 2  双等号 只判断值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// console.log(undefined === null)</span></span><br><span class="line">  <span class="comment">// === 全等 判断 值 和 数据类型都一样才行</span></span><br><span class="line">  <span class="comment">// 以后判断是否相等 请用 ===  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// NaN 不等于任何人，包括他自己</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> !== <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> != <span class="string">&#x27;2&#x27;</span>) <span class="comment">// false </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;aac&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="逻辑运算符"> 逻辑运算符</span></h3>
<p>使用场景：可以把多个布尔值放到一起运算，最终返回一个布尔值</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>名称</th>
<th>日常读法</th>
<th>特点</th>
<th>口诀</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>并且</td>
<td>符号两边有一个假的结果为假</td>
<td>一假则假</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
<td>或者</td>
<td>符号两边有一个真的结果为真</td>
<td>一真则真</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>取反</td>
<td>true变false  false变true</td>
<td>真变假，假变真</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>A &amp;&amp; B</th>
<th>A || B</th>
<th>!A</th>
</tr>
</thead>
<tbody>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 逻辑与 一假则假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    <span class="comment">// 逻辑或 一真则真</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">false</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    <span class="comment">// 逻辑非  取反</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">6</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num &gt; <span class="number">5</span> &amp;&amp; num &lt; <span class="number">10</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="运算符优先级"> 运算符优先级</span></h3>
<blockquote>
<p>逻辑运算符优先级： ！&gt; &amp;&amp; &gt;  ||</p>
</blockquote>
<h2><span id="语句"> 语句</span></h2>
<h3><span id="表达式和语句"> 表达式和语句</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131601402.png" alt="67101792498"></p>
<h3><span id="分支语句"> 分支语句</span></h3>
<p>分支语句可以根据条件判定真假，来选择性的执行想要的代码</p>
<p>分支语句包含：</p>
<ol>
<li>if分支语句（重点）</li>
<li>三元运算符</li>
<li>switch语句</li>
</ol>
<h4><span id="if-分支语句"> if 分支语句</span></h4>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为false，则不执行大括号里面代码</p>
<p>小括号内的结果若不是布尔类型时，会发生类型转换为布尔值，类似Boolean()</p>
<p>如果大括号只有一个语句，大括号可以省略，但是，俺们不提倡这么做~</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 单分支语句</span></span><br><span class="line">    <span class="comment">// if (false) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (3 &gt; 5) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (2 === &#x27;2&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//  1. 除了0 所有的数字都为真</span></span><br><span class="line">    <span class="comment">//   if (0) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// 2.除了 &#x27;&#x27; 所有的字符串都为真 true</span></span><br><span class="line">    <span class="comment">// if (&#x27;pink老师&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (&#x27;&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// // if (&#x27;&#x27;) console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 用户输入</span></span><br><span class="line">    <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 进行判断输出</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">700</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;恭喜考入黑马程序员&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4><span id="if双分支语句"> if双分支语句</span></h4>
<p>如果有两个条件的时候，可以使用 if else 双分支语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 1. 用户输入</span></span><br><span class="line">   <span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">   <span class="keyword">let</span> pwd = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 判断输出</span></span><br><span class="line">   <span class="keyword">if</span> (uname === <span class="string">&#x27;pink&#x27;</span> &amp;&amp; pwd === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;恭喜登录成功&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4><span id="if-多分支语句"> if 多分支语句</span></h4>
<p>使用场景： 适合于有多个条件的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 1. 用户输入</span></span><br><span class="line">   <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩：&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 判断输出</span></span><br><span class="line">   <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩优秀，宝贝，你是我的骄傲&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩良好，宝贝，你要加油哦~~&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩及格，宝贝，你很危险~&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩不及格，宝贝，我不想和你说话，我只想用鞭子和你说话~&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4><span id="三元运算符三元表达式"> 三元运算符（三元表达式）</span></h4>
<p><strong>使用场景</strong>： 一些简单的双分支，可以使用  三元运算符（三元表达式），写起来比 if  else双分支 更简单</p>
<p><strong>符号</strong>：? 与 : 配合使用</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> ： 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三元运算符（三元表达式）</span></span><br><span class="line"><span class="comment">// 1. 语法格式</span></span><br><span class="line"><span class="comment">// 条件 ? 表达式1 : 表达式2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 执行过程 </span></span><br><span class="line"><span class="comment">// 2.1 如果条件为真，则执行表达式1</span></span><br><span class="line"><span class="comment">// 2.2 如果条件为假，则执行表达式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 验证</span></span><br><span class="line"><span class="comment">// 5 &gt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt; <span class="number">3</span> ? <span class="string">&#x27;真的&#x27;</span> : <span class="string">&#x27;假的&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// let age = 18 </span></span><br><span class="line"><span class="comment">// age = age + 1</span></span><br><span class="line"><span class="comment">//  age++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 用户输入 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入一个数字:&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 判断输出- 小于10才补0</span></span><br><span class="line"><span class="comment">// num = num &lt; 10 ? 0 + num : num</span></span><br><span class="line">num = num &gt;= <span class="number">10</span> ? num : <span class="number">0</span> + num</span><br><span class="line"><span class="title function_">alert</span>(num)</span><br></pre></td></tr></table></figure>
<h4><span id="switch语句了解"> switch语句（了解）</span></h4>
<p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同</p>
<p>注意：</p>
<ol>
<li>switch case语句一般用于等值判断, if适合于区间判断</li>
<li>switchcase一般需要配合break关键字使用 没有break会造成case穿透</li>
<li>if 多分支语句开发要比switch更重要，使用也更多</li>
</ol>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch分支语句</span></span><br><span class="line"><span class="comment">// 1. 语法</span></span><br><span class="line"><span class="comment">// switch (表达式) &#123;</span></span><br><span class="line"><span class="comment">//   case 值1:</span></span><br><span class="line"><span class="comment">//     代码1</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   case 值2:</span></span><br><span class="line"><span class="comment">//     代码2</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   ...</span></span><br><span class="line"><span class="comment">//   default:</span></span><br><span class="line"><span class="comment">//     代码n</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是1&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是2&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是3&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有符合条件的&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4><span id="断点调试"> 断点调试</span></h4>
<p>**作用：**学习时可以帮助更好的理解代码运行，工作时可以更快找到bug</p>
<p>浏览器打开调试界面</p>
<ol>
<li>按F12打开开发者工具</li>
<li>点到源代码一栏 （ sources ）</li>
<li>选择代码文件</li>
</ol>
<p>**断点：**在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p>
<h3><span id="循环语句"> 循环语句</span></h3>
<p>使用场景：重复执行 指定的一段代码，比如我们想要输出10次 ‘我学的很棒’</p>
<p>学习路径：</p>
<p>1.while循环</p>
<p>2.for 循环（重点）</p>
<h4><span id="while循环"> while循环</span></h4>
<p>while :  在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">   <span class="comment">// 循环体    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while循环: 重复执行代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 需求: 利用循环重复打印3次 &#x27;月薪过万不是梦，毕业时候见英雄&#x27;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;月薪过万不是梦，毕业时候见英雄~&lt;br&gt;&#x27;</span>)</span><br><span class="line">  i++   <span class="comment">// 这里千万不要忘了变量自增否则造成死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>循环三要素：</p>
<p>1.初始值 （经常用变量）</p>
<p>2.终止条件</p>
<p>3.变量的变化量</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// // 1. 变量的起始值</span></span><br><span class="line">  <span class="comment">// let i = 1</span></span><br><span class="line">  <span class="comment">// // 2. 终止条件</span></span><br><span class="line">  <span class="comment">// while (i &lt;= 3) &#123;</span></span><br><span class="line">  <span class="comment">//   document.write(&#x27;我要循环三次 &lt;br&gt;&#x27;)</span></span><br><span class="line">  <span class="comment">//   // 3. 变量的变化量</span></span><br><span class="line">  <span class="comment">//   i++</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 1. 变量的起始值</span></span><br><span class="line">  <span class="keyword">let</span> end = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入次数:&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="comment">// 2. 终止条件</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= end) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我要循环三次 &lt;br&gt;&#x27;</span>)</span><br><span class="line">  <span class="comment">// 3. 变量的变化量</span></span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4><span id="中止循环"> 中止循环</span></h4>
<p><code>break</code>   中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）</p>
<p><code>continue</code>  中止本次循环，一般用于排除或者跳过某一个选项的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// while (i &lt;= 5) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(i)</span></span><br><span class="line">    <span class="comment">//   if (i === 3) &#123;</span></span><br><span class="line">    <span class="comment">//     break  // 退出循环</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">//   i++</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">      i++</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4><span id="无限循环"> 无限循环</span></h4>
<p>1.while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p>
<p>2.for(;😉 也可以来构造“无限”循环，同样需要使用break退出循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无限循环  </span></span><br><span class="line"><span class="comment">// 需求： 页面会一直弹窗询问你爱我吗？</span></span><br><span class="line"><span class="comment">// (1). 如果用户输入的是 &#x27;爱&#x27;，则退出弹窗</span></span><br><span class="line"><span class="comment">// (2). 否则一直弹窗询问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. while(true) 无限循环</span></span><br><span class="line"><span class="comment">// while (true) &#123;</span></span><br><span class="line"><span class="comment">//   let love = prompt(&#x27;你爱我吗?&#x27;)</span></span><br><span class="line"><span class="comment">//   if (love === &#x27;爱&#x27;) &#123;</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. for(;;) 无限循环</span></span><br><span class="line"><span class="keyword">for</span> (; ;) &#123;</span><br><span class="line">  <span class="keyword">let</span> love = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (love === <span class="string">&#x27;爱&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="综合案例-atm存取款机"> 综合案例-ATM存取款机</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131601403.png" alt="67101878155"></p>
<p>分析：</p>
<p>①：提示输入框写到循环里面（无限循环）</p>
<p>②：用户输入4则退出循环 break</p>
<p>③：提前准备一个金额预先存储一个数额 money</p>
<p>④：根据输入不同的值，做不同的操作</p>
<p>​     (1)  取钱则是减法操作， 存钱则是加法操作，查看余额则是直接显示金额</p>
<p>​     (2) 可以使用 if else if 多分支 来执行不同的操作</p>
<p>完整代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 1. 开始循环 输入框写到 循环里面</span></span><br><span class="line">  <span class="comment">// 3. 准备一个总的金额</span></span><br><span class="line">  <span class="keyword">let</span> money = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> re = +<span class="title function_">prompt</span>(<span class="string">`</span></span><br><span class="line"><span class="string">请您选择操作：</span></span><br><span class="line"><span class="string">1.存钱</span></span><br><span class="line"><span class="string">2.取钱</span></span><br><span class="line"><span class="string">3.查看余额</span></span><br><span class="line"><span class="string">4.退出</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">  <span class="comment">// 2. 如果用户输入的 4 则退出循环， break  写到if 里面，没有写到switch里面， 因为4需要break退出循环</span></span><br><span class="line">  <span class="keyword">if</span> (re === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 根据输入做操作</span></span><br><span class="line">  <span class="keyword">switch</span> (re) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="keyword">let</span> cun = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入存款金额&#x27;</span>)</span><br><span class="line">      money = money + cun</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="keyword">let</span> qu = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入取款金额&#x27;</span>)</span><br><span class="line">      money = money - qu</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`您的银行卡余额是<span class="subst">$&#123;money&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1><span id="javascript-基础-第3天"> JavaScript 基础-第3天</span></h1>
<p><strong>if 多分支语句和 switch的区别：</strong></p>
<ol>
<li>
<p>共同点</p>
<ul>
<li>都能实现多分支选择， 多选1</li>
<li>大部分情况下可以互换</li>
</ul>
</li>
<li>
<p>区别：</p>
<ul>
<li>switch…case语句通常处理case为比较<strong>确定值</strong>的情况，而if…else…语句更加灵活，通常用于<strong>范围判断</strong>(大于，等于某个范围)。</li>
<li>switch 语句进行判断后直接执行到程序的语句，效率更高，而if…else语句有几种判断条件，就得判断多少次</li>
<li>switch 一定要注意 必须是 ===  全等，一定注意 数据类型，同时注意break否则会有穿透效果</li>
<li>结论：
<ul>
<li>当分支比较少时，if…else语句执行效率高。</li>
<li>当分支比较多时，switch语句执行效率高，而且结构更清晰。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2><span id="for-语句"> for 语句</span></h2>
<blockquote>
<p>掌握 for 循环语句，让程序具备重复执行能力</p>
</blockquote>
<p><code>for</code> 是 JavaScript 提供的另一种循环控制的话句，它和 <code>while</code> 只是语法上存在差异。</p>
<h3><span id="for语句的基本使用"> for语句的基本使用</span></h3>
<ol>
<li>实现循环的 3 要素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法格式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// for(起始值; 终止条件; 变化量) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // 要重复执行的代码</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 示例：在网页中输入标题标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 起始值为 1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变化量 i++</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 终止条件 i &lt;= 6</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;h<span class="subst">$&#123;i&#125;</span>&gt;循环控制，即重复执行&lt;h<span class="subst">$&#123;i&#125;</span>&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>变化量和死循环，<code>for</code> 循环和 <code>while</code> 一样，如果不合理设置增量和终止条件，便会产生死循环。</p>
</li>
<li>
<p>跳出和终止循环</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. continue </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">continue</span>  <span class="comment">// 结束本次循环，继续下一次循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. break</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>  <span class="comment">// 退出结束整个循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li><code>JavaScript</code> 提供了多种语句来实现循环控制，但无论使用哪种语句都离不开循环的3个特征，即起始值、变化量、终止条件，做为初学者应着重体会这3个特征，不必过多纠结三种语句的区别。</li>
<li>起始值、变化量、终止条件，由开发者根据逻辑需要进行设计，规避死循环的发生。</li>
<li>当如果明确了循环的次数的时候推荐使用<code>for</code>循环,当不明确循环的次数的时候推荐使用<code>while</code>循环</li>
</ul>
<blockquote>
<p>注意：<code>for</code> 的语法结构更简洁，故 <code>for</code> 循环的使用频次会更多。</p>
</blockquote>
<h3><span id="循环嵌套"> 循环嵌套</span></h3>
<p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131510070.gif" alt="universe"></p>
<p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131510057.png" alt="64791826139"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 1. 外面的循环 记录第n天 </span><br><span class="line">for (let i = 1; i &lt; 4; i++) &#123;</span><br><span class="line">    document.write(`第$&#123;i&#125;天 <span class="tag">&lt;<span class="name">br</span>&gt;</span>`)</span><br><span class="line">    // 2. 里层的循环记录 几个单词</span><br><span class="line">    for (let j = 1; j &lt; 6; j++) &#123;</span><br><span class="line">        document.write(`记住第$&#123;j&#125;个单词<span class="tag">&lt;<span class="name">br</span>&gt;</span>`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记住，外层循环循环一次，里层循环循环全部</p>
<h4><span id="倒三角"> 倒三角</span></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;★&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131510056.png" alt="64791867895"></p>
<h4><span id="九九乘法表"> 九九乘法表</span></h4>
<p>样式css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">4</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="comment">// 只需要吧 ★ 换成  1 x 1 = 1   </span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt; <span class="subst">$&#123;j&#125;</span> x <span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;j * i&#125;</span> &lt;/div&gt;</span></span><br><span class="line"><span class="string">     `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131510059.png" alt="64791873467"></p>
<h2><span id="数组"> 数组</span></h2>
<blockquote>
<p>知道什么是数组及其应用的场景，掌握数组声明及访问的语法。</p>
</blockquote>
<h3><span id="数组是什么"> 数组是什么？</span></h3>
<p><strong>数组：</strong>(Array)是一种可以按顺序保存数据的数据类型</p>
<p>**使用场景：**如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便</p>
<h3><span id="数组的基本使用"> 数组的基本使用</span></h3>
<h4><span id="定义数组和数组单元"> 定义数组和数组单元</span></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法，使用 [] 来定义一个空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个空数组，然后赋值给变量 classes</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// let classes = [];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 定义非空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p>
<h4><span id="访问数组和数组索引"> 访问数组和数组索引</span></h4>
<p>使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。</p>
<p>我们将数据单元在数组中的编号称为索引值，也有人称其为下标。</p>
<p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从<code> 0</code> 开始的，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131523652.jpg" alt="array"></p>
<p>观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 访问数组，语法格式为：变量名[索引值]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">0</span>]) <span class="comment">// 结果为：小明</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">1</span>]) <span class="comment">// 结果为：小刚</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">4</span>]) <span class="comment">// 结果为：小米</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 通过索引值还可以为数组单重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">3</span>]) <span class="comment">// 结果为：小丽</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 重新为索引值为 3 的单元赋值</span></span></span><br><span class="line"><span class="language-javascript">  classes[<span class="number">3</span>] = <span class="string">&#x27;小小丽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">wirte</span>(classes[<span class="number">3</span>]); <span class="comment">// 结果为： 小小丽</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="数据单元值类型"> 数据单元值类型</span></h4>
<p>数组做为数据的集合，它的单元值可以是任意数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 6. 数组单值类型可以是任意数据类型</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// a) 数组单元值的类型为字符类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// b) 数组单元值的类型为数值类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> scores = [<span class="number">78</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">62</span>, <span class="number">75</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// c) 混合多种类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> mixin = [<span class="literal">true</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&#x27;hello&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="数组长度属性"> 数组长度属性</span></h4>
<p>重申一次，数组在 JavaScript 中并不是新的数据类型，它属于对象类型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 数组对应着一个 length 属性，它的含义是获取数组的长度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="操作数组"> 操作数组</span></h3>
<p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p>
<ol>
<li>push 动态向数组的尾部添加一个单元</li>
<li>unshit 动态向数组头部添加一个单元</li>
<li>pop 删除最后一个单元</li>
<li>shift 删除第一个单元</li>
<li>splice 动态删除任意单元</li>
</ol>
<p>使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. push 动态向数组的尾部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Nodejs&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. unshit 动态向数组头部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">unshift</span>(<span class="string">&#x27;VS Code&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. splice 动态删除任意单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 从索引值为2的位置开始删除1个单元</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 4. pop 删除最后一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">pop</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 5. shift 删除第一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">shift</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1><span id="javascript-基础-第4天"> JavaScript 基础 - 第4天</span></h1>
<blockquote>
<p>理解封装的意义，能够通过函数的声明实现逻辑的封装，知道对象数据类型的特征，结合数学对象实现简单计算功能。</p>
</blockquote>
<ul>
<li>理解函数的封装的特征</li>
<li>掌握函数声明的语法</li>
<li>理解什么是函数的返回值</li>
<li>知道并能使用常见的内置函数</li>
</ul>
<h2><span id="函数"> 函数</span></h2>
<blockquote>
<p>理解函数的封装特性，掌握函数的语法规则</p>
</blockquote>
<h3><span id="声明和调用"> 声明和调用</span></h3>
<p>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于精简代码方便复用。</p>
<h4><span id="声明定义"> 声明（定义）</span></h4>
<p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311131510382.jpg" alt="function"></p>
<h4><span id="调用"> 调用</span></h4>
<p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和调用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数名()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复被调用，多少次都可以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。</p>
</blockquote>
<p>小案例： 小星星</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 函数声明</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// document.write(&#x27;hai~&#x27;)</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`**&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`***&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`****&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*****&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`******&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*******&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`********&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*********&lt;br&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 函数调用</span></span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="参数"> 参数</span></h3>
<p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p>
<p>声明（定义）一个功能为打招呼的函数</p>
<ul>
<li>传入数据列表</li>
<li>声明这个函数需要传入几个数据</li>
<li>多个数据用逗号隔开</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个功能为打招呼的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function sayHi() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;嗨~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sayHi()</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个函数似乎没有什么价值，除非能够向不同的人打招呼</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这就需要借助参数来实现了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数 name 可以被理解成是一个变量</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用 sayHi 函数，括号中多了 &#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小明&#x27;</span>)<span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 再次调用 sayHi 函数，括号中多了 &#x27;小红&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>) <span class="comment">// 结果为 小红</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 <code>,</code> 分隔</li>
<li>调用函数传递的实参要与形参的顺序一致</li>
</ol>
<h4><span id="形参和实参"> 形参和实参</span></h4>
<p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p>
<p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p>
<p>形参可以理解为是在这个函数内声明的变量（比如 num1 = 10）实参可以理解为是给这个变量赋值</p>
<p>开发中尽量保持形参和实参个数一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个计算任意两数字和的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 形参 x 和 y 分别表示任意两个数字，它们是两个变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，传入两个具体的数字做为实参</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 10 赋值给了形参 x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 5  赋值给了形参 y</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">count</span>(<span class="number">10</span>, <span class="number">5</span>); <span class="comment">// 结果为 15</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="返回值"> 返回值</span></h3>
<p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数返回值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义求和函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> s = a + b</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// s 即为 a + b 的结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过 return 将 s 传递到外部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> s</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，如果一个函数有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 那么可将这个返回值赋值给外部的任意变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> total = <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>在函数体中使用return 关键字能将内部的执行结果交给函数外部使用</li>
<li>函数内部只能出现1 次 return，并且 return 下一行代码不会再被执行，所以return 后面的数据不要换行写</li>
<li>return会立即结束当前函数</li>
<li>函数可以没有return，这种情况默认返回值为 undefined</li>
</ol>
<h3><span id="作用域"> 作用域</span></h3>
<p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>
<p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<h4><span id="全局作用域"> 全局作用域</span></h4>
<p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p>
<p>处于全局作用域内的变量，称为全局变量</p>
<h4><span id="局部作用域"> 局部作用域</span></h4>
<p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p>
<p>处于局部作用域内的变量称为局部变量</p>
<blockquote>
<p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p>
<p>但是有一种情况，函数内部的形参可以看做是局部变量。</p>
</blockquote>
<h3><span id="匿名函数"> 匿名函数</span></h3>
<p>函数可以分为具名函数和匿名函数</p>
<p>匿名函数：没有名字的函数,无法直接使用。</p>
<h4><span id="函数表达式"> 函数表达式</span></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>
<h4><span id="立即执行函数"> 立即执行函数</span></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; xxx  &#125;)();</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;xxxx&#125;());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无需调用，立即执行，其实本质已经调用了</p>
<p>多个立即执行函数之间用分号隔开</p>
</blockquote>
<p>​		在能够访问到的情况下 先局部 局部没有在找全局</p>
<h1><span id="javascript-基础-第5天"> JavaScript 基础 - 第5天</span></h1>
<blockquote>
<p>知道对象数据类型的特征，能够利用数组对象渲染页面</p>
</blockquote>
<ul>
<li>理解什么是对象，掌握定义对象的语法</li>
<li>掌握数学对象的使用</li>
</ul>
<h2><span id="对象"> 对象</span></h2>
<blockquote>
<p>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。</p>
</blockquote>
<h3><span id="语法"> 语法</span></h3>
<p>声明一个对象类型的变量与之前声明一个数值或字符串类型的变量没有本质上的区别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明字符串类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明数值类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">199</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明对象类型变量，使用一对花括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// user 便是一个对象了，目前它是一个空对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="属性和访问"> 属性和访问</span></h3>
<p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p>
<ol>
<li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>属性就是依附在对象上的变量</li>
<li>属性名可以使用 <code>&quot;&quot;</code> 或 <code>''</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 或 <code>[]</code> 获得对象中属性对应的值，我称之为属性访问。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人性别</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 结果为 男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的身高</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;stature&#x27;</span>]) <span class="comment">// 结果为 185</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 或者</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">stature</span>) <span class="comment">// 结果同为 185</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>扩展：也可以动态为对象添加属性，动态添加与直接定义是一样的，只是语法上更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加与直接定义是一样的，只是语法上更灵活</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="方法和调用"> 方法和调用</span></h3>
<p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p>
<ol>
<li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>方法是依附在对象中的函数</li>
<li>方法名可以使用 <code>&quot;&quot;</code> 或 <code>''</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>声明对象，并添加了若干方法后，可以使用 <code>.</code> 或 <code>[]</code> 调用对象中函数，我称之为方法调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中 singing 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">singing</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中的 run 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">run</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>扩展：也可以动态为对象添加方法，动态添加与直接定义是一样的，只是语法上更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性，也没有任何方法）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加方法</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动一点距离...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p>
<h3><span id="null"> null</span></h3>
<p>null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p>
<h4><span id="遍历对象"> 遍历对象</span></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// k 属性名  字符串  带引号    obj.&#x27;uname&#x27;     k ===  &#x27;uname&#x27;</span></span><br><span class="line">    <span class="comment">// obj[k]  属性值    obj[&#x27;uname&#x27;]   obj[k]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for in 不提倡遍历数组 因为 k 是 字符串</p>
<h2><span id="内置对象"> 内置对象</span></h2>
<p>回想一下我们曾经使用过的 <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code>。</p>
<p>除了 <code>console</code> 对象外，JavaScritp 还有其它的内置的对象</p>
<h3><span id="math"> Math</span></h3>
<p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p>
<h4><span id="属性"> 属性</span></h4>
<ul>
<li>Math.PI，获取圆周率</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br></pre></td></tr></table></figure>
<h4><span id="方法"> 方法</span></h4>
<ul>
<li>Math.random，生成 0 到 1 间的随机数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0 ~ 1 之间的随机数, 包含 0 不包含 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.ceil，数字向上取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分加1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">3.4</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.floor，数字向下取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分不变</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.68</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.round，四舍五入取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取整，四舍五入原则</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">5.46539</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.849</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.max，在一组数中找出最大的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.min，在一组数中找出最小的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">24</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">21</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.pow，幂方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求某个数的多少次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>, <span class="number">2</span>) <span class="comment">// 求 4 的 2 次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 求 2 的 3 次方</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Math.sqrt，平方根</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求某数的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p>数学对象提供了比较多的方法，这里不要求强记，通过演示数学对象的使用，加深对对象的理解。</p>
<p>复习：</p>
<p>splice() 方法用于添加或删除数组中的元素。</p>
<p>**注意：**这种方法会改变原始数组。</p>
<ol>
<li><strong>删除数组：</strong></li>
</ol>
<p>splice(起始位置， 删除的个数)</p>
<p>比如：1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// 删除green元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&#x27;red, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>添加元素</strong></li>
</ol>
<p>splice(起始位置，删除个数，添加数组元素)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="comment">//arr.splice(1, 0, &#x27;pink&#x27;) // 在索引号是1的位置添加 pink</span></span><br><span class="line"><span class="comment">//console.log(arr) // [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;hotpink&#x27;</span>) <span class="comment">// 在索引号是1的位置添加 pink  hotpink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;hotpink&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure>
<h1><span id="web-apis-第1天笔记"> Web APIs - 第1天笔记</span></h1>
<blockquote>
<p>了解 DOM 的结构并掌握其基本的操作，体验 DOM 的在开发中的作用</p>
</blockquote>
<ul>
<li>知道 ECMAScript 与 JavaScript 的关系</li>
<li>了解 DOM 的相关概念及DOM 的本质是一个对象</li>
<li>掌握查找节点的基本方法</li>
<li>掌握节点属性和文本的操作</li>
<li>能够使用间歇函数创建定时任务</li>
</ul>
<h2><span id="介绍"> 介绍</span></h2>
<blockquote>
<p>知道 ECMAScript 与 JavaScript 的关系，Web APIs 是浏览器扩展的功能。</p>
</blockquote>
<p>严格意义上讲，我们在 JavaScript 阶段学习的知识绝大部分属于 ECMAScript 的知识体系，ECMAScript 简称 ES 它提供了一套语言标准规范，如变量、数据类型、表达式、语句、函数等语法规则都是由 ECMAScript 规定的。浏览器将 ECMAScript 大部分的规范加以实现，并且在此基础上又扩展一些实用的功能，这些被扩展出来的内容我们称为 Web APIs。</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171729802.png" alt="guide"></p>
<p>ECMAScript 运行在浏览器中然后再结合 Web APIs 才是真正的 JavaScript，Web APIs 的核心是 DOM 和 BOM。</p>
<p>扩展阅读：ECMAScript 规范在不断的更新中，存在多个不同的版本，早期的版本号采用数字顺序编号如 ECMAScript3、ECMAScript5，后来由于更新速度较快便采用年份做为版本号，如 ECMAScript2017、ECMAScript2018 这种格式，ECMAScript6 是 2015 年发布的，常叫做 EMCAScript2015。</p>
<p>关于 JavaScript 历史的<a href="https://javascript.ruanyifeng.com/introduction/history.html">扩展阅读</a>。</p>
<blockquote>
<p>知道 DOM 相关的概念，建立对 DOM 的初步认识，学习 DOM 的基本操作，体会 DOM 的作用</p>
</blockquote>
<p>DOM（Document Object Model）是将整个 HTML 文档的每一个标签元素视为一个对象，这个对象下包含了许多的属性和方法，通过操作这些属性或者调用这些方法实现对 HTML 的动态更新，为实现网页特效以及用户交互提供技术支撑。</p>
<p>简言之 DOM 是用来动态修改 HTML 的，其目的是开发网页特效及用户交互。</p>
<p>观察一个小例子：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171729803.gif" alt="demo"></p>
<p>上述的例子中当用户分分别点击【开始】或【结束】按钮后，通过右侧调试窗口可以观察到 html 标签的内容在不断的发生改变，这便是通过 DOM 实现的。</p>
<h3><span id="概念"> 概念</span></h3>
<h4><span id="dom-树"> DOM 树</span></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  文本</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>链接名<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如下图所示，将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树，<strong>文档树直观的体现了标签与标签之间的关系。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171729804.jpg" alt="dom"></p>
<h4><span id="dom-节点"> DOM 节点</span></h4>
<p>节点是文档树的组成部分，<strong>每一个节点都是一个 DOM 对象</strong>，主要分为元素节点、属性节点、文本节点等。</p>
<ol>
<li>【元素节点】其实就是 HTML 标签，如上图中 <code>head</code>、<code>div</code>、<code>body</code> 等都属于元素节点。</li>
<li>【属性节点】是指 HTML 标签中的属性，如上图中 <code>a</code> 标签的 <code>href</code> 属性、<code>div</code> 标签的 <code>class</code> 属性。</li>
<li>【文本节点】是指 HTML 标签的文字内容，如 <code>title</code> 标签中的文字。</li>
<li>【根节点】特指 <code>html</code> 标签。</li>
<li>其它…</li>
</ol>
<h4><span id="document"> document</span></h4>
<p><code>document</code> 是 JavaScript 内置的专门用于 DOM 的对象，该对象包含了若干的属性和方法，<code>document</code> 是学习 DOM 的核心。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// document 是内置的对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(typeof document);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 通过 document 获取根节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>); <span class="comment">// 对应 html 标签</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 通过 document 节取 body 节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>); <span class="comment">// 对应 body 标签</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. 通过 document.write 方法向网页输出内容	</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述列举了 <code>document</code> 对象的部分属性和方法，我们先对 <code>document</code> 有一个整体的认识。</p>
<h2><span id="获取dom对象"> 获取DOM对象</span></h2>
<ol>
<li>querySelector   满足条件的第一个元素</li>
<li>querySelectorAll  满足条件的元素集合 返回伪数组</li>
<li>了解其他方式
<ol>
<li>getElementById</li>
<li>getElementsByTagName</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM - 查找节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>查找元素类型节点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>从整个 DOM 树中查找 DOM 节点是学习 DOM 的第一个步骤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  	<span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)  <span class="comment">// 获取第一个p元素</span></span></span><br><span class="line"><span class="language-javascript">  	<span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)  <span class="comment">// 获取所有li元素</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>document.getElementById 专门获取元素类型节点，根据标签的 <code>id</code>  属性查找</li>
<li>任意 DOM 对象都包含 nodeType 属性，用来检检测节点类型</li>
</ul>
<h2><span id="操作元素内容"> 操作元素内容</span></h2>
<p>通过修改 DOM 的文本内容，动态改变网页的内容。</p>
<ol>
<li><code>innerText</code> 将文本内容添加/更新到任意标签位置，<strong>文本中包含的标签不会被解析。</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// innerText 将文本内容添加/更新到任意标签位置</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> intro = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// intro.innerText = &#x27;嗨~ 我叫李雷！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// intro.innerText = &#x27;&lt;h4&gt;嗨~ 我叫李雷！&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>innerHTML</code> 将文本内容添加/更新到任意标签位置，<strong>文本中包含的标签会被解析。</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// innerHTML 将文本内容添加/更新到任意标签位置</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> intro = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  intro.<span class="property">innerHTML</span> = <span class="string">&#x27;嗨~ 我叫韩梅梅！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  intro.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h4&gt;嗨~ 我叫韩梅梅！&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：如果文本内容中包含 <code>html</code> 标签时推荐使用 <code>innerHTML</code>，否则建议使用 <code>innerText</code> 属性。</p>
<h2><span id="操作元素属性"> 操作元素属性</span></h2>
<p>有3种方式可以实现对属性的修改：</p>
<h4><span id="常用属性修改"> 常用属性修改</span></h4>
<ol>
<li>直接能过属性名修改，最简洁的语法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 获取 img 对应的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pic&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 2. 修改属性</span></span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">src</span> = <span class="string">&#x27;./images/lion.webp&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">width</span> = <span class="number">400</span>;</span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">alt</span> = <span class="string">&#x27;图片不见了...&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="控制样式属性"> 控制样式属性</span></h4>
<ol>
<li>应用【修改样式】，通过修改行内样式 <code>style</code> 属性，实现对样式的动态修改。</li>
</ol>
<p>通过元素节点获得的 <code>style</code> 属性本身的数据类型也是对象，如 <code>box.style.color</code>、<code>box.style.width</code> 分别用来获取元素节点 CSS 样式的 <code>color</code> 和 <code>width</code> 的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习 - 修改样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;300px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// css 属性的 - 连接符与 JavaScript 的 减运算符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 冲突，所以要改成驼峰法</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>任何标签都有 <code>style</code> 属性，通过 <code>style</code> 属性可以动态更改网页标签的样式，如要遇到 <code>css</code> 属性中包含字符 <code>-</code> 时，要将 <code>-</code> 去掉并将其后面的字母改成大写，如 <code>background-color</code> 要写成 <code>box.style.backgroundColor</code></p>
<ol start="2">
<li>操作类名(className) 操作CSS</li>
</ol>
<p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习 - 修改样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pink</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">className</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<p>1.由于class是关键字, 所以使用className去代替</p>
<p>2.className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</p>
</blockquote>
<ol start="3">
<li>通过 classList 操作类控制CSS</li>
</ol>
<p>为了解决className 容易覆盖以前的类名，我们可以通过classList方式追加和删除类名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let box = document.querySelector(&#x27;css选择器&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// add是个方法 添加  追加</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// box.classList.add(&#x27;active&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// remove() 移除 类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// box.classList.remove(&#x27;one&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 切换类</span></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="操作表单元素属性"> 操作表单元素属性</span></h4>
<p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p>
<p>正常的有属性有取值的跟其他的标签属性没有任何区别</p>
<p>获取:DOM对象.属性名</p>
<p>设置:DOM对象.属性名= 新值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 取值或者设置值  得到input里面的值可以用 value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(input.value)</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&#x27;小米手机&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 启用按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// disabled 不可用   =  false  这样可以让按钮启用</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">disabled</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 勾选复选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.agree&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        checkbox.<span class="property">checked</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="自定义属性"> 自定义属性</span></h4>
<p>标准属性: 标签天生自带的属性 比如class id title等, 可以直接使用点语法操作比如： disabled、checked、selected</p>
<p>自定义属性：</p>
<p>在html5中推出来了专门的data-自定义属性</p>
<p>在标签上一律以data-开头</p>
<p>在DOM对象上一律以dataset对象方式获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 自定义属性 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 获取自定义属性值</span></span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="间歇函数"> 间歇函数</span></h2>
<blockquote>
<p>知道间歇函数的作用，利用间歇函数创建定时任务。</p>
</blockquote>
<p><code>setInterval</code> 是 JavaScript 中内置的函数，它的作用是间隔固定的时间自动重复执行另一个函数，也叫定时器函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 定义一个普通函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">repeat</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不知疲倦的执行下去....&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 使用 setInterval 调用 repeat 函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 间隔 1000 毫秒，重复调用 repeat</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(repeat, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="今日单词"> 今日单词</span></h2>
<table>
<thead>
<tr>
<th>单词</th>
<th>说明</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>setInterval</td>
<td>定时器</td>
<td>setInterval(repeat, 1000)</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1><span id="web-apis-第2天"> Web APIs - 第2天</span></h1>
<blockquote>
<p>学会通过为DOM注册事件来实现可交互的网页特效。</p>
</blockquote>
<ul>
<li>能够判断函数运行的环境并确字 this 所指代的对象</li>
<li>理解事件的作用，知道应用事件的 3 个步骤</li>
</ul>
<blockquote>
<p>学习会为 DOM 注册事件，实现简单可交互的网页特交。</p>
</blockquote>
<h2><span id="事件"> 事件</span></h2>
<p>事件是编程语言中的术语，它是用来描述程序的行为或状态的，<strong>一旦行为或状态发生改变，便立即调用一个函数。</strong></p>
<p>例如：用户使用【鼠标点击】网页中的一个按钮、用户使用【鼠标拖拽】网页中的一张图片</p>
<h3><span id="事件监听"> 事件监听</span></h3>
<p>结合 DOM 使用事件时，需要为 DOM 对象添加事件监听，等待事件发生（触发）时，便立即调用一个函数。</p>
<p><code>addEventListener</code> 是 DOM 对象专门用来添加事件监听的方法，它的两个参数分别为【事件类型】和【事件回调】。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件监听<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件监听<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span>为 DOM 元素添加事件监听，等待事件发生，便立即执行一个函数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击改变文字颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取 button 对应的 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;等待事件被触发...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 改变 p 标签的文字颜色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      text.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 只要用户点击了按钮，事件便触发了！！！</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>完成事件监听分成3个步骤：</p>
<ol>
<li>获取 DOM 元素</li>
<li>通过 <code>addEventListener</code> 方法为 DOM 节点添加事件监听</li>
<li>等待事件触发，如用户点击了某个按钮时便会触发 <code>click</code> 事件类型</li>
<li>事件触发后，相对应的回调函数会被执行</li>
</ol>
<p>大白话描述：所谓的事件无非就是找个机会（事件触发）调用一个函数（回调函数）。</p>
<h3><span id="事件类型"> 事件类型</span></h3>
<p><code>click</code> 译成中文是【点击】的意思，它的含义是监听（等着）用户鼠标的单击操作，除了【单击】还有【双击】<code>dblclick</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 双击事件类型</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dblclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;等待事件被触发...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变 p 标签的文字颜色</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    text.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 只要用户双击击了按钮，事件便触发了！！！</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：【事件类型】决定了事件被触发的方式，如 <code>click</code> 代表鼠标单击，<code>dblclick</code> 代表鼠标双击。</p>
<h3><span id="事件处理程序"> 事件处理程序</span></h3>
<p><code>addEventListener</code> 的第2个参数是函数，这个函数会在事件被触发时立即被调用，在这个函数中可以编写任意逻辑的代码，如改变 DOM 文本颜色、文本内容等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 双击事件类型</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dblclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;等待事件被触发...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变 p 标签的文字颜色</span></span></span><br><span class="line"><span class="language-javascript">    text.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变 p 标签的文本内容</span></span></span><br><span class="line"><span class="language-javascript">    text.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;20px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：【事件处理程序】决定了事件触发后应该执行的逻辑。</p>
<h2><span id="事件类型"> 事件类型</span></h2>
<p>将众多的事件类型分类可分为：鼠标事件、键盘事件、表单事件、焦点事件等，我们逐一展开学习。</p>
<h3><span id="鼠标事件"> 鼠标事件</span></h3>
<p>鼠标事件是指跟鼠标操作相关的事件，如单击、双击、移动等。</p>
<ol>
<li>`mouseenter 监听鼠标是否移入 DOM 元素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>鼠标事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>监听与鼠标相关的操作<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需要事件监听的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听鼠标是移入当前 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 修改文本内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">innerText</span> = <span class="string">&#x27;鼠标移入了...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 修改光标的风格</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&#x27;move&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>`mouseleave 监听鼠标是否移出 DOM 元素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>鼠标事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>监听与鼠标相关的操作<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需要事件监听的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听鼠标是移出当前 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 修改文本内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">innerText</span> = <span class="string">&#x27;鼠标移出了...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="键盘事件"> 键盘事件</span></h3>
<p>keydown   键盘按下触发<br>
keyup   键盘抬起触发</p>
<h3><span id="焦点事件"> 焦点事件</span></h3>
<p>focus  获得焦点</p>
<p>blur 失去焦点</p>
<h3><span id="文本框输入事件"> 文本框输入事件</span></h3>
<p>input</p>
<h2><span id="事件对象"> 事件对象</span></h2>
<p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取 .box 元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;任意事件类型被触发后，相关信息会以对象形式被记录下来...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 事件回调函数的第1个参数即所谓的事件对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>事件回调函数的【第1个参数】即所谓的事件对象，通常习惯性的将这个对数命名为 <code>event</code>、<code>ev</code> 、<code>ev</code> 。</p>
<p>接下来简单看一下事件对象中包含了哪些有用的信息：</p>
<ol>
<li><code>ev.type</code> 当前事件的类型</li>
<li><code>ev.clientX/Y</code> 光标相对浏览器窗口的位置</li>
<li><code>ev.offsetX/Y</code> 光标相于当前 DOM 元素的位置</li>
</ol>
<p>注：在事件回调函数内部通过 window.event 同样可以获取事件对象。</p>
<h2><span id="环境对象"> 环境对象</span></h2>
<blockquote>
<p>能够分析判断函数运行在不同环境中 this 所指代的对象。</p>
</blockquote>
<p>环境对象指的是函数内部特殊的变量 <code>this</code> ，它代表着当前函数运行时所处的环境。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this 是一个变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明一个对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sayHi</span>: sayHi <span class="comment">// 此处把 sayHi 函数，赋值给 sayHi 属性</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sayHi</span>: sayHi</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 直接调用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>() <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">sayHi</span>() <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 做为对象方法调用</span></span></span><br><span class="line"><span class="language-javascript">  user.<span class="title function_">sayHi</span>()<span class="comment">// user</span></span></span><br><span class="line"><span class="language-javascript">	person.<span class="title function_">sayHi</span>()<span class="comment">// person</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ol>
<li><code>this</code> 本质上是一个变量，数据类型为对象</li>
<li>函数的调用方式不同 <code>this</code> 变量的值也不同</li>
<li>【谁调用 <code>this</code> 就是谁】是判断 <code>this</code> 值的粗略规则</li>
<li>函数直接调用时实际上 <code>window.sayHi()</code> 所以 <code>this</code> 的值为 <code>window</code></li>
</ol>
<h2><span id="回调函数"> 回调函数</span></h2>
<p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明 foo 函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通的值做为参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>(<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>([<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数也能当参数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 函数也可以做为参数！！！！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>(bar);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>函数 <code>bar</code> 做参数传给了 <code>foo</code> 函数，<code>bar</code> 就是所谓的回调函数了！！！</p>
<p>我们回顾一下间歇函数 <code>setInterval</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用定时器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(fn, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>fn</code> 函数做为参数传给了 <code>setInterval</code> ，这便是回调函数的实际应用了，结合刚刚学习的函数表达式上述代码还有另一种更常见写法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用定时器，匿名函数做为参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ol>
<li>回调函数本质还是函数，只不过把它当成参数使用</li>
<li>使用匿名函数做为回调函数比较常见</li>
</ol>
<h1><span id="web-apis-第3天"> Web APIs - 第3天</span></h1>
<blockquote>
<p>进一步学习 事件进阶，实现更多交互的网页特效，结合事件流的特征优化事件执行的效率</p>
</blockquote>
<ul>
<li>掌握阻止事件冒泡的方法</li>
<li>理解事件委托的实现原理</li>
</ul>
<h2><span id="事件流"> 事件流</span></h2>
<p>事件流是对事件执行过程的描述，了解事件的执行过程有助于加深对事件的理解，提升开发实践中对事件运用的灵活度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171730507.png" alt="event"></p>
<p>如上图所示，任意事件被触发时总会经历两个阶段：【捕获阶段】和【冒泡阶段】。</p>
<p>简言之，捕获阶段是【从父到子】的传导过程，冒泡阶段是【从子向父】的传导过程。</p>
<h3><span id="捕获和冒泡"> 捕获和冒泡</span></h3>
<p>了解了什么是事件流之后，我们来看事件流是如何影响事件执行的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件流<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取嵌套的3个节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// html 元素添加事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// body 元素添加事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 外层的盒子添加事件</span></span></span><br><span class="line"><span class="language-javascript">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中间的盒子添加事件</span></span></span><br><span class="line"><span class="language-javascript">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 内层的盒子添加事件</span></span></span><br><span class="line"><span class="language-javascript">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行上述代码后发现，当单击事件触发时，其祖先元素的单击事件也【相继触发】，这是为什么呢？</p>
<p>结合事件流的特征，我们知道当某个元素的事件被触发时，事件总是会先经过其祖先才能到达当前元素，然后再由当前元素向祖先传递，事件在流动的过程中遇到相同的事件便会被触发。</p>
<p>再来关注一个细节就是事件相继触发的【执行顺序】，事件的执行顺序是可控制的，即可以在捕获阶段被执行，也可以在冒泡阶段被执行。</p>
<p>如果事件是在冒泡阶段执行的，我们称为冒泡模式，它会先执行子盒子事件再去执行父盒子事件，默认是冒泡模式。</p>
<p>如果事件是在捕获阶段执行的，我们称为捕获模式，它会先执行父盒子事件再去执行子盒子事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件流<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取嵌套的3个节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 外层的盒子</span></span></span><br><span class="line"><span class="language-javascript">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>) <span class="comment">// true 表示在捕获阶段执行事件</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中间的盒子</span></span></span><br><span class="line"><span class="language-javascript">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ol>
<li><code>addEventListener</code> 第3个参数决定了事件是在捕获阶段触发还是在冒泡阶段触发</li>
<li><code>addEventListener</code> 第3个参数为  <code>true</code> 表示捕获阶段触发，<code>false</code> 表示冒泡阶段触发，默认值为 <code>false</code></li>
<li>事件流只会在父子元素具有相同事件类型时才会产生影响</li>
<li>绝大部分场景都采用默认的冒泡模式（其中一个原因是早期 IE 不支持捕获）</li>
</ol>
<h3><span id="阻止冒泡"> 阻止冒泡</span></h3>
<p>阻止冒泡是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>阻止冒泡<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>阻止冒泡是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取嵌套的3个节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 外层的盒子</span></span></span><br><span class="line"><span class="language-javascript">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中间的盒子</span></span></span><br><span class="line"><span class="language-javascript">    inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 阻止事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">      ev.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 内层的盒子</span></span></span><br><span class="line"><span class="language-javascript">    child.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 借助事件对象，阻止事件向上冒泡</span></span></span><br><span class="line"><span class="language-javascript">      ev.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：事件对象中的 <code>ev.stopPropagation</code> 方法，专门用来阻止事件冒泡。</p>
<blockquote>
<p>鼠标经过事件：</p>
<p>mouseover 和 mouseout 会有冒泡效果</p>
<p>mouseenter  和 mouseleave   没有冒泡效果 (推荐)</p>
</blockquote>
<h2><span id="事件委托"> 事件委托</span></h2>
<p>事件委托是利用事件流的特征解决一些现实开发需求的知识技巧，主要的作用是提升程序效率。</p>
<p>大量的事件监听是比较耗费性能的，如下代码所示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 假设页面中有 10000 个 button 元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= buttons.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为 10000 个 button 元素添加了事件</span></span></span><br><span class="line"><span class="language-javascript">    buttons.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 省略具体执行逻辑...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用事件流的特征，可以对上述的代码进行优化，事件的的冒泡模式总是会将事件流向其父元素的，如果父元素监听了相同的事件类型，那么父元素的事件就会被触发并执行，正是利用这一特征对上述代码进行优化，如下代码所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 假设页面中有 10000 个 button 元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 假设上述的 10000 个 buttom 元素共同的祖先元素是 table</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> parents = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  parents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击任意子元素都会触发事件...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们的最终目的是保证只有点击 button 子元素才去执行事件的回调函数，如何判断用户点击是哪一个子元素呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171730507.png" alt="event"></p>
<p>事件对象中的属性 <code>target</code> 或 <code>srcElement</code>属性表示真正触发事件的元素，它是一个元素类型的节点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 假设页面中有 10000 个 button 元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 假设上述的 10000 个 buttom 元素共同的祖先元素是 table</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> parents = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;table&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  parents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(ev.target);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只有 button 元素才会真正去执行逻辑</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(ev.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 执行的逻辑</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优化过的代码只对祖先元素添加事件监听，相比对 10000 个元素添加事件监听执行效率要高许多！！！</p>
<h2><span id="其他事件"> 其他事件</span></h2>
<h3><span id="页面加载事件"> 页面加载事件</span></h3>
<p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p>
<p>有些时候需要等页面资源全部处理完了做一些事情</p>
<p><strong>事件名：load</strong></p>
<p>监听页面所有资源加载完毕：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3><span id="元素滚动事件"> 元素滚动事件</span></h3>
<p>滚动条在滚动的时候持续触发的事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3><span id="页面尺寸事件"> 页面尺寸事件</span></h3>
<p>会在窗口尺寸改变的时候触发事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2><span id="元素尺寸与位置"> 元素尺寸与位置</span></h2>
<p>获取元素的自身宽高、包含元素自身设置的宽高、padding、border</p>
<p>offsetWidth和offsetHeight</p>
<p>获取出来的是数值,方便计算</p>
<p>注意: 获取的是可视宽高, 如果盒子是隐藏的,获取的结果是0</p>
<h1><span id="web-apis-第4天"> Web APIs - 第4天</span></h1>
<blockquote>
<p>进一步学习 DOM 相关知识，实现可交互的网页特效</p>
</blockquote>
<ul>
<li>能够插入、删除和替换元素节点</li>
<li>能够依据元素节点关系查找节点</li>
</ul>
<h2><span id="日期对象"> 日期对象</span></h2>
<p>掌握 Date 日期对象的使用，动态获取当前计算机的时间。</p>
<p>ECMAScript 中内置了获取系统时间的对象 Date，使用 Date 时与之前学习的内置对象 console 和 Math 不同，它需要借助 new 关键字才能使用。</p>
<h3><span id="实例化"> 实例化</span></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 实例化</span></span><br><span class="line"><span class="comment">// const date = new Date(); // 系统默认时间</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2020-05-01&#x27;</span>) <span class="comment">// 指定时间</span></span><br><span class="line"><span class="comment">// date 变量即所谓的时间对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> date)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="方法"> 方法</span></h3>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 实例化</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// 2. 调用时间对象方法</span></span><br><span class="line"><span class="comment">// 通过方法分别获取年、月、日，时、分、秒</span></span><br><span class="line"><span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>(); <span class="comment">// 四位年份</span></span><br><span class="line"><span class="keyword">const</span> month = date.<span class="title function_">getMonth</span>(); <span class="comment">// 0 ~ 11</span></span><br></pre></td></tr></table></figure>
<p>getFullYear 获取四位年份</p>
<p>getMonth 获取月份，取值为 0 ~ 11</p>
<p>getDate 获取月份中的每一天，不同月份取值也不相同</p>
<p>getDay 获取星期，取值为 0 ~ 6</p>
<p>getHours 获取小时，取值为 0 ~ 23</p>
<p>getMinutes 获取分钟，取值为 0 ~ 59</p>
<p>getSeconds 获取秒，取值为 0 ~ 59</p>
<h3><span id="时间戳"> 时间戳</span></h3>
<p>时间戳是指1970年01月01日00时00分00秒起至现在的总秒数或毫秒数，它是一种特殊的计量时间的方式。</p>
<p>注：ECMAScript 中时间戳是以毫秒计的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 1. 实例化</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="comment">// 2. 获取时间戳</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br><span class="line"><span class="comment">// 还有一种获取时间戳的方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">  <span class="comment">// 还有一种获取时间戳的方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>获取时间戳的方法，分别为 getTime 和 Date.now 和  +new Date()</p>
<h2><span id="dom-节点"> DOM 节点</span></h2>
<blockquote>
<p>掌握元素节点创建、复制、插入、删除等操作的方法，能够依据元素节点的结构关系查找节点</p>
</blockquote>
<p>回顾之前 DOM 的操作都是针对元素节点的属性或文本的，除此之外也有专门针对元素节点本身的操作，如插入、复制、删除、替换等。</p>
<h3><span id="插入节点"> 插入节点</span></h3>
<p>在已有的 DOM 节点中插入新的 DOM 节点时，需要关注两个关键因素：首先要得到新的 DOM 节点，其次在哪个位置插入这个节点。</p>
<p>如下代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>在现有 dom 结构基础上插入新的元素节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 普通盒子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 点击按钮向 box 盒子插入节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮，在网页中插入节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 获得一个 DOM 元素节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      p.<span class="property">innerText</span> = <span class="string">&#x27;创建的新的p标签&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      p.<span class="property">className</span> = <span class="string">&#x27;info&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 复制原有的 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">      p2.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 插入盒子 box 盒子</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">appendChild</span>(p)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">appendChild</span>(p2)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li>
<p><code>createElement</code> 动态创建任意 DOM 节点</p>
</li>
<li>
<p><code>cloneNode</code> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点</p>
</li>
<li>
<p><code>appendChild</code> 在末尾（结束标签前）插入节点</p>
</li>
</ul>
<p>再来看另一种情形的代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>在现有 dom 结构基础上插入新的元素节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>在任意节点前插入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮，在已有 DOM 中插入新节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 第 2 个 li 元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> relative = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li:nth-child(2)&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 动态创建新的节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> li1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      li1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      li1.<span class="property">innerText</span> = <span class="string">&#x27;Web APIs&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 复制现有的节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> li2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li:first-child&#x27;</span>).<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">      li2.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 在 relative 节点前插入</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">insertBefore</span>(li1, relative)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">insertBefore</span>(li2, relative)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li>
<p><code>createElement</code> 动态创建任意 DOM 节点</p>
</li>
<li>
<p><code>cloneNode</code> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点</p>
</li>
<li>
<p><code>insertBefore</code> 在父节点中任意子节点之前插入新节点</p>
</li>
</ul>
<h3><span id="删除节点"> 删除节点</span></h3>
<p>删除现有的 DOM 节点，也需要关注两个因素：首先由父节点删除子节点，其次是要删除哪个子节点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 点击按钮删除节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取 ul 父节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 待删除的子节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 删除节点</span></span></span><br><span class="line"><span class="language-javascript">      ul.<span class="title function_">removeChild</span>(lis[<span class="number">0</span>])</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：<code>removeChild</code> 删除节点时一定是由父子关系。</p>
<h3><span id="查找节点"> 查找节点</span></h3>
<p>DOM 树中的任意节点都不是孤立存在的，它们要么是父子关系，要么是兄弟关系，不仅如此，我们可以依据节点之间的关系查找节点。</p>
<h4><span id="父子关系"> 父子关系</span></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>所有的子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 获取 ul 的子节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript 基础<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 父节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所有的子节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 只包含元素子节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li><code>childNodes</code> 获取全部的子节点，回车换行会被认为是空白文本节点</li>
<li><code>children</code> 只获取元素类型节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>课程名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>难度<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>初级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>初级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>中级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有 button 节点，并添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buttons.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      buttons[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(this.parentNode); // 父节点 td</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(this.parentNode.parentNode); // 爷爷节点 tr</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：<code>parentNode</code> 获取父节点，以相对位置查找节点，实际应用中非常灵活。</p>
<h4><span id="兄弟关系"> 兄弟关系</span></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript 基础<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有 li 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 对所有的 li 节点添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 前一个节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">previousSibling</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下一下节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">nextSibling</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li><code>previousSibling</code> 获取前一个节点，以相对位置查找节点，实际应用中非常灵活。</li>
<li><code>nextSibling</code> 获取后一个节点，以相对位置查找节点，实际应用中非常灵活。</li>
</ul>
<h1><span id="web-apis-第5天笔记"> Web APIs - 第5天笔记</span></h1>
<blockquote>
<p>目标： 能够利用JS操作浏览器,具备利用本地存储实现学生就业表的能力</p>
</blockquote>
<ul>
<li>BOM操作</li>
<li>综合案例</li>
</ul>
<h2><span id="js组成"> js组成</span></h2>
<p>JavaScript的组成</p>
<ul>
<li>
<p>ECMAScript:</p>
<ul>
<li>规定了js基础语法核心知识。</li>
<li>比如：变量、分支语句、循环语句、对象等等</li>
</ul>
</li>
<li>
<p>Web APIs :</p>
<ul>
<li>DOM   文档对象模型， 定义了一套操作HTML文档的API</li>
<li>BOM   浏览器对象模型，定义了一套操作浏览器窗口的API</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171731412.png" alt="67604738945"></p>
<h2><span id="window对象"> window对象</span></h2>
<p><strong>BOM</strong> (Browser Object Model ) 是浏览器对象模型</p>
<ul>
<li>window对象是一个全局对象，也可以说是JavaScript中的顶级对象</li>
<li>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的</li>
<li>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li>
<li>window对象下的属性和方法调用的时候可以省略window</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171731413.png" alt="67604743636"></p>
<h2><span id="定时器-延迟函数"> 定时器-延迟函数</span></h2>
<p>JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(回调函数, 延迟时间)</span><br></pre></td></tr></table></figure>
<p>setTimeout 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略window</p>
<p>间歇函数 setInterval : 每隔一段时间就执行一次， , 平时省略window</p>
<p>清除延时函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(timerId)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意点</p>
<ol>
<li>延时函数需要等待,所以后面的代码先执行</li>
<li>返回值是一个正整数，表示定时器的编号</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定时器之延迟函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 开启延迟函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我只执行一次&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 延迟函数返回的还是一个正整数数字，表示延迟函数的编号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(timerId)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.2 延迟函数需要等待时间，所以下面的代码优先执行</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 关闭延迟函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearTimeout</span>(timerId)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="location对象"> location对象</span></h2>
<p>location (地址) 它拆分并保存了 URL 地址的各个组成部分， 它是一个对象</p>
<table>
<thead>
<tr>
<th>属性/方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>href</td>
<td>属性，获取完整的 URL 地址，赋值时用于地址的跳转</td>
</tr>
<tr>
<td>search</td>
<td>属性，获取地址中携带的参数，符号 ？后面部分</td>
</tr>
<tr>
<td>hash</td>
<td>属性，获取地址中的啥希值，符号 # 后面部分</td>
</tr>
<tr>
<td>reload()</td>
<td>方法，用来刷新当前页面，传入参数 true 时表示强制刷新</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/music&quot;</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/download&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;reload&quot;</span>&gt;</span>刷新页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// location 对象  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. href属性 （重点） 得到完整地址，赋值则是跳转到新地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// location.href = &#x27;http://www.itcast.cn&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. search属性  得到 ? 后面的地址 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>)  <span class="comment">// ?search=笔记本</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. hash属性  得到 # 后面的地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. reload 方法  刷新页面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.reload&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// location.reload() // 页面刷新</span></span></span><br><span class="line"><span class="language-javascript">      location.<span class="title function_">reload</span>(<span class="literal">true</span>) <span class="comment">// 强制页面刷新 ctrl+f5</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="navigator对象"> navigator对象</span></h2>
<p>navigator是对象，该对象下记录了浏览器自身的相关信息</p>
<p>常用属性和方法：</p>
<ul>
<li>通过 userAgent 检测浏览器的版本及平台</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测 userAgent（浏览器信息）</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line">  <span class="comment">// 验证是否为Android或iPhone</span></span><br><span class="line">  <span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line">  <span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line">  <span class="comment">// 如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line">  <span class="keyword">if</span> (android || iphone) &#123;</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;http://m.itcast.cn&#x27;</span></span><br><span class="line">  &#125;&#125;)();</span><br></pre></td></tr></table></figure>
<h2><span id="histroy对象"> histroy对象</span></h2>
<p>history (历史)是对象，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退等</p>
<p><strong>使用场景</strong></p>
<p>history对象一般在实际开发中比较少用，但是会在一些OA 办公系统中见到。</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171731414.png" alt="67604783479"></p>
<p>常见方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171731415.png" alt="67604784659"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>←后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;forward&quot;</span>&gt;</span>前进→<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// histroy对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.前进</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> forward = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.forward&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    forward.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// history.forward() </span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">go</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.后退</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> back = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.back&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    back.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// history.back()</span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2><span id="本地存储今日重点"> 本地存储（今日重点）</span></h2>
<p>本地存储：将数据存储在本地浏览器中</p>
<p>常见的使用场景：</p>
<p><a href="https://todomvc.com/examples/vanilla-es6/">https://todomvc.com/examples/vanilla-es6/</a>    页面刷新数据不丢失</p>
<p>好处：</p>
<p>1、页面刷新或者关闭不丢失数据，实现数据持久化</p>
<p>2、容量较大，sessionStorage和 localStorage 约 5M 左右</p>
<h3><span id="localstorage重点"> localStorage（重点）</span></h3>
<p><strong>作用:</strong> 数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失</p>
<p>**特性：**以键值对的形式存储，并且存储的是字符串， 省略了window</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171731416.png" alt="67604963508"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>本地存储-localstorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 本地存储 - localstorage 存储的是字符串 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 存储</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;age&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 删除</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;age&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="sessionstorage了解"> sessionStorage（了解）</span></h3>
<p>特性：</p>
<ul>
<li>用法跟localStorage基本相同</li>
<li>区别是：当页面浏览器被关闭时，存储在 sessionStorage 的数据会被清除</li>
</ul>
<p>存储：sessionStorage.setItem(key,value)</p>
<p>获取：sessionStorage.getItem(key)</p>
<p>删除：sessionStorage.removeItem(key)</p>
<h3><span id="localstorage-存储复杂数据类型"> localStorage 存储复杂数据类型</span></h3>
<p>**问题：**本地只能存储字符串,无法存储复杂数据类型.</p>
<p>**解决：**需要将复杂数据类型转换成 JSON字符串,在存储到本地</p>
<p>**语法：**JSON.stringify(复杂数据类型)</p>
<p>JSON字符串：</p>
<ul>
<li>首先是1个字符串</li>
<li>属性名使用双引号引起来，不能单引号</li>
<li>属性值如果是字符串型也必须双引号</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 本地存储复杂数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> goods = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>: <span class="number">1999</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// localStorage.setItem(&#x27;goods&#x27;, goods)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(goods))</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>**问题：**因为本地存储里面取出来的是字符串，不是对象，无法直接使用</p>
<p>**解决： **把取出来的字符串转换为对象</p>
<p>**语法：**JSON.parse(JSON字符串)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 本地存储复杂数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> goods = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>: <span class="number">1999</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// localStorage.setItem(&#x27;goods&#x27;, goods)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(goods))</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 把JSON字符串转换为对象  JSON.parse</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;goods&#x27;</span>)))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="综合案例"> 综合案例</span></h2>
<h3><span id="数组map-方法"> 数组map 方法</span></h3>
<p><strong>使用场景：</strong></p>
<p>map 可以遍历数组处理数据，并且返回新的数组</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(ele)  // 数组元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(index) // 索引号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> ele + <span class="string">&#x27;颜色&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>map 也称为映射。映射是个术语，指两个元素的集之间元素相互“对应”的关系。</p>
<p>map重点在于有返回值，forEach没有返回值（undefined）</p>
</blockquote>
<h3><span id="数组join方法"> 数组join方法</span></h3>
<p>**作用：**join() 方法用于把数组中的所有元素转换一个字符串</p>
<p><strong>语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(ele)  // 数组元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(index) // 索引号</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> ele + <span class="string">&#x27;颜色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 数组join方法  把数组转换为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 小括号为空则逗号分割</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>())  <span class="comment">// red颜色,blue颜色,pink颜色</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 小括号是空字符串，则元素之间没有分隔符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">//red颜色blue颜色pink颜色</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>))  <span class="comment">//red颜色|blue颜色|pink颜色</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1><span id="web-apis-第6天笔记"> Web APIs - 第6天笔记</span></h1>
<blockquote>
<p>目标：能够利用正则表达式完成小兔鲜注册页面的表单验证，具备常见的表单验证能力</p>
</blockquote>
<ul>
<li>正则表达式</li>
<li>综合案例</li>
<li>阶段案例</li>
</ul>
<h2><span id="正则表达式"> 正则表达式</span></h2>
<p><strong>正则表达式</strong>（Regular Expression）是一种字符串匹配的模式（规则）</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配)</li>
<li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732905.png" alt="67607966636"></p>
<h3><span id="正则基本使用"> 正则基本使用</span></h3>
<ol>
<li>
<p>定义规则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg =  <span class="regexp">/表达式/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>/   /</code>是正则表达式字面量</li>
<li>正则表达式也是<code>对象 </code></li>
</ul>
</li>
<li>
<p>使用正则</p>
<ul>
<li><code>test()方法</code>   用来查看正则表达式与指定的字符串是否匹配</li>
<li>如果正则表达式与指定的字符串匹配 ，返回<code>true</code>，否则<code>false</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 正则表达式的基本使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;web前端开发&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 定义规则</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg = <span class="regexp">/web/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用正则  test()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))  <span class="comment">// true  如果符合规则匹配上则返回true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;java开发&#x27;</span>))  <span class="comment">// false  如果不符合规则匹配上则返回 false</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="元字符"> 元字符</span></h3>
<ol>
<li><strong>普通字符:</strong></li>
</ol>
<ul>
<li>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</li>
<li>普通字符只能够匹配字符串中与它们相同的字符。</li>
<li>比如，规定用户只能输入英文26个英文字母，普通字符的话  /[abcdefghijklmnopqrstuvwxyz]/</li>
</ul>
<ol start="2">
<li><strong>元字符(特殊字符）</strong></li>
</ol>
<ul>
<li>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</li>
<li>比如，规定用户只能输入英文26个英文字母，换成元字符写法： /[a-z]/</li>
</ul>
<h4><span id="边界符"> 边界符</span></h4>
<p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732906.png" alt="67608008165"></p>
<blockquote>
<p>如果 ^ 和 $ 在一起，表示必须是精确匹配</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 元字符之边界符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 匹配开头的位置 ^</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg = <span class="regexp">/^web/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;web前端&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;前端web&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;we&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 匹配结束的位置 $</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg1 = <span class="regexp">/web$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;web前端&#x27;</span>))  <span class="comment">//  false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;前端web&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;we&#x27;</span>))  <span class="comment">// false  </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 精确匹配 ^ $</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg2 = <span class="regexp">/^web$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;web前端&#x27;</span>))  <span class="comment">//  false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;前端web&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;we&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;web&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;webweb&#x27;</span>))  <span class="comment">// flase </span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="量词"> 量词</span></h4>
<p>量词用来设定某个模式重复次数</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732907.png" alt="67608018538"></p>
<blockquote>
<p>注意： 逗号左右两侧千万不要出现空格</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 元字符之量词</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. * 重复次数 &gt;= 0 次</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg1 = <span class="regexp">/^w*$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. + 重复次数 &gt;= 1 次</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg2 = <span class="regexp">/^w+$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. ? 重复次数  0 || 1 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg3 = <span class="regexp">/^w?$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. &#123;n&#125; 重复 n 次</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg4 = <span class="regexp">/^w&#123;3&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// flase</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;wwww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 5. &#123;n,&#125; 重复次数 &gt;= n </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg5 = <span class="regexp">/^w&#123;2,&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 6. &#123;n,m&#125;   n =&lt; 重复次数 &lt;= m</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg6 = <span class="regexp">/^w&#123;2,4&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;wwww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;wwwww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="范围"> 范围</span></h4>
<p>表示字符的范围，定义的规则限定在某个范围，比如只能是英文字母，或者数字等等，用表示范围</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732908.png" alt="67608029616"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 元字符之范围  []  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. [abc] 匹配包含的单个字符， 多选1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg1 = <span class="regexp">/^[abc]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;d&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. [a-z] 连字符 单个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg2 = <span class="regexp">/^[a-z]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;p&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;0&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 想要包含小写字母，大写字母 ，数字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg3 = <span class="regexp">/^[a-zA-Z0-9]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="number">9</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;,&#x27;</span>))  <span class="comment">// flase</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg4 = <span class="regexp">/^[a-zA-Z0-9_]&#123;6,16&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;abcd1&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;abcd12&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ABcd12&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ABcd12_&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. [^a-z] 取反符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg5 = <span class="regexp">/^[^a-z]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="number">8</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="字符类"> 字符类</span></h4>
<p>某些常见模式的简写方式，区分字母和数字</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732909.png" alt="67608035363"></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732910.png" alt="67608037232"></p>
<h2><span id="替换和修饰符"> 替换和修饰符</span></h2>
<p>replace 替换方法，可以完成字符的替换</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732911.png" alt="67608043716"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 替换和修饰符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 替换  replace  需求：把前端替换为 web</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 replace 返回值是替换完毕的字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const strEnd = str.replace(/前端/, &#x27;web&#x27;) 只能替换一个</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p>
<ul>
<li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li>
<li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 替换和修饰符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 替换  replace  需求：把前端替换为 web</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 replace 返回值是替换完毕的字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const strEnd = str.replace(/前端/, &#x27;web&#x27;) 只能替换一个</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 修饰符 g 全部替换</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> strEnd = str.<span class="title function_">replace</span>(<span class="regexp">/前端/g</span>, <span class="string">&#x27;web&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(strEnd) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="正则插件"> 正则插件</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732912.png" alt="67608054863"></p>
<h2><span id="change-事件"> change 事件</span></h2>
<p>给input注册 change 事件，值被修改并且失去焦点后触发</p>
<h2><span id="判断是否有类"> 判断是否有类</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171732913.png" alt="67608061879"></p>
<p>元素.classList.contains() 看看有没有包含某个类，如果有则返回true，么有则返回false</p>
<h1><span id="个人实战文档"> 个人实战文档</span></h1>
<p>本次实战是对自己整个api阶段的总结。</p>
<p>参考效果如下地址：</p>
<p><a href="http://erabbit.itheima.net/#/product/3995139">http://erabbit.itheima.net/#/product/3995139</a></p>
<p>本次实战主要分为以下几个模块。</p>
<h2><span id="顶部导航模块"> 顶部导航模块</span></h2>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171733213.gif">
<p>需求：</p>
<ol>
<li>顶部导航开始不显示</li>
<li>等页面滑到主导航栏，这个<strong>新顶部导航栏滑动下拉显示</strong>，并且改为固定定位</li>
<li>等页面滑到上面，新顶部导航栏隐藏</li>
</ol>
<h2><span id="图片切换模块"> 图片切换模块</span></h2>
 <img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171733215.gif">
<h2><span id="放大镜效果"> 放大镜效果</span></h2>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171733216.gif">
<p>业务分析：</p>
<p>①：鼠标经过对应小盒子，左侧中等盒子显示对应中等图片</p>
<p>②： 鼠标经过中盒子，右侧会显示放大镜效果的大盒子</p>
<p>③： 黑色遮罩盒子跟着鼠标来移动</p>
<p>④： 鼠标在中等盒子上移动，大盒子的图片跟着显示对应位置</p>
<p>思路分析：</p>
<p>①：鼠标经过小盒子，左侧中等盒子显示对应中等图片</p>
<ol>
<li>获取对应的元素</li>
<li>采取事件委托的形式，监听鼠标经过小盒子里面的图片， 注意此时需要使用 <code>mouseover</code> 事件，因为需要事件冒泡触发small</li>
<li>让鼠标经过小图片的爸爸li盒子，添加类，其余的li移除类（注意先移除，后添加）</li>
<li>鼠标经过小图片，可以拿到小图片的src， 可以做两件事
<ul>
<li>让中等盒子的图片换成这个 这个小图片的src</li>
<li>让大盒子的背景图片，也换成这个小图片的 src （稍后做）</li>
</ul>
</li>
</ol>
<p>②： 鼠标经过中等盒子，右侧大盒子显示</p>
<ol>
<li>
<p>用到鼠标经过和离开，鼠标经过中盒子，大盒子 利用 display 来显示和隐藏</p>
</li>
<li>
<p>鼠标离开不会立马消失，而是有200ms的延时，用户体验更好，所以尽量使用定时器做个延时 setTimeout</p>
</li>
<li>
<p>显示和隐藏也尽量定义一个函数，因为鼠标经过离开中等盒子，会显示隐藏，同时，<strong>鼠标经过大盒子，也会显示和隐藏</strong></p>
</li>
<li>
<p>给大盒子里面的背景图片一个默认的第一张图片</p>
</li>
</ol>
<p>③： 黑色遮罩盒子跟着鼠标来移动</p>
<ol>
<li>
<p>先做鼠标经过 中等盒子，显示隐藏 黑色遮罩 的盒子</p>
</li>
<li>
<p>让黑色遮罩跟着鼠标来走, 需要用到鼠标移动事件  mousemove</p>
</li>
<li>
<p>让黑色盒子的移动的核心思想：不断把鼠标在中等盒子内的坐标给黑色遮罩层 let  top 值，这样遮罩层就可以跟着移动了</p>
<ul>
<li>
<p>需求</p>
<ul>
<li>我们要的是 鼠标在 中等盒子内的坐标， 没有办法直接得到</li>
<li>得到1：  鼠标在页面中的坐标</li>
<li>得到2：  中等盒子在页面中的坐标</li>
</ul>
</li>
<li>
<p>算法</p>
<ul>
<li>得到鼠标在页面中的坐标    利用事件对象的  pageX</li>
<li>得到middle中等盒子在页面中的坐标   middle.getBoundingClientRect()</li>
<li>鼠标在middle 盒子里面的坐标   =   鼠标在页面中的坐标  -   middle 中等盒子的坐标</li>
<li>黑色遮罩层不断得到       鼠标在middle 盒子中的坐标 就可以移动起来了</li>
</ul>
<blockquote>
<p>注意 y坐标特殊，需要减去 页面被卷去的头部</p>
<p>为什么不用 box.offsetLet 和 box.offsetTop  因为这俩属性跟带有定位的父级有关系，很容被父级影响，而getBoundingClientRect() 不受定位的父元素的影响</p>
</blockquote>
</li>
<li>
<p>限定遮罩的盒子只能在middle 内部移动，需要添加判断</p>
<ul>
<li>限定水平方向 大于等于0 并且小于等于 400</li>
<li>限定垂直方向 大于等于0 并且小于等于 400</li>
</ul>
</li>
<li>
<p>遮罩盒子移动的坐标：</p>
<ul>
<li>声明一个 mx 作为移动的距离</li>
<li>水平坐标 x 如果 小于等于100 ，则移动的距离 mx 就是  0  不应该移动</li>
<li>水平坐标 如果 大于等于100 并且小于300，移动的距离就是  mx - 100 （100是遮罩盒子自身宽度的一半）</li>
<li>水平坐标 如果 大于等于300，移动的距离就是  mx   就是200  不应该在移动了</li>
<li>其实我们发现水平移动， 就在 100 ~ 200 之间移动的</li>
<li>垂直同理</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mx = <span class="number">0</span>, my = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">100</span>) mx = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">100</span> &amp;&amp; x &lt; <span class="number">300</span>) mx = x - <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">300</span>) mx = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (y &lt;= <span class="number">100</span>) my = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (y &gt; <span class="number">100</span> &amp;&amp; y &lt; <span class="number">300</span>) my = y - <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> (y &gt;= <span class="number">300</span>) my = <span class="number">200</span></span><br></pre></td></tr></table></figure>
<ul>
<li>大盒子图片移动的计算方法：
<ul>
<li>中等盒子是 400px  大盒子 是 800px 的图片</li>
<li>中等盒子移动1px， 大盒子就应该移动2px， 只不过是负值</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">large.<span class="property">style</span>.<span class="property">backgroundPositionX</span> = - <span class="number">2</span> * mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundPositionY</span> = - <span class="number">2</span> * my + <span class="string">&#x27;px&#x27;</span></span><br></pre></td></tr></table></figure>
<p>放大镜完整代码：</p>
</li>
</ol>
<h2><span id="其他模块"> 其他模块</span></h2>
<p>此模块可以根据自己时间添加</p>
<h3><span id="点击模块"> 点击模块</span></h3>
 <img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171733217.gif">
<h3><span id="tab栏切换模块"> tab栏切换模块</span></h3>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311171733218.gif">
<h3><span id="返回顶部模块"> 返回顶部模块</span></h3>
<p>页面滚动底部，可以出现一个侧边栏，点击返回顶部，可以返回顶部</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2023/03/10/2023-Mysql/</url>
    <content><![CDATA[<h1><span id="mysql常用操作"> MySQL常用操作</span></h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. show character set;				- 查看MySQL支持的字符集以及对应的校对规则</span><br><span class="line">2. show variables like &#x27;char%&#x27;;  	- 查看当前连接系统的参数</span><br><span class="line">3. status;							- 查看MySQL的状态信息</span><br><span class="line">4. show engines \G;					- 查看该版本支持的数据库存储引擎</span><br><span class="line">5. show create database 数据库名\G;	  - 显示数据库的创建信息</span><br></pre></td></tr></table></figure>
<h1><span id="散记"> 散记</span></h1>
<ol>
<li>主键字段的值不允许为<strong>null</strong>,而UNIQUE字段的值可取null，但是必须使用null声明，只是null值最多有一个。</li>
<li>WHERE操作是从数据表中获取数据符合条件的数据，而HAVING是根据条件对已分组的数据进行操作</li>
<li>HAVING位于GROUPBY BY子句后，而WHERE位于GROUP BY子句前</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MakeDown格式笔记</title>
    <url>/2023/01/27/2023-MakeDown%E6%A0%BC%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1><span id="基本语法"> 基本语法</span></h1>
<h2><span id="写在前面"> 写在前面</span></h2>
<h3><span id="常用方法博客链接"> 常用方法博客链接</span></h3>
<ul>
<li><a href="https://blog.csdn.net/qq_43732429/article/details/108034518?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167498604716782429779685%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167498604716782429779685&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108034518-null-null.142%5Ev71%5Econtrol,201%5Ev4%5Eadd_ask&amp;utm_term=makedown%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2&amp;spm=1018.2226.3001.4187">字体颜色大小及文字底色设置</a></li>
<li><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167481263716800192266470%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167481263716800192266470&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-79207643-null-null.142%5Ev71%5Econtrol,201%5Ev4%5Eadd_ask&amp;utm_term=makedown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%A4%A7%E5%85%A8&amp;spm=1018.2226.3001.4187">数学符号博客1</a></li>
<li><a href="http://events.jianshu.io/p/4bf8d083b8ab">数学符号博客2</a></li>
</ul>
<h2><span id="快捷键"> 快捷键</span></h2>
<ul>
<li>加粗 <code>Ctrl + B</code></li>
<li>斜体 <code>Ctrl + B</code></li>
<li>引用 <code>Ctrl + Q</code></li>
<li>插入链接 <code>Ctrl + L</code></li>
<li>插入代码 <code>Ctrl + K</code></li>
<li>插入图片 <code>Ctrl + G</code></li>
<li>提升标题 <code>Ctrl + H</code></li>
<li>有序列表 <code>Ctrl + O</code></li>
<li>无序列表 <code>Ctrl + U</code></li>
<li>横线 <code>Ctrl + R</code></li>
<li>撤销 <code>Ctrl + Z</code></li>
<li>重做 <code>Ctrl + Y</code></li>
</ul>
<h2><span id="语法标题"> 语法标题</span></h2>
<ol>
<li>一级标题使用<code># 标题名</code>,其中<code>#</code> 后面有个空格</li>
<li>二级标题使用<code>## 标题名</code>，以此类推</li>
</ol>
<h2><span id="无序列表"> 无序列表</span></h2>
<p>使用<code>* 名字</code></p>
<h2><span id="插入图片"> 插入图片</span></h2>
<p><code>![图片描述](图片路径)</code></p>
<p>其中</p>
<ul>
<li>图片描述可省略</li>
<li>图片路径可为本地路径或者网络下载路径</li>
</ul>
<h2><span id="分割线"> 分割线</span></h2>
<ul>
<li>三个以上<code>---</code>或<code>***</code></li>
</ul>
<h2><span id="代码块"> 代码块</span></h2>
<p>使用<code>三个反引号</code></p>
<hr>
<h2><span id="换行"> 换行</span></h2>
<p><code>&lt;br /&gt;</code></p>
<h2><span id="目录"> 目录</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标题</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">## 目录</span><br><span class="line">1. [目录1](#jump1)</span><br><span class="line">2. [目录2](#jump2)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">### &lt;span id=&quot;jump1&quot;&gt;1. 目录1&lt;/span&gt;</span><br><span class="line">---</span><br><span class="line">### &lt;span id=&quot;jump2&quot;&gt;2. 目录2&lt;/span&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2><span id="超链接"> 超链接</span></h2>
<p><code>[名字](链接)</code></p>
<h2><span id="打空格"> 打空格</span></h2>
<p><code>$~~~$</code> **注:**其中<code>~</code>根据需求添加</p>
<h2><span id="数学符号"> 数学符号</span></h2>
<p>单行数学符号用**<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∗</mo><mo>∗</mo><mtext>左右包起来多行数学符号用</mtext><mo>∗</mo><mo>∗</mo></mrow><annotation encoding="application/x-tex">**左右包起来
多行数学符号用**</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">左</span><span class="mord cjk_fallback">右</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">起</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">学</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">用</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>$**上下包起来</p>
]]></content>
      <categories>
        <category>MakeDown</category>
      </categories>
      <tags>
        <tag>MakeDown</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/04/29/2023-Linux/</url>
    <content><![CDATA[<h1><span id="finalshell"> FinalShell</span></h1>
<h2><span id="准备工作"> 准备工作</span></h2>
<p><a href="https://blog.csdn.net/weixin_57349957/article/details/125103677?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169889151516800227424303%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169889151516800227424303&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125103677-null-null.142%5Ev96%5Epc_search_result_base7&amp;utm_term=%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AEip&amp;spm=1018.2226.3001.4187">csdn</a></p>
<h2><span id="连接服务器步骤"> 连接服务器步骤</span></h2>
<h3><span id="步骤1"> 步骤1</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291608049.png" alt="image-20230429160825573"></p>
<h3><span id="步骤2"> 步骤2</span></h3>
<p>用<strong>ssh</strong>连接</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291608230.png" alt="image-20230429160853178"></p>
<h3><span id="步骤3"> 步骤3</span></h3>
<p>ip查看命令为 <code>ip addr</code></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291615991.png" alt="image-20230429161516931"></p>
<h1><span id="linux常用命令"> Linux常用命令</span></h1>
<h2><span id="cat"> cat</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291630467.png" alt="image-20230429163048404"></p>
<h2><span id="more"> more</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291632142.png" alt="image-20230429163213076"></p>
<h2><span id="tail"> tail</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291633780.png" alt="image-20230429163335709"></p>
<h2><span id="mkdir"> mkdir</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291635349.png" alt="image-20230429163545273"></p>
<h2><span id="rmdir"> rmdir</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291636915.png" alt="image-20230429163607837"></p>
<h2><span id="rm"> rm</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291637686.png" alt="image-20230429163733620"></p>
<h2><span id="cp"> cp</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291639391.png" alt="image-20230429163915317"></p>
<h2><span id="mv"> mv</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291641936.png" alt="image-20230429164150844"></p>
<h2><span id="tar"> tar</span></h2>
<ol>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291645470.png" alt="image-20230429164544389"></p>
<ol start="2">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291651684.png" alt="image-20230429165135574"></p>
<h2><span id="vivim"> vi/vim</span></h2>
<ol>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291703853.png" alt="image-20230429170302737"></p>
<ol start="2">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291705972.png" alt="image-20230429170521895"></p>
<ol start="3">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291705647.png" alt="image-20230429170557582"></p>
<ol start="4">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291707511.png" alt="image-20230429170720447"></p>
<ol start="5">
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291707178.png" alt="image-20230429170753103"></p>
<h2><span id="find"> find</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291710533.png" alt="image-20230429171024457"></p>
<h2><span id="grep"> grep</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291711246.png" alt="image-20230429171144151"></p>
<h2><span id="防火墙"> 防火墙</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301450456.png" alt="image-20230430145023347"></p>
<h1><span id="shell"> Shell</span></h1>
<h2><span id="部署项目"> 部署项目</span></h2>
<h3><span id="为用户授权"> 为用户授权</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301536746.png" alt="image-20230430153655637"></p>
<h3><span id="设置静态ip"> 设置静态ip</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301540239.png" alt="image-20230430154028133"></p>
<h1><span id="linux"> Linux</span></h1>
<h2><span id="切换到root并更改普通用户权限"> 切换到root，并更改普通用户权限</span></h2>
<p><a href="https://blog.csdn.net/weixin_50589168/article/details/121576786?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169889067316777224436660%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169889067316777224436660&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121576786-null-null.142%5Ev96%5Epc_search_result_base7&amp;utm_term=student%20%E4%B8%8D%E5%9C%A8%20sudoers%20%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82%E6%AD%A4%E4%BA%8B%E5%B0%86%E8%A2%AB%E6%8A%A5%E5%91%8A%E3%80%82&amp;spm=1018.2226.3001.4187">csdn</a></p>
<h3><span id="步骤"> 步骤</span></h3>
<ol>
<li>su - root</li>
<li>chmod u+w /etc/sudoers</li>
<li>vim /etc/sudoers</li>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311021013959.png" alt="img"></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces做题记录</title>
    <url>/2023/01/31/2023-codeforces%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1><span id="constructive-algorithms"> constructive algorithms</span></h1>
<h2><span id="1426d-non-zero-segments1500"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>任意子段内无<strong>和为0</strong>的段，那么便通过前缀和，存入set，如果有和为0的子段，那么前缀和必有两段是相等的。</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, n, res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    unordered_set&lt;LL&gt; et;</span><br><span class="line">    et.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        s += x;</span><br><span class="line">        <span class="keyword">if</span> (et.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            et.<span class="built_in">clear</span>();</span><br><span class="line">            et.<span class="built_in">insert</span>(<span class="number">0</span>); </span><br><span class="line">            s = x;</span><br><span class="line">        &#125;</span><br><span class="line">        et.<span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) solve();</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2><span id="1396a-multiples-of-length1600"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>要三次内把数组中所有元素变为0，那么可以第一次让第一个数为0，第二次选中1<sub>n，使它们减去自身的n倍，得到**(n-1)a[i]**,再选中2</sub>n,加上各自的n-1倍，那么就让全数组为0了</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;LL&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 1\n0\n1 1\n0\n1 1 %lld\n&quot;</span>, -a[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 1 \n%lld\n&quot;</span>, -a[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 %d\n&quot;</span>, n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cout &lt;&lt; -a[i] * n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n2 %d\n&quot;</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (LL)(n - <span class="number">1</span>) * a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="1365b-trouble-sort1700"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>贪心加bfs，想要让换人不跑出去，最佳决策是将坏人周围全部围起来，如果换人旁边有好人，那么如果要围住坏人必然会将好人围住，即为No，如果不然，从终点开始bfs，看是否能够找到每一个好人。</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = dx[i] + u, y = dy[i] + v;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;.&#x27;</span>) g[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;PII&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(&#123;n, m&#125;);</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		PII t = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="type">int</span> x = t.fi, y = t.se;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line">			<span class="keyword">if</span> (st[xx][yy] || g[xx][yy] == <span class="string">&#x27;#&#x27;</span> || xx &lt; <span class="number">1</span> || xx &gt; n || yy &lt; <span class="number">1</span> || yy &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (g[xx][yy] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">				cnt --;</span><br><span class="line">				<span class="keyword">if</span> (!cnt) <span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			st[xx][yy] = <span class="literal">true</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(&#123;xx, yy&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">				cin &gt;&gt; g[i][j];</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;G&#x27;</span>) cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// cout &lt;&lt; &quot;cnt = &quot; &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;B&#x27;</span>) <span class="built_in">gan</span>(i, j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// cout &lt;&lt; &quot;flag = &quot; &lt;&lt; flag &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (g[n][m] != <span class="string">&#x27;#&#x27;</span>) <span class="built_in">bfs</span>();</span><br><span class="line">		<span class="comment">// cout &lt;&lt; &quot;cnt = &quot; &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">		cout &lt;&lt; (!cnt ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="c-phoenix-and-distribution1600"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>先排序毋庸置疑，如果前面k个字母不是同一个字母，说明由第k个字母单独组成的字符串字典序最大，因为分成k组每一组都至少一个字母，那么第k个字母的字典序最大，所以要让它最小，便只输出这一个字母。如果前k个字符是同一个字母，就看第k+1个字母和最后一个字母是否是同一个，如果是，那么便让该字母个数分配给k组，如果有剩余，那么输出一个该字母，剩下的分给其他组。如果不是同一个，那么如果要让最大字典序最小，只能让其输出剩下的所有字母，不然总会给一个组分配一个字典序比较大的字母，导致最大字典序变大，不是题意所要求的结果。</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	<span class="type">int</span> n, k;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (s[<span class="number">0</span>] != s[k - <span class="number">1</span>]) &#123;</span><br><span class="line">		cout &lt;&lt; s[k - <span class="number">1</span>];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; s[k - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s[k] == s[len - <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="type">int</span> sum = (len - k) / k + ((len - k) % k != <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">while</span> (sum--) &#123;</span><br><span class="line">				cout &lt;&lt; s[k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; len; i++) cout &lt;&lt; s[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="d2-sages-birthday-hard-version1500"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>贪心策略，要让cnt尽可能大，那么让数组先排序，不管数组长度奇偶，都让大的序列有<strong>int t = n / 2 + 1</strong>个，这样能尽可能让结果大，比如序列为<strong>1 2 2 4</strong>，结果序列是<strong>2142</strong>，如果是<strong>1 2 2 4 5</strong>，结果序列是<strong>21425</strong></p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(N)</span>, <span class="title">b</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">begin</span>() + <span class="number">1</span> + n);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> t = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = t; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">		b[i] = a[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">		b[i] = a[j++];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b[i] &lt; b[i - <span class="number">1</span>] &amp;&amp; b[i] &lt; b[i + <span class="number">1</span>]) cnt++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) &#123;</span></span><br><span class="line">	<span class="comment">// 	solve();</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="c-even-picture1500"> </span></h2>
<h3><span id="思路"> 思路:</span></h3>
<p>题目看起来很绕，但总结下来发现规律就很简单。</p>
<p>题目要求：</p>
<ul>
<li>所有灰块为一个连通块</li>
<li>每个灰块与偶数个灰块相邻</li>
<li>恰有 <strong>n</strong> 个灰块四周都有灰块</li>
</ul>
<p>根据这个特性，只要构造出如下图类型的图便可AC</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071909699.png" alt></p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(N)</span>, <span class="title">b</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> r = <span class="number">2</span> + n, c = r;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n * <span class="number">3</span> + <span class="number">4</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0 0\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1 0\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; c - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = t; j &lt;= t + <span class="number">2</span>; j++) &#123;</span><br><span class="line">			cout &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		t++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, r - <span class="number">2</span>, c - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, r - <span class="number">1</span>, c - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) &#123;</span></span><br><span class="line">	<span class="comment">// 	solve();</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="b-trouble-sort"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>如果至少有一个0并且至少有一个1，那么就可以随意交换两个数（细品）</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> x, last = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">bool</span> sorted = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">bool</span> s0 = <span class="literal">false</span>, s1 = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (~last &amp;&amp; last &gt; x) &#123;</span><br><span class="line">			sorted = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		last = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x) s1 = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> s0 = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sorted || (s1 &amp;&amp; s0)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="a1-prefix-flip-easy-version"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>先操作1到i，再操作1，最后再操作1到i，即可将第i位改变，而1到i-1不变,最多操作3*n次</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; op;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] != s2[i]) &#123;</span><br><span class="line">            op.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">            op.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            op.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; op.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : op) cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="d-epic-transformation"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>先用mp存每个数的出现次数，再把每个数的出现次数入优先队列。遍历时每次拿出两个最大的出现次数，因为优先队列里的保存的是每个数的出现次数，所以每个出现次数都对应不同的数，可以直接消去。最后的结果要么是全部消除，要么是队头的出现次数，不可能还有队列的其他出现次数，假设有，那么必定会被队头的出现次数消去。</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; heap;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        cnt[x]++;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = cnt.<span class="built_in">begin</span>(); it != cnt.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        heap.<span class="built_in">push</span>(it-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = n;</span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">int</span> t1 = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> t2 = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        res -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 - <span class="number">1</span>) heap.<span class="built_in">push</span>(t1 - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t2 - <span class="number">1</span>) heap.<span class="built_in">push</span>(t2 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (heap.<span class="built_in">size</span>() == <span class="number">0</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; heap.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="比赛补题"> 比赛补题：</span></h1>
<h2><span id="b-sum-of-two-numbers"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>昨晚脑抽了，这道题很简单，就依次遍历每一位，保持a,b的数位和不超过一，让a成为大的数，如果b的数位和大于a就交换ab</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x) &#123;</span><br><span class="line">		ret += x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		string s;</span><br><span class="line">		cin &gt;&gt; s;</span><br><span class="line">		<span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			num = num * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; num / <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">				<span class="type">int</span> t = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				<span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">					a = a * <span class="number">10</span> + t / <span class="number">2</span>;</span><br><span class="line">					b = b * <span class="number">10</span> + t / <span class="number">2</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					a = a * <span class="number">10</span> + t / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">					b = b * <span class="number">10</span> + t / <span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">get</span>(a) &gt; <span class="built_in">get</span>(b)) <span class="built_in">swap</span>(a, b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="b-phoenix-and-beauty"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>每个子序列和相同，一眼丁真，考虑周期序列，如果非重复元素数量大于k，说明不可能构造一个k个数循环的序列。如果小于k，补数。</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		S.<span class="built_in">insert</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">size</span>() &gt; m) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; n * m &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> x : S) &#123;</span><br><span class="line">			cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = S.<span class="built_in">size</span>(); i &lt; m; i++) cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="c-candy-store"> </span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303271234768.png" alt></p>
<h3><span id="题解"> 题解：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lcm</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (LL)a * b / <span class="built_in">gcd</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	LL g = <span class="number">0</span>, m = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">gcd</span>(g, <span class="number">1ll</span> * a[i] * b[i]) % <span class="built_in">lcm</span>(m, <span class="number">1ll</span> * b[i]) != <span class="number">0</span>) &#123;</span><br><span class="line">			res ++;</span><br><span class="line">			g = <span class="number">0</span>, m = <span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		g = <span class="built_in">gcd</span>(g, <span class="number">1ll</span> * a[i] * b[i]);</span><br><span class="line">		m = <span class="built_in">lcm</span>(m, <span class="number">1ll</span> * b[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="vp"> VP</span></h1>
<h2><span id="div2"> div2</span></h2>
<h3><span id="2023321"> </span></h3>
<h4><span id="b-mex-master"> </span></h4>
]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces题目常见词汇</title>
    <url>/2023/03/12/2023-codeforces%E9%A2%98%E7%9B%AE%E5%B8%B8%E8%A7%81%E8%AF%8D%E6%B1%87/</url>
    <content><![CDATA[<h1><span id="单词"> 单词</span></h1>
<ol>
<li>divisor			除数</li>
<li>product          乘积</li>
<li></li>
</ol>
<h1><span id="短语"> 短语</span></h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. composite number 	合数</span><br><span class="line">2. alternating sum      交替和</span><br><span class="line">3. </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>github笔记</title>
    <url>/2023/01/31/2023-github%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1><span id="通过hosts访问github方法下载软件之后"> 通过hosts访问github方法(下载软件之后)</span></h1>
<ol>
<li>进入<code>D:\SoftWare\hosts-server-pkg-win-x64</code></li>
<li>在<code>cmd</code>窗口输入<code>.\hosts-server.exe --port=8888</code></li>
<li>在浏览器输入<code>http://localhost:8888</code>查看最新hosts</li>
<li>进入<code>C:\Windows\System32\drivers\etc</code></li>
<li>在HOSTS中添加最新的hosts即可本地访问github</li>
</ol>
<h1><span id="whale加速器"> Whale加速器</span></h1>
<p>把<code>C:\ProgramData\Whale</code>里面的内容删除即可无限注册</p>
<h1><span id="github常用命令"> GitHub常用命令</span></h1>
<p><a href="https://zhuanlan.zhihu.com/p/193140870">博客链接</a></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304212232054.jpeg" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304211318815.png" alt></p>
<h1><span id="git"> Git</span></h1>
<blockquote>
<p>来源于黑马程序员视频</p>
</blockquote>
<h2><span id="常用操作步骤"> 常用操作步骤</span></h2>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290858644.png" alt="image-20230429085858530"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290908565.png" alt="image-20230429090848475"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290913300.png" alt="image-20230429091338219"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290920557.png" alt="image-20230429092012459"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290920494.png" alt="image-20230429092045403"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290930764.png" alt="image-20230429093022653"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290936814.png" alt="image-20230429093655725"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304290939549.png" alt="image-20230429093928453"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304291007140.png" alt="image-20230429100703079"></li>
</ol>
<h2><span id="回滚"> 回滚</span></h2>
<p><a href="https://blog.csdn.net/Heikepengmu/article/details/125801243">csdn</a></p>
<h1><span id="在idea上推送代码到github"> 在IDEA上推送代码到github</span></h1>
<p><a href="https://www.bilibili.com/video/BV13a411q753/?p=157&amp;spm_id_from=pageDriver&amp;vd_source=a76b9df816154c5c105a543f1d93bb5b">视频教程链接</a></p>
<h1><span id="picgo"> Picgo</span></h1>
<h2><span id="图床配置"> 图床配置</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202310301721534.png" alt="image-20231030172154457"></p>
<p>**cdn加速：**添加前缀<a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a></p>
<h1><span id="ssh连接配置"> SSH连接配置</span></h1>
<p><a href="https://blog.csdn.net/qq_30049011/article/details/121182065?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-121182065-blog-131951858.235%5Ev38%5Epc_relevant_anti_vip&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-121182065-blog-131951858.235%5Ev38%5Epc_relevant_anti_vip&amp;utm_relevant_index=6">csdn</a></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用操作记录</title>
    <url>/2023/01/27/2023-hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
<p>hexo cl &amp;&amp; hexo g &amp;&amp; hexo algolia &amp;&amp; hexo d</p>
</blockquote>
<h1><span id="简介"> 简介</span></h1>
<p>这是我的第一篇<code>Hexo</code>博客文章。</p>
<p>主题：<a href="https://github.com/D-Sketon/hexo-theme-reimu">https://github.com/D-Sketon/hexo-theme-reimu</a></p>
<h3><span id="写在前面"> 写在前面</span></h3>
<p><a href="https://blog.csdn.net/qq_40590778/article/details/104606611?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167498271516800182128778%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167498271516800182128778&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104606611-null-null.142%5Ev71%5Econtrol,201%5Ev4%5Eadd_ask&amp;utm_term=hexo%20next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96&amp;spm=1018.2226.3001.4187">美化</a></p>
<p><a href="https://removeif.github.io/theme/%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%86%E4%BA%AB.html">主题</a></p>
<p><a href="https://blog.csdn.net/a3212/article/details/77163817">评论系统</a></p>
<p>npm版本问题就删了重下依赖</p>
<h1><span id="语法"> 语法</span></h1>
<h2><span id="加数学公式"> 加数学公式</span></h2>
<p>文章头部设置mathjax: true</p>
<h2><span id="加密码"> 加密码</span></h2>
<p>文章头部设置password:</p>
<h2><span id="加文章背景"> 加文章背景</span></h2>
<p>文章头部设置cover: <a href="https://example.com">https://example.com</a></p>
<blockquote>
<p><a href="https://example.com">https://example.com</a> 换成自己的链接</p>
</blockquote>
<h2><span id="插入视频"> 插入视频</span></h2>
<p><code>&lt;video src=&quot;视频链接&quot; controls=&quot;controls&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;您的浏览器不支持播放该视频！&lt;/video&gt;</code></p>
<h2><span id="页面底部添加网站运行时间"> 页面底部添加网站运行时间</span></h2>
<p>在<code>E:\Document\DeskTopDocument\博客\MyBlog\themes\reimu\layout\_partial\footer.ejs</code>底部</p>
<p>将以下代码添加进去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span></span><br><span class="line"><span class="language-javascript">	    <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">	        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;01/27/2023 00:00:00&quot;</span>);<span class="comment">//在此处修改你的建站时间</span></span></span><br><span class="line"><span class="language-javascript">	        now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>); </span></span><br><span class="line"><span class="language-javascript">	        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days); </span></span><br><span class="line"><span class="language-javascript">	        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours); </span></span><br><span class="line"><span class="language-javascript">	        <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="language-javascript">	        mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span></span><br><span class="line"><span class="language-javascript">	        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span></span><br><span class="line"><span class="language-javascript">	        snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span></span><br><span class="line"><span class="language-javascript">	        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;已运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>; </span></span><br><span class="line"><span class="language-javascript">	        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">	    &#125; </span></span><br><span class="line"><span class="language-javascript">		<span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1><span id="运行本地hexo服务器"> 运行本地hexo服务器</span></h1>
<p>在<code>Git Bash Here</code>输入<code>hexo s</code></p>
<h1><span id="创建一个md文本文件"> 创建一个.md文本文件</span></h1>
<ul>
<li>在<code>Git Bash Here</code>输入<code>hexo new post 你所想要生成的文件名</code></li>
<li>如果是生成草稿文件，则输入<code>hexo new draft 你所想生成的草稿文件名</code></li>
</ul>
<h1><span id="把更新后的代码同步到github方法"> 把更新后的代码同步到github方法</span></h1>
<ol>
<li>先<code>hexo clean</code></li>
<li>先使用<code>hexo -g</code>把本地代码更新，等同于写<code>hexo -generate</code></li>
<li>使用<code>hexo -d</code>把本地代码部署到GitHub，等于于写<code>hexo -deploy</code></li>
</ol>
<p>推荐一个博客：<a href="https://cloud.tencent.com/developer/article/2063322">https://cloud.tencent.com/developer/article/2063322</a></p>
<h1><span id="配置分类-标签和关于"> 配置分类、标签和关于</span></h1>
<ol>
<li><code>hexo new page tags</code></li>
<li><code>hexo new pae categories</code></li>
<li><code>hexo new page about</code></li>
</ol>
<h1><span id="内容摘要"> 内容摘要</span></h1>
<p>文章某一行输入<code>&lt;!--more--&gt;</code>，即可在首页只显示该行以上的文字</p>
<h5><span id="结语停更了下次再写"> 结语：停更了，下次再写。</span></h5>
<p><code>date: 2023/1/27 14:31</code></p>
<h1><span id="搜索功能"> 搜索功能</span></h1>
<h2><span id="algolia"> algolia</span></h2>
<p><a href="https://dashboard.algolia.com/">官网</a></p>
<p><a href="https://www.npmjs.com/package/hexo-algolia#api-key">API</a></p>
<p>参考博客：</p>
<p><a href="https://blog.csdn.net/mulianju/article/details/129550258">https://blog.csdn.net/mulianju/article/details/129550258</a></p>
<p><a href="https://werty.cn/2019/08/hexo/hexo%20algolia%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">https://werty.cn/2019/08/hexo/hexo algolia命令执行失败解决方案/</a></p>
<p><a href="https://cloudflare.blog.ccknbc.cc/posts/hexo-butterfly-algolia/">https://cloudflare.blog.ccknbc.cc/posts/hexo-butterfly-algolia/</a></p>
<h2><span id="examplecom解决方法"> example.com解决方法</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311070005238.png" alt="image-20231107000455710"></p>
<h2><span id="评论功能"> 评论功能</span></h2>
<p><a href="https://valine.js.org/quickstart.html">valine官网</a></p>
<h1><span id="笔记"> 笔记</span></h1>
<p><code>&#123;&#123;&#125;&#125;</code>不能单独写在文档里，会报错，因为这是vue的语法，会被解析</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2023/11/03/2023-Vue/</url>
    <content><![CDATA[<p><a href="https://cn.vuejs.org/">Vue2官网</a></p>
<p><a href="https://vuejs.org/">Vue3官网</a></p>
<h1><span id="快速上手"> 快速上手</span></h1>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031400369.png" alt="image-20231103140044273"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&#x27;Hello 黑马&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">666</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1><span id="语法"> 语法</span></h1>
<p><a href="https://v2.cn.vuejs.org/v2/api/">API文档</a></p>
<h2><span id="插值表达式"> 插值表达式</span></h2>
<p><code>&#123;&#123;&#125;&#125;</code></p>
<h3><span id="错误用法"> 错误用法</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031403952.png" alt="image-20231103140301867"></p>
<h2><span id="v-html"> v-html</span></h2>
<p><strong>示例</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031439041.png" alt="image-20231103143908920"></p>
<p>注意<code>link</code>那里的值用<strong>单引号</strong>包起来的</p>
<p><strong>效果</strong><br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031445226.png" alt="image-20231103144507162"></p>
<h2><span id="v-show"> v-show</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031445462.png" alt="image-20231103144546401"></p>
<h2><span id="v-if"> v-if</span></h2>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031446667.png" alt="image-20231103144606617"></p>
<p>v-show和v-if的区别：<br>
<img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311031448371.png" alt="image-20231103144806304"></p>
<p>所以v-show适合频繁切换的场景</p>
<p>v-if要么显示，要么隐藏，不频繁切换</p>
<h2><span id="v-on"> v-on</span></h2>
<h3><span id="v-onclick"> v-on:click</span></h3>
<p><strong>操作代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button v-on:click=&quot;cnt++&quot;&gt;+&lt;/button&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cnt++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;cnt&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cnt--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cnt</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>效果:</strong></p>
<p><video src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311032152508.mp4" controls="controls">您的浏览器不支持播放该视频！</video></p>
<blockquote>
<p>v-on:click可以用@click代替</p>
</blockquote>
<h2><span id="函数"> 函数</span></h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- func是一个函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;func&quot;</span>&gt;</span>点击切换显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;is_show&quot;</span>&gt;</span>GanBro<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">is_show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">func</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">is_show</span> = !<span class="variable language_">this</span>.<span class="property">is_show</span></span></span><br><span class="line"><span class="language-javascript">                &#125;   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>像<code>&lt;h1 v-show=&quot;is_show&quot;&gt;GanBro&lt;/h1&gt;</code>一样内联调用不用加this，函数里面调用要加this</p>
<p>其中<code>&lt;button @click=&quot;func&quot;&gt;点击切换显示&lt;/button&gt; </code>，点击的时候调用func函数。</p>
<blockquote>
<p>最好直接用<code>函数名+()</code>的形式，比较直观</p>
</blockquote>
<h3><span id="函数传参"> 函数传参</span></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/* 设置元素内容与边框之间的内边距。 */</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/* 设置元素与周围元素之间的外边距。 */</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>GanBro售货机<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(-milk_price)&quot;</span>&gt;</span>购买牛奶<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(-bread_price)&quot;</span>&gt;</span>购买面包<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(-milkTea_price)&quot;</span>&gt;</span>购买奶茶<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;money+=100&quot;</span>&gt;</span>银行卡余额增加100元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>银行卡余额为&#123;&#123;money&#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input_milk_price&quot;</span>&gt;</span>请输入牛奶的价格：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_milk_price&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;milk_price&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input_milk_bread&quot;</span>&gt;</span>请输入面包的价格：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_milk_bread&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bread_price&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input_milkTea_price&quot;</span>&gt;</span>请输入奶茶的价格：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_milk_price&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;milkTea_price&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">money</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">milk_price</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">bread_price</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">milkTea_price</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">buy</span>(<span class="params">x</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">money</span> += x</span></span><br><span class="line"><span class="language-javascript">                &#125;   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在输入框上使用 <code>v-model=&quot;demo&quot;</code> 指令，将输入框的值与 Vue 实例中的 <code>demo</code>数据进行双向绑定。当用户输入文本时，Vue 将自动更新 <code>demo</code>的值，并在页面上显示出来。</p>
</blockquote>
<h2><span id="v-bind"> v-bind</span></h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;img v-bind:src=&quot;img&quot;&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">img</span>: <span class="string">&quot;https://img2.baidu.com/it/u=1684257589,389141728&amp;fm=253&amp;fmt=auto?w=1423&amp;h=800&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>v-bind可以直接省略不写，例如v-bind:src可以写成:src</p>
</blockquote>
<h2><span id="数组"> 数组</span></h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;index &gt; 0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;func(-1)&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;list[index]&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;index &lt; list.length-1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;func(1)&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">index</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-00.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-01.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-02.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-03.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-04.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;./imgs/11-05.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">func</span>(<span class="params">x</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">index</span> += x</span></span><br><span class="line"><span class="language-javascript">                &#125;   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="v-for"> v-for</span></h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>GanBro水果店<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;li v-for=&quot;(item, index) in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue开发版本包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过el配置选择器，指定Vue管理的哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;梨子&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以下用了<code>this.booksList = this.booksList.filter(item =&gt; item.id !== id)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>GanBro的书架<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in booksList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.author&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">booksList</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;《红楼梦》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;曹雪芹&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;《西游记》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;吴承恩&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;《水浒传》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span> &#125;,    </span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;《三国演义》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;罗贯中&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// booksList数组中每一项的id不等于传入的id时，保留</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// filter不会改变原数组，只会保存到新数组里面， 所以有赋值操作</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">booksList</span> = <span class="variable language_">this</span>.<span class="property">booksList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311041325561.png" alt="image-20231104132539439"></p>
<h2><span id="v-model"> v-model</span></h2>
<p>双向绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reset()&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>案例：小黑记事本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主体区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>小黑记事本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;todoName&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入任务&quot;</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 列表区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 统计和清空 → 如果没有任务了，底部隐藏掉 → v-show --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;list.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 统计 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span>合 计:<span class="tag">&lt;<span class="name">strong</span>&gt;</span> &#123;&#123; list.length &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 清空 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clear-completed&quot;</span>&gt;</span></span><br><span class="line">      清空任务</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加功能</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 通过 v-model 绑定 输入框 → 实时获取表单元素的内容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 点击按钮，进行新增，往数组最前面加 unshift</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">todoName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;跑步一公里&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;跳绳200个&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;游泳100米&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      del (id) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(id) =&gt; filter 保留所有不等于该 id 的项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      add () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">todoName</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;请输入任务名称&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">todoName</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">todoName</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      clear () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span> = []</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>unshift()</code>是JavaScript数组的一个方法，它可以在数组的开头插入一个或多个元素，并返回新数组的长度。与<code>push()</code>方法不同，<code>unshift()</code>方法会修改原始数组而不是在末尾添加新元素。</p>
<p><code>unshift()</code>方法接受一个或多个参数，在数组的开头插入这些参数，并将已有的元素向后移动。插入的元素的顺序与它们在参数列表中的顺序相同。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2023/05/01/2023-redis/</url>
    <content><![CDATA[<h1><span id="redis常用命令"> Redis常用命令</span></h1>
<h2><span id="字符创string操作命令"> 字符创string操作命令</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010905755.png" alt="image-20230501090509663"></p>
<h2><span id="哈希hash操作命令"> 哈希hash操作命令</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010906654.png" alt="image-20230501090607557"></p>
<h2><span id="列表list常用命令"> 列表list常用命令</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010909485.png" alt="image-20230501090941405"></p>
<h2><span id="set"> set</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010915059.png" alt="image-20230501091525972"></p>
<h2><span id="sorted-set"> sorted set</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305010918125.png" alt="image-20230501091805030"></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>ipad键盘快捷键</title>
    <url>/2023/03/14/2023-ipad%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141526777.jpg" alt></p>
]]></content>
      <tags>
        <tag>ipad</tag>
        <tag>键盘</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot笔记</title>
    <url>/2023/10/20/2023-springboot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ol>
<li>sprintboot的启动类所管理的Bean是它所在包下面的所有Bean</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310201541912.png" alt="image-20231020154140758"></p>
<p>​		这里启动类就是管理<strong>itheima</strong>下面的类</p>
<ol start="2">
<li>
<p>当项目要上线时，如果要修改配置，可以在resource下创建config包，并添加一个application.yml文件。这里的配置文件优先级更高<br>
<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310261654842.png" alt="image-20231026165423612"></p>
</li>
<li>
<p><strong>@ConfigurationProperties</strong>绑定属性支持属性名宽松绑定<br>
<img src="https://raw.githubusercontent.com/GanBro/imgs/main/202310271444299.png" alt="image-20231027144408175"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/01/28/2023-test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="65e2db6df1532b2d93a62205c021c7f86c505667a73fb17328b0f50b9d60fd9b">3e8ff5d9782f3b0cc1fe20cbee9754e3417e9d3c1f0897e52b6ad0d3c9cf8398627b8595d82d5641323dfcd59a203ffe6681bd69d92b4a84b0f5044bc5cad23e17dff5dc48ce2a2959ae0275504883c6c6b9476bfb3edd84719bb6d76489e5dbdf1c99bc8071b89742cd003ffce384da185b9c52cf23d51bf6bbbfc88beb3a7de842d2989cb6c687afa9671f01326f223ab4f251dae97b20ada27c8d66f5fc5f883a8945a892e30a7c39a178ecdd44eb82a4270239bc921cc701efa0beaf5989191f678e222a7089d7b9118460b477aae004a2e411f34234ae630d03f99e6bcbc46aef620881239c8efd863e1098ca10ec1301e08954cb46f9833f06fb9efe3697bff79efc60d4753cd7d27e6b3c73ca4ad8abb932dcf0b2a99fb57061b1a2013793c4113ea14338313c0c2063bff30823cfa7e12dfe314ad88d8335873fdea1f302643f0722cc14844e7a078d56bc7a87b52c0f268b68883ee1ead873d9e460c6abe521966aeeb24b3c1f983de468f976cd64b78e8be5d7c158c7e920361bc92ffa737cde063d59a0d26f32ee0b0b029a3a8c89e0928cae9850dd196280a277bf72c3c2c71a435794d7dd0d1456560a97dcbedad0ea9c7f87d7f58ae8782ec7ff987d2875fe407aefd4e1783a2bcf7027198da5632139ac886bd290a97274502b4e3f4a57de5829650f956b2d253d71dbad3147487cecd866dc28d8adaaeb181d3b6fac131de6b14f79f05dacc3bf759ebfc19886d2eac469b938acbee77bb4e4b9960b6f3849b30ad3b173d522cdb71d72d66074c4cbf4b9731a36d403872d5b00c7932328d087af4e8a90e5fd01656a4242ec16a82472b78748c31822c10af9fb1ded5264237c3db77e6b97c3b898e79ca7c54e7c0e0714029bdc75d2dc18eafd25a378c3ec765551eb2395cfa172142d8224acddba8bf28f59ab677a43cf020bf105aeb98ab21b6a803efc037b48302c362b75f060d9d4c76f656393e31a13184e70c34d3570f9eeba95eb8509486f942821d0406093ab4167072f5d9223c8397a8141b6e1eb743726a50c0e11c793ebaad09d2f5a0e39a7e6376160720d863352fe4be374b2beed03ffd5458220bbbd39410a6eda1f3920aa11c5bccc5e656bd7922ddc27d0b66f9abb24d05006cdde288c848d5f78bad43db8e90683ac8749b9c188c8cc9851711877dcb2b6dcfaefa0f271af92b1065bf7c605d1f77db777f1b841c8bad6465c8a98e484aedc6eed2a3707756974e88e641f348e11ff42f094a21c985eaad98050f79c6583cf92f84d0a30a62429cf96dfbde304e9be3c7cf2b21160f7c46c516e70f01fb5f51066be0cc4d0323d4f33951e404c36b25fa9b0908b60a1300f8211fc79a788f809795d2d49e6a8bbb30d5d4dc63f31b4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码查看文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>天梯赛题</title>
    <url>/2023/03/19/2023-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E9%A2%98/</url>
    <content><![CDATA[<h1><span id="7-14-重排链表"> </span></h1>
<h1><span id="思路"> 思路</span></h1>
<p>数组模拟大法即可，选拔赛时间紧脑抽了没做出来，方才做了10几分钟样例过了，只不过还没提交，正确性待定</p>
<h2><span id="代码"> 代码</span></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	string address;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	string next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map&lt;string, pair&lt;<span class="type">int</span>, string&gt; &gt; mp;</span><br><span class="line"></span><br><span class="line">Node node1[N], node2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string start;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; start &gt;&gt; n;</span><br><span class="line">	string address;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	string next;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; address &gt;&gt; data &gt;&gt; next;</span><br><span class="line">		mp[address] = &#123;data, next&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		node1[idx++] = &#123;start, mp[start].fi, mp[start].se&#125;;</span><br><span class="line">		start = mp[start].se;</span><br><span class="line">		<span class="keyword">if</span> (start == <span class="string">&quot;-1&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	cout &lt;&lt; node1[i].address &lt;&lt; &quot; &quot; &lt;&lt; node1[i].val &lt;&lt; &quot; &quot; &lt;&lt; node1[i].next &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = idx - <span class="number">1</span>; i &gt;= n / <span class="number">2</span>; i--) &#123;</span><br><span class="line">		cout &lt;&lt; node1[i].address &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[i].val &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[cnt].address &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (cnt != n / <span class="number">2</span> - <span class="number">1</span>) cout &lt;&lt; node1[cnt].address &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[cnt].val &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[i - <span class="number">1</span>].address &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; node1[cnt].address &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1[cnt].val &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) &#123;</span></span><br><span class="line">	<span class="comment">// 	solve();</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>学成在线</title>
    <url>/2023/07/07/2023-%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF/</url>
    <content><![CDATA[<h1><span id="虚拟机centos配置"> 虚拟机Centos配置</span></h1>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202307072108107.png" alt="image-20230707210839013"></p>
<h2><span id="账号密码"> 账号密码</span></h2>
<h2><span id="虚拟机的mysql"> 虚拟机的MySQL</span></h2>
<p>账号：root</p>
<p>密码：mysql</p>
<h2><span id="gogs"> gogs</span></h2>
<p>账号：gogs</p>
<p>密码：gogs</p>
<h1><span id="笔记"> 笔记</span></h1>
<ol>
<li>很奇怪，必须要用whale推送代码才能成功，不然连接不上git</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>数据结构实验</title>
    <url>/2023/02/27/2023-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1><span id="顺序表"> 顺序表</span></h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_SIZE 5     <span class="comment">/*初始分配的顺序表长度*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCREM 5        <span class="comment">/*溢出时，顺序表长度的增量*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  <span class="comment">/*定义表元素的类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sqlist</span>&#123;</span></span><br><span class="line">	ElemType *slist;      <span class="comment">/*存储空间的基地址*/</span></span><br><span class="line">	<span class="type">int</span> length;           <span class="comment">/*顺序表的当前长度*/</span></span><br><span class="line">	<span class="type">int</span> listsize;         <span class="comment">/*当前分配的存储空间*/</span></span><br><span class="line">&#125;Sqlist;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InitList_sq</span><span class="params">(Sqlist *L)</span>; <span class="comment">/*                             */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CreateList_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> n)</span>; <span class="comment">/*                     */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListInsert_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i,ElemType e)</span>;<span class="comment">/*                 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">PrintList_sq</span><span class="params">(Sqlist *L)</span>;  <span class="comment">/*输出顺序表的元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListDelete_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i)</span>; <span class="comment">/*删除第i个元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLocate</span><span class="params">(Sqlist *L,ElemType e)</span>; <span class="comment">/*查找值为e的元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InitList_sq</span><span class="params">(Sqlist *L)</span>&#123;</span><br><span class="line">    L-&gt;slist=(ElemType*)<span class="built_in">malloc</span>(INIT_SIZE*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span>(!L-&gt;slist) <span class="keyword">return</span> ERROR;      </span><br><span class="line">    L-&gt;length=<span class="number">0</span>;                     </span><br><span class="line">    L-&gt;listsize=INIT_SIZE;           </span><br><span class="line">    <span class="keyword">return</span> OK;                   </span><br><span class="line">&#125;<span class="comment">/*InitList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">CreateList_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input data %d: &quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">        <span class="keyword">if</span>(!ListInsert_sq(L,i+<span class="number">1</span>,e))</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*CreateList*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出顺序表中的元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">PrintList_sq</span><span class="params">(Sqlist *L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=L-&gt;length;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,L-&gt;slist[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*PrintList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListInsert_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length+<span class="number">1</span>) </span><br><span class="line">	<span class="keyword">return</span> ERROR;    </span><br><span class="line">	<span class="keyword">if</span>(L-&gt;length&gt;=L-&gt;listsize)&#123;  </span><br><span class="line">		L-&gt;slist=(ElemType*)<span class="built_in">realloc</span>(L-&gt;slist,</span><br><span class="line">		(INIT_SIZE+INCREM)*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">				<span class="keyword">if</span>(!L-&gt;slist) </span><br><span class="line">		<span class="keyword">return</span> ERROR; </span><br><span class="line">		L-&gt;listsize+=INCREM;                </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>;k&gt;=i<span class="number">-1</span>;k--)&#123;         </span><br><span class="line">        L-&gt;slist[k+<span class="number">1</span>]= L-&gt;slist[k];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;slist[i<span class="number">-1</span>]=e;                     </span><br><span class="line">    L-&gt;length++;                         </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*ListInsert*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*在顺序表中删除第i个元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListDelete_sq</span><span class="params">(Sqlist *L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="type">int</span> k;</span><br><span class="line">	i--;</span><br><span class="line">	<span class="keyword">for</span> (k = i; k &lt; L-&gt;length - <span class="number">1</span>; k++) &#123;</span><br><span class="line">		L-&gt;slist[k] = L-&gt;slist[k + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;length--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在顺序表中查找指定值元素，返回其序号*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLocate</span><span class="params">(Sqlist *L,ElemType e)</span>&#123;    </span><br><span class="line">	<span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; L-&gt;length; k++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;slist[k] == e) <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    Sqlist sl;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input n:&quot;</span>);  <span class="comment">/*输入顺序表的元素个数*/</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n1-Create Sqlist:\n&quot;</span>);</span><br><span class="line">        InitList_sq(&amp;sl);</span><br><span class="line">        CreateList_sq(&amp;sl,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n2-Print Sqlist:\n&quot;</span>);</span><br><span class="line">        PrintList_sq(&amp;sl);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nplease input insert location and data:(location,data)\n&quot;</span>);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;m,&amp;k);</span><br><span class="line">	    ListInsert_sq(&amp;sl,m,k);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;\n3-Print Sqlist:\n&quot;</span>);</span><br><span class="line">	    PrintList_sq(&amp;sl);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\nplease input delete location:(location)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		ListDelete_sq(&amp;sl, m);</span><br><span class="line">		PrintList_sq(&amp;sl);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\nplease input find data:(data)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ListLocate(&amp;sl, m));</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1><span id="链表"> 链表</span></h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> ElemType; <span class="comment">/*定义表元素的类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  <span class="comment">/*线性表的单链表存储*/</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span>; <span class="comment">/*                                   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(LinkList L)</span>; <span class="comment">/*输出带头结点单链表的所有元素*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span>; <span class="comment">/*               */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertElem</span><span class="params">(LinkList L, <span class="type">int</span> i, <span class="type">int</span> e)</span>;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    LNode *p,*q,*head;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    head=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));        head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    p=head;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">       q=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));       <span class="built_in">printf</span>(<span class="string">&quot;input data %i:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q-&gt;data);            <span class="comment">/*输入元素值*/</span></span><br><span class="line">       q-&gt;next=<span class="literal">NULL</span>;                    <span class="comment">/*结点指针域置空*/</span></span><br><span class="line">       p-&gt;next=q;                       <span class="comment">/*新结点连在表末尾*/</span></span><br><span class="line">       p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;<span class="comment">/*CreateList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p=L-&gt;next;  <span class="comment">/*p指向单链表的第1个元素*/</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*PrintList*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span>&#123;</span><br><span class="line">    LNode *p;<span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i)&#123;                      </span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p||j&gt;i)</span><br><span class="line">        <span class="keyword">return</span> ERROR;                  </span><br><span class="line">    *e=p-&gt;data;                       </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">/*GetElem*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertElem</span><span class="params">(LinkList L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    LinkList p, q, t;</span><br><span class="line">    t = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    t-&gt;data = e;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = t;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,i;ElemType e;</span><br><span class="line">    LinkList L=<span class="literal">NULL</span>;            <span class="comment">/*定义指向单链表的指针*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input n:&quot;</span>);  <span class="comment">/*输入单链表的元素个数*/</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n1-Create LinkList:\n&quot;</span>);</span><br><span class="line">        L=CreateList(n);        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n2-Print LinkList:\n&quot;</span>);</span><br><span class="line">        PrintList(L);           </span><br><span class="line">        <span class="comment">// printf(&quot;\n3-GetElem from LinkList:\n&quot;);</span></span><br><span class="line">        <span class="comment">// printf(&quot;input i=&quot;);</span></span><br><span class="line">        <span class="comment">// scanf(&quot;%d&quot;,&amp;i);</span></span><br><span class="line">        <span class="comment">// if(GetElem(L,i,&amp;e))     </span></span><br><span class="line">        <span class="comment">//     printf(&quot;No%i is %d&quot;,i,e);</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">//     printf(&quot;not exists&quot;);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n4-DeleteElem LinkList:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input i = &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">        DeleteElem(L, i);</span><br><span class="line">        PrintList(L);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n5-InsertElem LinkList:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input i = &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input e = &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">        InsertElem(L, i, e);</span><br><span class="line">        PrintList(L);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="学生管理系统"> 学生管理系统</span></h1>
<p>用dev打开</p>
<h2><span id="源代码"> 源代码：</span></h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN sizeof(LNode)</span></span><br><span class="line"><span class="type">int</span> seat;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>   //通讯录结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> number;</span><br><span class="line">  <span class="type">char</span> name[<span class="number">20</span>];    </span><br><span class="line">  <span class="type">double</span> telenum;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span></span><br><span class="line">&#123;    <span class="comment">// 打印头结点地址为L的通讯录</span></span><br><span class="line">   LinkList p=L;<span class="comment">////</span></span><br><span class="line">   <span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n          ---------------------------------------\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;               学号       姓名     电话号码\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;          ----------------------------------------\n&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(L==<span class="literal">NULL</span> || L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">	     <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素\n&quot;</span>);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">while</span>(p-&gt;next !=<span class="literal">NULL</span>)</span><br><span class="line">	   &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;          %2d   %-9d&quot;</span>,n,p-&gt;next-&gt;number);</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;    %-5s  %.0f\n&quot;</span>,p-&gt;next-&gt;name,p-&gt;next-&gt;telenum);</span><br><span class="line">         p=p-&gt;next;</span><br><span class="line">         n++;</span><br><span class="line">	   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;          ----------------------------------------\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L,LinkList p)</span></span><br><span class="line">&#123;  <span class="comment">// 查找位于当前地址元素的前一元素的地址</span></span><br><span class="line">   LinkList p_prior=L;</span><br><span class="line">   <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">	  <span class="keyword">return</span>(L);</span><br><span class="line">   <span class="keyword">while</span>(p_prior-&gt;next != p)</span><br><span class="line">   &#123;</span><br><span class="line">      p_prior=p_prior-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (p_prior);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertYouXu</span><span class="params">(LinkList L,LinkList Elem)</span></span><br><span class="line">&#123;              <span class="comment">//插入一个元素，使原有序表仍为有序</span></span><br><span class="line">	LinkList p=L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; Elem-&gt;number&gt;=p-&gt;number)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;number==Elem-&gt;number)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;重复输入！！\n&quot;</span>);<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;         <span class="comment">//确定Elem插入的位置</span></span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=prior(L,p); Elem-&gt;next=<span class="literal">NULL</span>;p-&gt;next=Elem;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>       <span class="comment">//若为空表，插到头结点之后</span></span><br><span class="line">	&#123;</span><br><span class="line">		p=prior(L,p); Elem-&gt;next=p-&gt;next; p-&gt;next=Elem;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">creatIncreLink</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">//创建一个存放通讯录成员的非递减有序表，返回头结点地址</span></span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> num=<span class="number">1</span>,number;</span><br><span class="line">   <span class="type">double</span> telenum;</span><br><span class="line">   <span class="type">char</span> name[<span class="number">20</span>],temp;</span><br><span class="line">   LinkList L,p;</span><br><span class="line">   L=(LinkList)<span class="built_in">malloc</span>(LEN);    <span class="comment">//头结点</span></span><br><span class="line">   L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入学生学号、姓名和电话号码，建立通讯录，以&#x27;-1&#x27;为输入结束标志\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>,num);</span><br><span class="line">      temp=getchar(); gets(name);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d：&quot;</span>,num);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;telenum);</span><br><span class="line">   <span class="keyword">while</span>(number&gt;=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      p=(LinkList)<span class="built_in">malloc</span>(LEN); <span class="comment">//新结点</span></span><br><span class="line">      p-&gt;number=number;</span><br><span class="line">      p-&gt;telenum=telenum;</span><br><span class="line">      <span class="built_in">strcpy</span>(p-&gt;name,name);</span><br><span class="line">      insertYouXu(L,p);       <span class="comment">//有序的插入新结点</span></span><br><span class="line">      num++;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>,num);</span><br><span class="line">         temp=getchar();  gets(name);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d：&quot;</span>,num);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;telenum);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span><br><span class="line">&#123; <span class="comment">//从通讯录中删除第i个元素</span></span><br><span class="line">    LinkList p=L,q;<span class="comment">//////</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j&lt;i<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">       p = p-&gt;next;j++;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next)) <span class="comment">//判断i是否合法，i既不能大于元素的个数，也不能小于等于0</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%d个元素删除失败\n&quot;</span>,i);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);  <span class="comment">//释放删除的结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L,<span class="type">int</span> n)</span></span><br><span class="line">&#123;    <span class="comment">// 按学号查找通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(p-&gt;number&lt;=n)</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;number==n)</span><br><span class="line">	&#123;</span><br><span class="line">       flag=<span class="number">1</span>;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;                        学号: %d   姓名: %s   电话号码.:%.0f\n&quot;</span>,p-&gt;number,p-&gt;name,p-&gt;telenum);</span><br><span class="line">    &#125;</span><br><span class="line">   p=p-&gt;next;seat++;<span class="comment">//!!!!</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L,<span class="type">char</span> n[])</span></span><br><span class="line">&#123;    <span class="comment">// 按姓名查找通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>||L==<span class="literal">NULL</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素,查找失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(p-&gt;name,n))</span><br><span class="line">   &#123;</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                        Number: %d   Name: %s   TeleNo.:%.0f\n&quot;</span>,p-&gt;number,p-&gt;name,p-&gt;telenum);</span><br><span class="line">   &#125;</span><br><span class="line">   p=p-&gt;next;seat++;<span class="comment">//!!!!!</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L,<span class="type">int</span> n)</span></span><br><span class="line">&#123;    <span class="comment">// 按学号删除通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,删除失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(p-&gt;number&lt;=n)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;number==n)</span><br><span class="line">	&#123;</span><br><span class="line">       flag=<span class="number">1</span>;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;number);</span><br><span class="line">       p=p-&gt;next;</span><br><span class="line">       deleteElem(L,seat);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;p=p-&gt;next;seat++;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;被删除\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L,<span class="type">char</span> n[])</span></span><br><span class="line">&#123;    <span class="comment">// 按姓名删除通讯者</span></span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"> LinkList p=L-&gt;next;</span><br><span class="line"> seat=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(p-&gt;name,n))</span><br><span class="line">   &#123;</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p-&gt;name);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    deleteElem(L,seat);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;p=p-&gt;next;seat++;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;被删除\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   LinkList L=<span class="literal">NULL</span>,p;</span><br><span class="line">   <span class="type">int</span> flag=<span class="number">0</span>,menu;</span><br><span class="line">   <span class="type">char</span> temp;</span><br><span class="line">   system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n           ***************** ^@^欢迎使用通讯录系统***********\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               1 通讯录的建立                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               2 插入通讯记录                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               3 查询通讯记录                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               4 删除通讯记录                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               5 显示通讯录信息                 *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           *               0 退出管理系统                   *\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;           **************** ^@^欢迎使用通讯录系统************\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请选择0-5：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">   <span class="keyword">while</span>(menu!=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">switch</span>(menu)</span><br><span class="line">	 &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			 &#123;</span><br><span class="line">                L=creatIncreLink();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;建立通讯录：&quot;</span>);</span><br><span class="line">                printList(L);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			 &#123;</span><br><span class="line">		        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> number,telenum;</span><br><span class="line">                    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入通讯者的学号和姓名：\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">                       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名: &quot;</span>);</span><br><span class="line">                       temp=getchar(); gets(name);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码: &quot;</span>);</span><br><span class="line">                       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;telenum);</span><br><span class="line">                    p=(LinkList)<span class="built_in">malloc</span>(LEN); <span class="comment">//新结点</span></span><br><span class="line">                    p-&gt;number=number;</span><br><span class="line">                    <span class="built_in">strcpy</span>(p-&gt;name,name);</span><br><span class="line">                    p-&gt;telenum=telenum;</span><br><span class="line">                    insertYouXu(L,p);       <span class="comment">//有序的插入新结点</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;插入后：&quot;</span>);</span><br><span class="line">                    printList(L);</span><br><span class="line">				&#125;<span class="comment">//endif</span></span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nERROR: 通讯录还没有建立，请先建立通讯录\n&quot;</span>);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">			 &#125;<span class="comment">//endcase2</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			&#123;</span><br><span class="line">		        <span class="type">int</span> way,n;</span><br><span class="line">                <span class="type">char</span> na[<span class="number">20</span>],temp;</span><br><span class="line">                <span class="type">int</span> s;</span><br><span class="line">                <span class="keyword">if</span>(L!=<span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">			        <span class="keyword">if</span>(flag)</span><br><span class="line">					&#123;</span><br><span class="line">				        <span class="built_in">printf</span>(<span class="string">&quot;选择查找方式：\n&quot;</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;               1.按学号   2.按姓名\n&quot;</span>);</span><br><span class="line">                           <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;way);</span><br><span class="line">                        <span class="keyword">if</span>(way==<span class="number">1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">					       <span class="built_in">printf</span>(<span class="string">&quot;\n请输入学号:&quot;</span>);</span><br><span class="line">                             <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">                           s=searchNum(L,n);</span><br><span class="line">                           <span class="keyword">if</span>(s==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">				        <span class="keyword">else</span> <span class="keyword">if</span>(way==<span class="number">2</span>)</span><br><span class="line">						&#123;</span><br><span class="line">					       <span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">					       temp=getchar(); gets(na);</span><br><span class="line">					       s=searchName(L,na);</span><br><span class="line">					       <span class="keyword">if</span>(s==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">				        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;通讯录中无记录！\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">			        <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;通讯录中无记录！\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="comment">//endcase3</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		   &#123;</span><br><span class="line">		       <span class="type">int</span> way;</span><br><span class="line">			   <span class="type">char</span> temp; <span class="comment">////</span></span><br><span class="line">		       <span class="built_in">printf</span>(<span class="string">&quot;选择删除方式：1.按序号  2. 按学号  3.按姓名 \n&quot;</span>);</span><br><span class="line">		          <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;way);</span><br><span class="line">		       <span class="keyword">if</span>(way==<span class="number">1</span>)</span><br><span class="line">			   &#123;</span><br><span class="line">			      <span class="type">int</span> n;</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;请输入通讯录序号: &quot;</span>);</span><br><span class="line">			         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">			      deleteElem(L,n);</span><br><span class="line">			      printList(L);</span><br><span class="line">			   &#125;</span><br><span class="line">		       <span class="keyword">else</span> <span class="keyword">if</span>(way==<span class="number">2</span>)</span><br><span class="line">			   &#123;</span><br><span class="line">			      <span class="type">int</span> n,f;</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">			      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">			      f=delNum(L,n);</span><br><span class="line">			      <span class="keyword">if</span>(f!=<span class="number">0</span>)</span><br><span class="line">				  &#123;</span><br><span class="line">				      <span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				      printList(L);</span><br><span class="line">				  &#125;</span><br><span class="line">			      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">			   &#125;</span><br><span class="line">		       <span class="keyword">else</span> <span class="keyword">if</span>(way==<span class="number">3</span>)</span><br><span class="line">			   &#123;</span><br><span class="line">			      <span class="type">char</span> na[<span class="number">20</span>],temp;</span><br><span class="line">			      <span class="type">int</span> f;</span><br><span class="line">			      <span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">			        temp=getchar();  gets(na);</span><br><span class="line">			      f=delName(L,na);</span><br><span class="line">			      <span class="keyword">if</span>(f!=<span class="number">0</span>)</span><br><span class="line">				  &#123;</span><br><span class="line">				     <span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				     printList(L);</span><br><span class="line">				  &#125;</span><br><span class="line">			      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">			   &#125;</span><br><span class="line">		       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ERROR!!\n&quot;</span>);</span><br><span class="line">		       <span class="keyword">break</span>;</span><br><span class="line">		   &#125;<span class="comment">//endcase4</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		   &#123;</span><br><span class="line">		       <span class="built_in">printf</span>(<span class="string">&quot;当前通讯录内容如下：\n&quot;</span>);</span><br><span class="line">		       printList(L);</span><br><span class="line">		       <span class="keyword">break</span>;</span><br><span class="line">		   &#125;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">default</span>:  <span class="built_in">printf</span>(<span class="string">&quot;\n没有此功能，重新输入\n&quot;</span>);</span><br><span class="line">     &#125;<span class="comment">//endswitch</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;选择功能：&quot;</span>);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">   &#125;<span class="comment">//endwhile</span></span><br><span class="line">&#125;<span class="comment">//end</span></span><br></pre></td></tr></table></figure>
<h2><span id="改进版"> 改进版：</span></h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	LL telenum;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span>;</span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n          -------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               学号           姓名         电话号码\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;          -------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    		<span class="built_in">printf</span>(<span class="string">&quot;          %2d   %-9d&quot;</span>, n++, p-&gt;next-&gt;number);</span><br><span class="line">         	<span class="built_in">printf</span>(<span class="string">&quot;      %-5s         %lld\n&quot;</span>, p-&gt;next-&gt;name, p-&gt;next-&gt;telenum);</span><br><span class="line">         	p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;          -------------------------------------------\n&quot;</span>);</span><br><span class="line">   	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span> &#123;</span><br><span class="line">	LinkList p_prior = L;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> L;</span><br><span class="line">	<span class="keyword">while</span> (p_prior-&gt;next != P) &#123;</span><br><span class="line">		p_prior = p_prior-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p_prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; Elem-&gt;number &gt;= p-&gt;number) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;number == Elem-&gt;number) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;学号重复输入!! 请重新尝试 \n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		p-&gt;next = Elem;		</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = p-&gt;next;</span><br><span class="line">		p-&gt;next = Elem;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n           ***************** ^@^欢迎使用通讯录系统***********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               1 通讯录的建立                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               2 插入通讯记录                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               3 查询通讯记录                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               4 删除通讯记录                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               5 显示通讯录信息                 *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               0 退出管理系统                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           **************** ^@^欢迎使用通讯录系统************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>, number;</span><br><span class="line">	LL telenum;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>], temp;</span><br><span class="line">	LinkList L, p;</span><br><span class="line">	L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入学生学号、姓名和电话号码，建立通讯录，以&#x27;-1&#x27;为输入结束标志\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;telenum);</span><br><span class="line">    <span class="keyword">while</span> (number &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    	p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    	p-&gt;number = number;</span><br><span class="line">    	p-&gt;telenum = telenum;</span><br><span class="line">    	<span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">    	<span class="type">int</span> t = insertSorted(L, p); <span class="comment">// f</span></span><br><span class="line">    	<span class="keyword">if</span> (!t) num++;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入学号 %d：&quot;</span>,num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">	    <span class="comment">// 输入-1提前终止，简化用户操作</span></span><br><span class="line">		<span class="keyword">if</span> (number &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;telenum); 	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;number == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;                        学号: %d   姓名: %s   电话号码.:%lld\n&quot;</span>,p-&gt;number,p-&gt;name,p-&gt;telenum);</span><br><span class="line">   				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span> || L == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该通讯录中没有元素,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;要查找的是第%d位通讯者：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        Number: %d   Name: %s   TeleNo.:%lld\n&quot;</span>, p-&gt;number, p-&gt;name, p-&gt;telenum);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">	LinkList p = L, q;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;next)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素失败\n&quot;</span>, i);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q = p-&gt;next;</span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,删除失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;number == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d被删除\n&quot;</span>,p-&gt;number);</span><br><span class="line">				deleteElem(L,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该链表中没有元素,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s被删除\n&quot;</span>,p-&gt;name);</span><br><span class="line">				deleteElem(L, seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">	PrintMenu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择0-5：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> menu, flag = <span class="number">0</span>;</span><br><span class="line">    LinkList L = <span class="literal">NULL</span>, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line">    <span class="keyword">while</span> (menu &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">switch</span>(menu) &#123;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    			L = createIncreLink();</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;建立通讯录: &quot;</span>);</span><br><span class="line">    			printList(L);</span><br><span class="line">    			flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="type">int</span> num;</span><br><span class="line">					<span class="type">int</span> number;</span><br><span class="line">					LL telenum;</span><br><span class="line">					<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入通讯者的学号和姓名：\n&quot;</span>);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">	                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名: &quot;</span>);</span><br><span class="line">	                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;请输入电话号码: &quot;</span>);</span><br><span class="line">	                <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;telenum);</span><br><span class="line">	                p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	                p-&gt;number = number;</span><br><span class="line">	                <span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">	                p-&gt;telenum = telenum;</span><br><span class="line">	                insertSorted(L, p);</span><br><span class="line">	                <span class="built_in">printf</span>(<span class="string">&quot;插入后：&quot;</span>);</span><br><span class="line">	                printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nERROR: 通讯录还没有建立，请先建立通讯录\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">				<span class="type">int</span> way, n, s;</span><br><span class="line">				<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">				<span class="keyword">if</span> (L != <span class="literal">NULL</span> || flag) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;选择查找方式：\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;               1.按学号   2.按姓名\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">                    <span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">                    	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入学号:&quot;</span>);</span><br><span class="line">                    	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">                    	<span class="keyword">if</span> (!searchNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">						<span class="keyword">if</span>(!searchName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此通讯者，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;通讯录中无记录！\n&quot;</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">				<span class="type">int</span> way;</span><br><span class="line">				<span class="type">char</span> temp;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;选择删除方式：1.按序号  2. 按学号  3.按姓名 \n&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">				<span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入通讯录序号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				    deleteElem(L,n);</span><br><span class="line">				    printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n, f;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="keyword">if</span> (!delNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">3</span>) &#123;</span><br><span class="line">					<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n请输入姓名:&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">					<span class="keyword">if</span> (!delName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无该学号，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ERROR!!\n&quot;</span>); </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;当前通讯录内容如下：\n&quot;</span>);</span><br><span class="line">		        printList(L);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">default</span>:  <span class="built_in">printf</span>(<span class="string">&quot;\n没有此功能，重新输入\n&quot;</span>); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;选择功能：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="改进而来的网上购物系统"> 改进而来的网上购物系统</span></h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seat;</span><br><span class="line"><span class="type">int</span> haveBought;</span><br><span class="line"><span class="type">double</span> sumMoney;</span><br><span class="line"><span class="type">char</span> username[<span class="number">20</span>], password[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> id; <span class="comment">// 编号 </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">// 名称</span></span><br><span class="line">	<span class="type">int</span> stock; <span class="comment">// 库存</span></span><br><span class="line">	<span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span>;</span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">recharge</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addBrandStock</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">changeBrandPrice</span><span class="params">(LinkList L)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您所剩余额: %.2lf\n&quot;</span>, sumMoney);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您所购买商品总件数: %d\n&quot;</span>, haveBought);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n      ----------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                       商品编号      商品名称           商品库存         商品价格\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      ----------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;	%d		%-8d	%-8s	%-8d	  %-8.2lf\n&quot;</span>, n++, p-&gt;next-&gt;id, p-&gt;next-&gt;name, p-&gt;next-&gt;stock, p-&gt;next-&gt;price);</span><br><span class="line">     	p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      ----------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">   	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">prior</span><span class="params">(LinkList L, LinkList P)</span> &#123;</span><br><span class="line">	LinkList p_prior = L;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> L;</span><br><span class="line">	<span class="keyword">while</span> (p_prior-&gt;next != P) &#123;</span><br><span class="line">		p_prior = p_prior-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p_prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertSorted</span><span class="params">(LinkList L, LinkList Elem)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; Elem-&gt;id &gt;= p-&gt;id) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;id == Elem-&gt;id) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;商品编号重复输入!! 请重新尝试 \n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		p-&gt;next = Elem;		</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		p = prior(L, p);</span><br><span class="line">		Elem-&gt;next = p-&gt;next;</span><br><span class="line">		p-&gt;next = Elem;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMenu</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n           ***************** ^@^欢迎使用网上购物系统 **************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               1 网上购物系统的建立                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               2 插入商品                             *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               3 查询商品信息                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               4 删除商品                             *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               5 显示商品信息                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               6 购买商品                             *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               7 账户余额充值                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               8 增加商品库存                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               9 改变商品单价                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               10 修改密码                            *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *               0 退出网上购物系统                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           **************** ^@^欢迎使用网上购物系统****************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">createIncreLink</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> id; <span class="comment">// 编号 </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">// 名称</span></span><br><span class="line">	<span class="type">int</span> stock; <span class="comment">// 库存</span></span><br><span class="line">	<span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	LinkList L, p;</span><br><span class="line">	L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	loop: <span class="built_in">printf</span>(<span class="string">&quot;请注册您的账户\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请注册您的用户名: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, username);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">strlen</span>(password) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所设置的密码小于8位，请重新设置!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码: &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请核实您的密码: &quot;</span>);</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp, password)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;密码不一致，请重新注册！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> loop;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;注册成功!!!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的起始账户余额: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;sumMoney);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您的起始账户余额为: %lf元, 欢迎您的使用!!!\n&quot;</span>, sumMoney);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号、商品名称、商品库存和商品价格，建立网上购物系统，以&#x27;-1&#x27;为输入结束标志\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号 %d：&quot;</span>, num);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品名称 %d：&quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品库存 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品价格 %d: &quot;</span>, num);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;price);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    	p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    	p-&gt;id = id;</span><br><span class="line">    	p-&gt;stock = stock;</span><br><span class="line">    	p-&gt;price = price;</span><br><span class="line">    	<span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">    	<span class="type">int</span> t = insertSorted(L, p); </span><br><span class="line">    	<span class="keyword">if</span> (!t) num++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号 %d：&quot;</span>, num);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (id &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品名称 %d：&quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品库存 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stock);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品价格 %d: &quot;</span>, num);</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;price);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertBrand</span><span class="params">(LinkList L)</span> &#123; </span><br><span class="line">	LinkList p; </span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> id; <span class="comment">// 编号 </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">// 名称</span></span><br><span class="line">	<span class="type">int</span> stock; <span class="comment">// 库存</span></span><br><span class="line">	<span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品名称: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品库存: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入商品价格: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;price);</span><br><span class="line">    p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;id = id;</span><br><span class="line">	p-&gt;stock = stock;</span><br><span class="line">	p-&gt;price = price;</span><br><span class="line">	<span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">    insertSorted(L, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入后：&quot;</span>);</span><br><span class="line">    printList(L);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要查找的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumPlus</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,购买失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要购买的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要购买的数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				<span class="keyword">if</span> (b &gt; p-&gt;stock) &#123;</span><br><span class="line">   					<span class="built_in">printf</span>(<span class="string">&quot;您要购买的数量大于商品库存，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b * p-&gt;price &gt; sumMoney) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;您的余额不足，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					p-&gt;stock -= b;</span><br><span class="line">					sumMoney -= b * p-&gt;price;</span><br><span class="line">					haveBought += b; </span><br><span class="line"><span class="comment">//					printf(&quot;您所剩余额: %.2lf\n&quot;, sumMoney);</span></span><br><span class="line"><span class="comment">//					printf(&quot;您所购买商品总件数: %d\n&quot;, haveBought);</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要查找的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNamePlus</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要购买的是第%d个商品：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要购买的数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				<span class="keyword">if</span> (b &gt; p-&gt;stock) &#123;</span><br><span class="line">   					<span class="built_in">printf</span>(<span class="string">&quot;您要购买的数量大于商品库存，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b * p-&gt;price &gt; sumMoney) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;您的余额不足，购买失败！\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					p-&gt;stock -= b;</span><br><span class="line">					sumMoney -= b * p-&gt;price;</span><br><span class="line">					haveBought += b; </span><br><span class="line"><span class="comment">//					printf(&quot;您所剩余额: %.2lf\n&quot;, sumMoney);</span></span><br><span class="line"><span class="comment">//					printf(&quot;您所购买商品总件数: %d\n&quot;, haveBought);</span></span><br><span class="line">				&#125;	</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">	LinkList p = L, q;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;next)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素失败\n&quot;</span>, i);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q = p-&gt;next;</span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNum</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d被删除\n&quot;</span>,p-&gt;id);</span><br><span class="line">				deleteElem(L,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delName</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,查找失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s被删除\n&quot;</span>,p-&gt;name);</span><br><span class="line">				deleteElem(L, seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				printList(L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">recharge</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> un[<span class="number">20</span>], pw[<span class="number">20</span>];</span><br><span class="line">	loop: <span class="built_in">printf</span>(<span class="string">&quot;请输入您注册时的用户名: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, un);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(un, username)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所输入的用户名与您注册时所输入的不一致，请重新输入！！！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> loop;</span><br><span class="line">	&#125;</span><br><span class="line">	gtpw: <span class="built_in">printf</span>(<span class="string">&quot;请输入您的密码: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pw);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(pw, password)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所输入的密码与您注册时所输入的不一致，请重新输入！！！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> gtpw;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;核实成功!!!\n&quot;</span>);</span><br><span class="line">	<span class="type">double</span> add;</span><br><span class="line">	k: <span class="built_in">printf</span>(<span class="string">&quot;请输入你要充值的金额: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;add);</span><br><span class="line">	<span class="keyword">if</span> (add &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;您所充值的金额非法, 请重新输入!!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> k;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;充值成功!!!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;您的余额为: %lf + %lf = %lf元\n&quot;</span>, sumMoney, add, sumMoney + add);</span><br><span class="line">	sumMoney += add;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(LinkList L, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">	<span class="type">int</span> way, n, s;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">if</span> (L != <span class="literal">NULL</span> || flag) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;选择查找方式：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;               1.按商品编号   2.按商品名称\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">        <span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">        	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入商品编号:&quot;</span>);</span><br><span class="line">        	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        	<span class="keyword">if</span> (!searchNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n请输入商品名称:&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">			<span class="keyword">if</span>(!searchName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统中无记录！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,增加商品库存失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要增加的是第%d个商品的库存：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要增加的商品库存数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;stock += b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndAddBrandStock</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,增加商品库存失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要增加的是第%d个商品的库存：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要增加的商品库存数量: &quot;</span>);</span><br><span class="line">   				<span class="type">int</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;stock += b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addBrandStock</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入您想要增加的商品库存\n&quot;</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入1按商品编号选，输入2按商品名称选：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的选择: &quot;</span>);</span><br><span class="line">	<span class="type">int</span> op;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">	<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要增加的商品库存的商品编号: &quot;</span>);</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (!searchNumAndAddBrandStock(L, id)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要增加的商品库存的商品名称: &quot;</span>);</span><br><span class="line">		<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">		<span class="keyword">if</span> (!searchNameAndAddBrandStock(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无此选项，请重试！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	printList(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNumAndchangeBrandPrice</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,改变商品单价失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;id == n) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;您要改变的是第%d个商品的单价：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">   				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要设置成的单价: &quot;</span>);</span><br><span class="line">   				<span class="type">double</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;price = b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNameAndchangeBrandPrice</span><span class="params">(LinkList L, <span class="type">char</span> name[])</span> &#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	seat = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;该网上购物系统中没有商品,改变商品单价失败\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;name, name)) &#123;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;您要改变的是第%d个商品的单价：\n&quot;</span>,seat);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;                        商品编号: %d   商品名称: %s   商品库存:%d   商品价格:%.2lf\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;stock, p-&gt;price);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入您要设置成的单价: &quot;</span>);</span><br><span class="line">   				<span class="type">double</span> b;</span><br><span class="line">   				<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;b);</span><br><span class="line">   				p-&gt;price = b;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			seat++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeBrandPrice</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入您想要改变的商品单价\n&quot;</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入1按商品编号选，输入2按商品名称选：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您的选择: &quot;</span>);</span><br><span class="line">	<span class="type">int</span> op;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">	<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要改变的商品单价的商品编号: &quot;</span>);</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (!searchNumAndchangeBrandPrice(L, id)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要改变的商品单价的商品名称: &quot;</span>);</span><br><span class="line">		<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">		<span class="keyword">if</span> (!searchNameAndchangeBrandPrice(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无此选项，请重试！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	printList(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changePassword</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">20</span>];</span><br><span class="line">	t: <span class="built_in">printf</span>(<span class="string">&quot;请输入您的用户名: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(temp, username)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;用户名核实成功！！！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入您要修改成的密码: &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">strlen</span>(temp) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;您输入的密码长度小于8位，请重新输入！！!\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入您要修改成的密码: &quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">strcpy</span>(password, temp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;修改成功!!!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;用户名有误，请重新输入!!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">	PrintMenu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择0-5：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> menu, flag = <span class="number">0</span>;</span><br><span class="line">    LinkList L = <span class="literal">NULL</span>, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line">    <span class="keyword">while</span> (menu &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">switch</span>(menu) &#123;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    			L = createIncreLink();</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;建立网上购物系统: &quot;</span>);</span><br><span class="line">    			printList(L);</span><br><span class="line">    			flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">					insertBrand(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nERROR: 通讯录还没有建立，请先建立网上购物系统\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">				find(L, flag);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">				<span class="type">int</span> way;</span><br><span class="line">				<span class="type">char</span> temp;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;选择删除方式：1.按序号  2. 按商品编号  3.按商品名称 \n&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;way);</span><br><span class="line">				<span class="keyword">if</span> (way == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入商品序号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;删除后：\n&quot;</span>);</span><br><span class="line">				    deleteElem(L,n);</span><br><span class="line">				    printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="type">int</span> n, f;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入商品编号: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">					<span class="keyword">if</span> (!delNum(L, n)) <span class="built_in">printf</span>(<span class="string">&quot;无该商品编号，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="number">3</span>) &#123;</span><br><span class="line">					<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n请输入商品名称:&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">					<span class="keyword">if</span> (!delName(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无该商品名称，删除失败!\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ERROR!!\n&quot;</span>); </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;当前网上购物系统内容如下：\n&quot;</span>);</span><br><span class="line">		        printList(L);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;输入您购买商品的选择\n&quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;输入1按商品编号选，输入2按商品名称选：\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入您的选择: &quot;</span>);</span><br><span class="line">					<span class="type">int</span> op;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">					<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要购买的商品编号: &quot;</span>);</span><br><span class="line">						<span class="type">int</span> id;</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">						<span class="keyword">if</span> (!searchNumPlus(L, id)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入您想要购买的商品名称: &quot;</span>);</span><br><span class="line">						<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">						<span class="keyword">if</span> (!searchNamePlus(L, name)) <span class="built_in">printf</span>(<span class="string">&quot;无此商品，查找失败！\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;无此选项，请重试！&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					printList(L);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) recharge();</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">8</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) addBrandStock(L);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">9</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) changeBrandPrice(L);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;网上购物系统还未建立，请先建立系统!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">10</span>: &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) changePassword();</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;用户名还未建立，请先注册用户!!!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;欢迎您的再次使用！！！\n&quot;</span>); </span><br><span class="line">				<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">default</span>:  <span class="built_in">printf</span>(<span class="string">&quot;\n没有此功能，重新输入\n&quot;</span>); </span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;选择功能：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="家谱系统"> 家谱系统</span></h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME_length 50   <span class="comment">//名字最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINE_length 100  <span class="comment">//文本行最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">cc</span> *<span class="title">child</span>, *<span class="title">next</span>;</span><span class="comment">//next指向同辈份的人物</span></span><br><span class="line">   <span class="type">char</span> Name[];</span><br><span class="line">&#125;JPNode;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(<span class="type">char</span> p[],<span class="type">int</span> n)</span> <span class="comment">//清空字符数组p</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(n-- &gt; <span class="number">0</span>)</span><br><span class="line">		*p++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="type">static</span>  JPNode *last = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="type">static</span>  <span class="type">int</span>     last_level = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">AddJP</span><span class="params">(JPNode **head, <span class="type">char</span> <span class="type">const</span> name[], <span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">	 JPNode **s = head, *r = <span class="literal">NULL</span>;</span><br><span class="line">	 JPNode *p = (JPNode *)<span class="built_in">malloc</span>( <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="built_in">strlen</span>(name) + <span class="number">1</span> );</span><br><span class="line">	 p-&gt;child = p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	 <span class="built_in">strcpy</span>(p-&gt;Name,name);</span><br><span class="line">     <span class="keyword">if</span>( *s == <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 *s = p;</span><br><span class="line">		 last = p;</span><br><span class="line">		 <span class="keyword">return</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">if</span>(level - last_level == <span class="number">1</span>)</span><br><span class="line">        &#123;last-&gt;child = p; last = p;last_level = level;<span class="keyword">return</span>;&#125;</span><br><span class="line">	 <span class="keyword">if</span>((level == last_level) &amp;&amp; (*s != <span class="literal">NULL</span>))</span><br><span class="line">        &#123;last-&gt;next  = p; last = p;last_level = level;<span class="keyword">return</span>;&#125;</span><br><span class="line">	 r = *s;             <span class="comment">//r指向家谱树</span></span><br><span class="line">	 last_level = level;</span><br><span class="line">	 <span class="keyword">while</span>( level-- &gt; <span class="number">0</span>) <span class="comment">//找到相同的辈分</span></span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">		 r = r-&gt;next;</span><br><span class="line">		 r = r-&gt;child;</span><br><span class="line">	 &#125;<span class="comment">//以兄弟连接</span></span><br><span class="line">	 <span class="keyword">while</span>( r-&gt;next != <span class="literal">NULL</span>) r = r-&gt;next;</span><br><span class="line">	 r-&gt;next = p;</span><br><span class="line">     last = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatJP</span><span class="params">(JPNode **head)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">char</span> name[NAME_length]=<span class="string">&quot;&quot;</span>, line[LINE_length]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	 <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">	 <span class="type">int</span> level=<span class="number">0</span>,i=<span class="number">0</span>;                              <span class="comment">//辈分,以制表符个数表示</span></span><br><span class="line">	 FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">	 fp = fopen(<span class="string">&quot;C:\\Users\\wubo\\Desktop\\jiapuSystem\\jiapu_data.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">	 <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)&#123; <span class="built_in">printf</span>(<span class="string">&quot;open error!\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">1</span>); &#125;</span><br><span class="line">	 <span class="keyword">while</span>(level=<span class="number">0</span>, i=<span class="number">0</span>, fgets(line,LINE_length,fp) != <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 p = line;</span><br><span class="line">         <span class="keyword">while</span>(*p++ == <span class="string">&#x27;\t&#x27;</span>)level++;    <span class="comment">//计算辈分 ,计算完后p指向名字开始处</span></span><br><span class="line">		 <span class="keyword">while</span>(line[i++] != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			 ;</span><br><span class="line">		 line[i<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;              <span class="comment">//读入的换行符用字符串结束标识符替换</span></span><br><span class="line">		 <span class="built_in">strcpy</span>(name,p<span class="number">-1</span>);</span><br><span class="line">				 AddJP(head,name,level);</span><br><span class="line">		 clear(name,NAME_length);</span><br><span class="line">		 clear(line,LINE_length);</span><br><span class="line">	 &#125;</span><br><span class="line">	 fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DispJP</span><span class="params">(JPNode *p)</span><span class="comment">//从p指向的结点显示该家族</span></span><br><span class="line">&#123;</span><br><span class="line">	  <span class="type">static</span> <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">	  <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">		  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;level;<span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>),i++);</span><br><span class="line">		  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p-&gt;Name);</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">	  level++;</span><br><span class="line">      DispJP(p-&gt;child);</span><br><span class="line">	  level--;</span><br><span class="line">	  DispJP(p-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">          <span class="comment">/*在家谱中添加新成员，并追加到文件中*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Equal</span><span class="params">(<span class="type">char</span> <span class="type">const</span> *p,<span class="type">char</span> <span class="type">const</span> q[])</span><span class="comment">//判断两个字符串是否相等</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(*p++ == *q++)<span class="keyword">if</span>(*p == <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *q == <span class="string">&#x27;\0&#x27;</span>)<span class="keyword">return</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">JPNode *<span class="title function_">Find_Name</span><span class="params">(JPNode *s, <span class="type">char</span> *parent)</span><span class="comment">//定位家谱中的成员。返回其指针(地址)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> JPNode *here = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="keyword">return</span> here;</span><br><span class="line">	<span class="keyword">if</span>(Equal(s-&gt;Name,parent) == <span class="number">1</span>)<span class="keyword">return</span> (here=s);</span><br><span class="line">    here = Find_Name(s-&gt;child,parent);</span><br><span class="line">	here = Find_Name(s-&gt;next,parent);</span><br><span class="line">	<span class="keyword">return</span> here;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_FILE</span><span class="params">(JPNode *p,FILE *fp)</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">static</span> <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">	  <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">		  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;level;<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\t&quot;</span>),i++);</span><br><span class="line">		  <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\n&quot;</span>,p-&gt;Name);</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">	  level++;</span><br><span class="line">      Print_FILE(p-&gt;child,fp);</span><br><span class="line">	  level--;</span><br><span class="line">	  Print_FILE(p-&gt;next,fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ADD_number</span><span class="params">(JPNode *p)</span>  <span class="comment">//在家谱中添加新成员,并写入文件</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> parent[NAME_length],name[NAME_length];</span><br><span class="line">	FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">	JPNode *here = <span class="literal">NULL</span>;</span><br><span class="line">    JPNode *s = (JPNode *)<span class="built_in">malloc</span>( <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="built_in">strlen</span>(name) + <span class="number">1</span> );</span><br><span class="line">	s-&gt;next = s-&gt;child = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要添加的新成员的双亲姓名:&quot;</span>);	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,parent);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要添加的新成员的姓名:&quot;</span>);      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">    <span class="built_in">strcpy</span>(s-&gt;Name,name);</span><br><span class="line">	here = Find_Name(p,parent);</span><br><span class="line">	<span class="keyword">if</span>(here-&gt;child == <span class="literal">NULL</span>)here-&gt;child = s;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">        here = here-&gt;child;</span><br><span class="line">		<span class="keyword">while</span>(here-&gt;next != <span class="literal">NULL</span>)here = here-&gt;next;</span><br><span class="line">		here-&gt;next = s;</span><br><span class="line">	&#125;</span><br><span class="line">    fp = fopen(<span class="string">&quot;jiapu_data.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">	Print_FILE(p,fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line">             <span class="comment">/*输出指定家庭的所有成员*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dis_Family</span><span class="params">(JPNode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> name[NAME_length];</span><br><span class="line">	JPNode *here = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入该家庭的首个成员:&quot;</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">	here = Find_Name(p,name);</span><br><span class="line">	<span class="keyword">if</span>(here == <span class="literal">NULL</span>)&#123; <span class="built_in">printf</span>(<span class="string">&quot;无该家庭!\n&quot;</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	DispJP(here);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////</span></span><br><span class="line">               <span class="comment">/*确定指定成员在家族中的辈份*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">beifen</span><span class="params">(JPNode *p, <span class="type">char</span> name[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> level = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(p == <span class="literal">NULL</span> )<span class="keyword">return</span> level;</span><br><span class="line">	<span class="keyword">if</span>(Equal(p-&gt;Name,name) == <span class="number">1</span>)<span class="keyword">return</span> (level=n);</span><br><span class="line">	n++; beifen(p-&gt;child,name);</span><br><span class="line">	n--; beifen(p-&gt;next,name);  <span class="comment">//向右查询n不必加(先加后减)!</span></span><br><span class="line">	<span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Bei_Fen</span><span class="params">(JPNode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">   	<span class="type">char</span> name[NAME_length];</span><br><span class="line">	<span class="type">int</span>  n=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要查明辈分的人的姓名:&quot;</span>);	 <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">    n = beifen(p,name);</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;该家族中无此人!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\n   %s 是 %s 家族中的第%d辈    \n&quot;</span>,name,p-&gt;Name,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////</span></span><br><span class="line">                    <span class="comment">/*输出指定辈的所有成员*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">chabei</span><span class="params">(JPNode *p, <span class="type">int</span> bei)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> tag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(p == <span class="literal">NULL</span> )<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(bei == n)&#123;tag = <span class="number">1</span>;<span class="built_in">printf</span>(<span class="string">&quot;%s   &quot;</span>,p-&gt;Name);&#125;</span><br><span class="line">	n++; chabei(p-&gt;child,bei);</span><br><span class="line">	n--; chabei(p-&gt;next,bei);  <span class="comment">//向右查询n不必加(先加后减)!</span></span><br><span class="line">	<span class="keyword">if</span>(tag == <span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;该家族中还没有这一辈呢....\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Disp_Pei</span><span class="params">(JPNode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> bei;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n你想要查看那一辈的成员:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;bei);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n....该家族中辈分为%d的成员有....\n\n&quot;</span>,bei);</span><br><span class="line">	chabei(p,bei);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    JPNode *JP = <span class="literal">NULL</span>; <span class="comment">//家谱无结点</span></span><br><span class="line">    <span class="type">char</span> ch=<span class="string">&#x27;1&#x27;</span>,cc;</span><br><span class="line">    CreatJP(&amp;JP);</span><br><span class="line">	<span class="keyword">while</span>(ch)</span><br><span class="line">	&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	    menu();</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;\n...请选择:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">		<span class="comment">//ch=getchar();</span></span><br><span class="line">    	<span class="keyword">switch</span>(ch)</span><br><span class="line">		&#123;</span><br><span class="line">	      <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:ADD_number(JP);<span class="keyword">break</span>;</span><br><span class="line">	      <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:Dis_Family(JP);<span class="keyword">break</span>;</span><br><span class="line">	      <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:Bei_Fen(JP);   <span class="keyword">break</span>;</span><br><span class="line">  	      <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:Disp_Pei(JP);  <span class="keyword">break</span>;</span><br><span class="line">  	      <span class="keyword">default</span>:ch=<span class="string">&#x27;\0&#x27;</span>;        <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		getchar();<span class="keyword">while</span>( (cc=getchar()) != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n  ****************家谱操作菜单****************\n&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">  * (1)  在家谱中添加新成员，并追加到文件中。  *\n\</span></span><br><span class="line"><span class="string">  * (2)  输出指定家庭的所有成员。              *\n\</span></span><br><span class="line"><span class="string">  * (3)  确定指定成员在家族中的辈份(第几代)。  *\n\</span></span><br><span class="line"><span class="string">  * (4)  输出指定辈的所有成员。                *\n\</span></span><br><span class="line"><span class="string">  * (0)  退出操作!                             *\n\</span></span><br><span class="line"><span class="string">  ********************************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>英语六级单词</title>
    <url>/2023/08/25/2023-%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<h1><span id="名词"> 名词</span></h1>
<ol>
<li>offspring 后代，子女</li>
<li>commitment 承诺</li>
<li>marvel 奇迹;成就;不平凡的成果;令人惊异的人(或事)</li>
<li>infrastructure (国家或机构的)基础设施，基础建设</li>
<li>verdict 判决;(陪审团的)裁定，裁决，裁断;(经过检验或认真考虑后的)决定，结论，意见</li>
<li>arrogance 傲慢;自大</li>
<li>grievance 不满，不平；委屈，冤情；投诉</li>
<li>byprpduct 副产品</li>
<li>slavery 奴隶制，蓄奴；奴隶身份，奴役；过分依赖，过分投入</li>
<li>intuitive 直觉的；有直觉力的；易懂的，使用简便的</li>
<li>quirk 怪癖， 怪异的性格（或行为）；（偶然发生的）怪事，奇事；急转，急弯；（建筑）狭凹槽，深槽；&lt;美&gt;借口</li>
</ol>
<h1><span id="动词"> 动词</span></h1>
<ol>
<li>designates 把……定名为；任命，指派</li>
<li>incorporates 融合，合并，包含</li>
<li>sneaked 偷偷地走，潜行</li>
<li>marvel 感到惊奇;大为赞叹</li>
<li>misplace 放错地方；忘记把……放在什么地方；错误地信任某人</li>
<li>nurture 培养，促进；养育，培育；抱有，怀有；扶持，帮助；滋养，滋生</li>
</ol>
<h1><span id="形容词"> 形容词</span></h1>
<ol>
<li>legitimate（小孩）合法婚姻所生的；正当的，合理的；</li>
<li>identical 相同的;完全相同的;同一的;完全同样的</li>
<li>unanimous (决定或意见)一致的;一致同意的</li>
<li>contemptuous 轻蔑的;蔑视的;鄙视的</li>
<li>susceptible 易得病的，易受影响的；（人）易受感动的，易动感情的；</li>
<li>limbic 边的；缘的</li>
<li>counterintuitive 违反直觉的</li>
<li>slim 苗条的，纤细的；单薄的；（物）狭长的；（衣服）修长的，紧身的；（数量或数字）微小的；（公司或其他组织）精简的；&lt;南非&gt;诡计多端的，狡猾的</li>
<li>pronounced 明显的，显著的；讲出来的</li>
<li>astrological 占星的；占星学的，占星术的</li>
<li>startling 令人吃惊的，不寻常的；极鲜亮的</li>
<li>subtile 微妙的；狡猾的；敏锐的；隐约的</li>
<li>delicate 柔和的，清淡的；虚弱的，纤弱的；脆弱的，易碎的；小巧玲珑的，纤细的；微妙的</li>
</ol>
<h1><span id="副词"> 副词</span></h1>
<ol>
<li>principally 主要地；大部分；</li>
<li>rhetorically 讲究修辞地；在修辞学上</li>
</ol>
<h1><span id="搭配"> 搭配</span></h1>
<ol>
<li>yield to 屈从于</li>
<li>could do worse than 不妨试试：表示建议或推荐某事物，虽然可能不是最好的选择，但也不会有什么坏处。</li>
</ol>
]]></content>
      <tags>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记</title>
    <url>/2023/01/29/2023-%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1><span id="pycharm快捷键"> Pycharm快捷键</span></h1>
<h2><span id="格式对齐"> 格式对齐</span></h2>
<p><code>Ctrl + Alt + L</code></p>
<h1><span id="正则表达式快速替换"> 正则表达式快速替换</span></h1>
<h2><span id="使用软件sublime一键替换"> 使用软件Sublime一键替换</span></h2>
<p><strong>步骤</strong>：</p>
<ol>
<li>
<p>使用快捷键 <strong>Ctrl + H</strong>，打开<strong>查找替换窗口</strong>。然后，按下 <strong>Alt + R</strong> 快捷键<strong>开启正则替换模式</strong>。</p>
</li>
<li>
<p>在查找框输入<strong>正则表达式</strong>，替换框输入要替换的内容。</p>
</li>
<li>
<p>点击 <strong>Replace All</strong> 即可。</p>
</li>
</ol>
<p>例: 如要爬取网页的请求头, 则</p>
<p>Find What: <code>(.*): (.*)</code></p>
<p>Replace With: <code>'\1': '\2',</code></p>
<p><strong>注意: 空格不能删去</strong></p>
<h1><span id="案例"> 案例</span></h1>
<h2><span id="1-下载豆瓣前十页"> 1. 下载豆瓣前十页</span></h2>
<p>下载前10页的<code>json</code>数据</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://movie.douban.com/j/chart/top_list?type=17&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=17&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">    url = base_url + data</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_load</span>(<span class="params">page, content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始的页码: &#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束的页码: &#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        get_load(page, content)</span><br></pre></td></tr></table></figure>
<h2><span id="2-在网站站长素材上批量下载图片"> 2. 在网站“站长素材”上批量下载图片</span></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://sc.chinaz.com/tupian/xingganmeinvtupian.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">if</span> (page == <span class="number">1</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/xingganmeinvtupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/xingganmeinvtupian_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content</span>):</span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//img/@alt&#x27;</span>)</span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//img/@data-original&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(len(name_list))</span></span><br><span class="line">    <span class="comment"># for name in name_list:</span></span><br><span class="line">    <span class="comment">#     print(name)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">        name = name_list[i]</span><br><span class="line">        src = src_list[i]</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line">        <span class="comment"># print(name, url)</span></span><br><span class="line">        urllib.request.urlretrieve(url=url, filename = <span class="string">&#x27;./test_images&#x27;</span> + name + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码 &#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码 &#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print(page)</span></span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        down_load(content)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言</category>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>英语六级</title>
    <url>/2023/02/09/2023-%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/</url>
    <content><![CDATA[<h1><span id="语法"> 语法</span></h1>
<h2><span id="单词"> 单词：</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. snail 蜗牛			2. consensus 共识			3. bride 新娘</span><br><span class="line">4. facility 设施		5. fragile 脆弱的			6. resident 居民</span><br><span class="line">7. withstand 经受		8. cradle 摇篮				9. glory 辉煌</span><br><span class="line">10. heaven 天堂</span><br></pre></td></tr></table></figure>
<h2><span id="短语"> 短语：</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. fasten your seat belt 系好你的安全带</span><br><span class="line">2. No one can deny the essential fact that 没人可以否认这个基本的事实</span><br><span class="line">3. There is a growing consensus that 越来越多人认为</span><br><span class="line">4. tourist attractions 旅游景点</span><br></pre></td></tr></table></figure>
<h2><span id="笔记"> 笔记：</span></h2>
<h3><span id="杂记"> 杂记：</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 过去进行时表示动作未完成</span><br><span class="line">例如：</span><br><span class="line">I was doing my homework.</span><br><span class="line">表示我一直在做作业，但是还没有做完</span><br><span class="line">2. 就近原则</span><br><span class="line">*Is* either he or you right?</span><br><span class="line">这里的is跟的是离它最近的he</span><br><span class="line">3. all(单独做主语)指人时，谓语动词用负数，指物时，谓语动词用单数</span><br><span class="line">All *are* present at the meeting.</span><br><span class="line">All *is* going on very well.</span><br><span class="line">4. </span><br><span class="line">&quot;one or two + 复数名词&quot; 做主语，谓语动词用复数</span><br><span class="line">&quot;a/an + 单数名词 + or two&quot; 做主语，谓语动词用单数</span><br><span class="line">例：</span><br><span class="line">One or two days are enough for the work.</span><br><span class="line">A day or two is enough enough for the work.</span><br><span class="line">5. </span><br><span class="line">the + 形容词表示一类人，谓语动词用复数</span><br><span class="line">the + 形容词表式一类物，谓语动词用单数</span><br><span class="line">6. He as well as we, is right.  --- as well as we可不看</span><br><span class="line">7. 关系词在从句中做宾语时可省略</span><br><span class="line">8. 据说我们都通过了六级考试</span><br><span class="line">The news came that we all passed CET-6.</span><br><span class="line">9. 你怎么下午还迟到了呢？</span><br><span class="line">How it came about that you were late in the afternoon is a mystery.</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3><span id="动词时态"> 动词时态：</span></h3>
<h4><span id="一般现在时"> 一般现在时：</span></h4>
<p>如果主句是一般过去时，从句表示的是客观真理或常识，从句仍然用一般现在时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. You, as well as he, are a student.</span><br><span class="line">这里的as well as he是插入语，所以are跟的是You</span><br><span class="line">2. 主将从现</span><br><span class="line">If you call him, he perhaps will come.</span><br></pre></td></tr></table></figure>
<h4><span id="现在进行时"> 现在进行时：</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 进行时表将来</span><br><span class="line">The teacher is coming.</span><br></pre></td></tr></table></figure>
<h4><span id="现在完成时"> 现在完成时：</span></h4>
<p>have/has done</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 什么时候用？</span><br><span class="line">过去某时间发生的事情，对现在*造成影响*</span><br><span class="line">2. just now</span><br><span class="line">一般用于一般过去时</span><br><span class="line">3. just</span><br><span class="line">一般用于现在完成时</span><br><span class="line">4. have been to</span><br><span class="line">去了并且回来了</span><br><span class="line">5. have gone to</span><br><span class="line">去了还没回来</span><br></pre></td></tr></table></figure>
<h4><span id="过去完成时"> 过去完成时</span></h4>
<p>had done</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 什么时候用？</span><br><span class="line">过去的过去</span><br><span class="line">2. It *is* 3 months since I began to study English grammer.</span><br><span class="line">这里只能用一般现在时 代替现在完成时</span><br><span class="line">3. It *was* 3 months since I *had* began to study English grammer.</span><br><span class="line">4. It + be动词 + 一段时间 + since + 一般过去时</span><br><span class="line">5. It has been in bad repairs since he lived in it.</span><br><span class="line">翻译：自从他不住在这里房子就破破烂烂了</span><br><span class="line">since 后边是持续性的动词 live，翻译成相反的意思，不住在这里</span><br></pre></td></tr></table></figure>
<h3><span id="动词时态的比较"> 动词时态的比较</span></h3>
<h4><span id="现在完成时与一般过去时"> 现在完成时与一般过去时</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. His father *was* an English teacher all his life.</span><br><span class="line">这里翻译为他爸爸终生是英语老师，但现在已经去世了</span><br><span class="line">2. His father *has been* an English teacher all his life.</span><br><span class="line">他爸爸终生是英语老师, 但还没去世</span><br></pre></td></tr></table></figure>
<h4><span id="过去进行时与一般过去时"> 过去进行时与一般过去时</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. When we arrived at home, she made the fresh coffee.</span><br><span class="line">如果是when引导的，主从句都用一般过去时，这时when等于after</span><br><span class="line">这里的when等价于after，到了之后才做咖啡</span><br></pre></td></tr></table></figure>
<h3><span id="谓语动词的语态"> 谓语动词的语态</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. </span><br><span class="line">will do --- will be done</span><br><span class="line">have/has done --- have/has been done</span><br><span class="line">is doing --- is being done</span><br><span class="line">2. by then是过去完成时的标志</span><br></pre></td></tr></table></figure>
<h3><span id="并列句"> 并列句</span></h3>
<p>**核心宗旨：**两个完整句不能直接用逗号连接</p>
<h3><span id="判断关系代词和关系副词"> 判断关系代词和关系副词</span></h3>
<p>这里看后面的动词是及物还是不及物</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302101028725.png" alt></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Is it the museum *where(in which)* the exhibition was held?</span><br></pre></td></tr></table></figure>
<h3><span id="虚拟语气"> 虚拟语气</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 主句是从句上的将来时</span><br><span class="line">2. 时态倒退一级</span><br><span class="line">3. You would have laughed to see him jump aside.</span><br><span class="line">你要是看到他跳到一边的样子会大笑起来的。</span><br><span class="line">（这里虚拟语气表示还没看到他跳到一边的样例）</span><br></pre></td></tr></table></figure>
<h3><span id="强调"> 强调：</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. It is + 被强调部分 + that + 原句剩余的部分</span><br></pre></td></tr></table></figure>
<h1><span id="写译"> 写译</span></h1>
<h2><span id="本人写作时用的模板"> 本人写作时用的模板</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. There is a growing consensus that 人们普遍认为</span><br><span class="line">2. Only in this way can we have a rosy and promising life.</span><br><span class="line">3. take the leading role 起到了主导作用</span><br><span class="line">4. No one can deny that 没人可以否认的是</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081247242.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081247557.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081248172.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081248843.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303081249199.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141521749.jpg" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141523451.jpg" alt></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">论说文，谚语警句型作文，书信作文，图表型作文</span><br></pre></td></tr></table></figure>
<h2><span id="写作翻译原则"> 写作翻译原则</span></h2>
<h3><span id="高分原则"> 高分原则：</span></h3>
<ol>
<li>语言最重要，结构其次</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 只要上下有逻辑关系，都要用逻辑关系词</span><br><span class="line">2. 三段论</span><br><span class="line">3. 多用代词替代出现过的名次</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>内容完整，紧扣提纲</li>
</ol>
<h2><span id="单词"> 单词：</span></h2>
<h3><span id="单词多样"> 单词多样：</span></h3>
<h4><span id="用同义词或近义词替换"> 用同义词或近义词替换：</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 认为</span><br><span class="line">think, claim, assert, assume, argue</span><br><span class="line">2. 人们</span><br><span class="line">people, individuals</span><br><span class="line">3. 喜欢</span><br><span class="line">like, be fond of, be keen on, have a passion for</span><br><span class="line">4. 表示原因</span><br><span class="line">because, in that, as, since + 句子</span><br><span class="line">because of, due to, owing to, thanks to + n/ing</span><br><span class="line">5. 表示结果</span><br><span class="line">so, hence, therefore, thereby, thus, consequently, in consequence, as a result</span><br><span class="line">6. 表示“相似性的”对比</span><br><span class="line">likewise, similarly, equally, simultaneously, at the same time, </span><br><span class="line">in the meanwhile</span><br><span class="line">7. 表示”差异性的“对比</span><br><span class="line">but, conversely, alternatively, while, whereas, on the other hand, otherwise</span><br><span class="line">8. 表示递进</span><br><span class="line">besides, also, in addition, moreover, furthermore</span><br><span class="line">9. 表示让步</span><br><span class="line">despite, although, notwithstanding</span><br><span class="line">10. 实际上，事实上</span><br><span class="line">in effect/fact/reality, indeed, virtually</span><br><span class="line">11. 表示引出新对象</span><br><span class="line">① about = concerning = regarding = in respect of 关于</span><br><span class="line">② in terms of 就……而论， 在……方面</span><br><span class="line">③ when it comes to 当提到</span><br><span class="line">12. 表示总结</span><br><span class="line">all in all = in conclusion/general = come to the conclusion 总的来说</span><br><span class="line">13. 表示举例</span><br><span class="line">as an illustration</span><br></pre></td></tr></table></figure>
<h2><span id="句子"> 句子：</span></h2>
<h3><span id="简单句"> 简单句:</span></h3>
<p>多个动词，保留一个，其他动词做非谓语。主动ing，被动ed，目的to。</p>
<p>这里located本来是ing，但是这里是特殊情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 延安位于山西省北部，地处黄河中游，是中国革命的圣地</span><br><span class="line">Yan&#x27;an, located in northern Shanxi Province and in the middle of the Yello River, </span><br><span class="line">is a holy land of Chinese revolution.</span><br></pre></td></tr></table></figure>
<h3><span id="被动"> 被动</span></h3>
<h4><span id="使用时机"> 使用时机：</span></h4>
<p>当一句话用人，或人称代词做主语的时候</p>
<h4><span id="笔记"> 笔记：</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. spread 只有主动用法，用主动表示被动</span><br></pre></td></tr></table></figure>
<h3><span id="复合句"> 复合句</span></h3>
<h4><span id="1-主语从句"> 1. 主语从句：</span></h4>
<p><strong>It is …… that</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. It is common knowledge that……  ……是一个常识</span><br><span class="line">2. It is my belief that……         我认为……</span><br><span class="line">3. It is beyond dispute that 	  ……是毋庸置疑的	</span><br></pre></td></tr></table></figure>
<h4><span id="2-同位语的使用"> 2. 同位语的使用：</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同位语就是解释名词的成分</span><br></pre></td></tr></table></figure>
<h4><span id="3-定语和定语从句"> 3. 定语和定语从句</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修饰名词的就是定语</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 非谓语修饰名词</span><br><span class="line">I love the girl smiling to me.</span><br></pre></td></tr></table></figure>
<h4><span id="4-状语和状语从句"> 4. 状语和状语从句</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">随便放在哪个部分</span><br></pre></td></tr></table></figure>
<h4><span id="5-三大经典句型"> 5. 三大经典句型</span></h4>
<h5><span id="强调句型"> 强调句型</span></h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It is…… that/who……</span><br><span class="line">强调句这里只有is和was，没有其他时态</span><br><span class="line">句子的所有部分都可以强调，唯独不能强调*谓语*</span><br></pre></td></tr></table></figure>
<h5><span id="虚拟语气"> 虚拟语气</span></h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表示与事实相反或者语气委婉</span><br><span class="line"></span><br><span class="line">It is high time that    是……的时候</span><br><span class="line">从句用过去式</span><br><span class="line">例如：使我们不要轻信网上虚假信息的时候了</span><br><span class="line">It is high time that all children and adults by no means followed </span><br><span class="line">these false information online.</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302131432319.png" alt></p>
<h5><span id="倒装"> 倒装</span></h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把句子写成一般疑问句的形式就是倒装</span><br><span class="line">只要句子中有形容词副词的地方都可以写成so……that……的句型</span><br><span class="line"></span><br><span class="line">具体用法：</span><br><span class="line">（1）否定词放在句首的时候用倒装</span><br><span class="line">例如：I have never been to other countries except Japan.</span><br><span class="line">     Never have I been to other countries except Japan.</span><br><span class="line">（2）含有so……that……结构的句子将so引导的部分置于句首时用倒装</span><br><span class="line">例如：He was so excited that he cannot help laughing at midnight.</span><br><span class="line">     So excited was he that he cannot helo laughing at midnight.</span><br><span class="line">（3）“only + 状语”位于句首时用倒装</span><br><span class="line">例如：His girlfriend called his name only once.</span><br><span class="line">     Only once did his girlfriend call his name.</span><br><span class="line">（4）as引导让步状语从句的倒装</span><br><span class="line">1. 形容词放句首的倒装</span><br><span class="line">Ugly as I look, I am tender.</span><br><span class="line">虽然我很丑，但是我很温柔。（这里ugly后面不接助动词）</span><br><span class="line">2. 名词放句首的倒装</span><br><span class="line">切记名词放句首的倒装，不能有冠词。也就是不能写成an old man或the old man。</span><br><span class="line">Old man as he is, I cannot forgive his bad behavior.</span><br></pre></td></tr></table></figure>
<h2><span id="段落"> 段落：</span></h2>
<h4><span id="段落的论证方式"> 段落的论证方式</span></h4>
<h5><span id="1-因果论证"> 1. 因果论证</span></h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用连接词：</span><br><span class="line"></span><br><span class="line">b results from a; 			b因为a</span><br><span class="line">a result in b;    			a导致b</span><br><span class="line">b is a result of &#x27;a&#x27;		b是a的结果</span><br></pre></td></tr></table></figure>
<h5><span id="2-分类论证"> 2. 分类论证</span></h5>
<h5><span id="3-举例论证"> 3. 举例论证</span></h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">举例开头：</span><br><span class="line">有很多例子可以解释这种现象，但这个例子足够了。</span><br><span class="line">Countless cases can account for the phenomenon, but this will suffice.</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">the story tells us that……</span><br></pre></td></tr></table></figure>
<h2><span id="议论文"> 议论文</span></h2>
<h3><span id="第一段"> 第一段：</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">引出文章中心加个人观点</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132006095.png" alt></p>
<h3><span id="第二段"> 第二段：</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132009575.png" alt></p>
<h3><span id="第三段"> 第三段</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132011714.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132014736.png" alt></p>
<h2><span id="书信作文"> 书信作文</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132027691.png" alt="image-20230213202740539"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132028411.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302132028889.png" alt></p>
<h2><span id="漫画作文"> 漫画作文</span></h2>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303062214316.png" alt></li>
</ol>
<h2><span id="图表作文"> 图表作文</span></h2>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303062215548.png" alt></li>
</ol>
<h2><span id="写作带练课程"> 写作带练课程</span></h2>
<h3><span id="短语"> 短语</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. be exposed to 接触</span><br></pre></td></tr></table></figure>
<h3><span id="句子模板"> 句子模板</span></h3>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303062153463.png" alt></li>
</ol>
<h3><span id="第一段"> 第一段</span></h3>
<h4><span id="用于引出话题的句子"> 用于引出话题的句子</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051509437.png" alt></p>
<h3><span id="第二段"> 第二段</span></h3>
<h4><span id="用于提出论点的句子"> 用于提出论点的句子</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051518166.png" alt></p>
<h4><span id="用于导入论据的句子"> 用于导入论据的句子</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051522818.png" alt></p>
<p>名人:</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051523592.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303051523541.png" alt></p>
<h2><span id="翻译带练课程"> 翻译带练课程</span></h2>
<h3><span id="短语"> 短语</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Economical Zone 经济特区</span><br></pre></td></tr></table></figure>
<h3><span id="散记"> 散记</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 朝代前必须加The</span><br></pre></td></tr></table></figure>
<h1><span id="听力"> 听力</span></h1>
<h2><span id="单词"> 单词：</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. accommodating 乐于助人的			2. arrogant 傲慢的	</span><br><span class="line">3. contagious 传染性的				 4. groundless 无根据的</span><br></pre></td></tr></table></figure>
<h2><span id="短语"> 短语：</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. tell me about it 可不是嘛			2. subject to 屈服于</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302151628007.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302151641054.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161741968.png" alt></p>
<h1><span id="阅读"> 阅读</span></h1>
<h2><span id="单词"> 单词：</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. imperative 迫切的			2. neutral 中立的</span><br><span class="line">3. liberal 开明的			4. esteem 尊重</span><br><span class="line">5. cousin 表妹				6. cereal 谷类食品</span><br><span class="line">7. pronounced 明显的			7. needy 贫穷的</span><br><span class="line">8. automation 自动化			9. ingenuity 聪明才智</span><br></pre></td></tr></table></figure>
<h2><span id="短语"> 短语：</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. thumps-up 竖起大拇指（同意）			2. for instance 例如</span><br></pre></td></tr></table></figure>
<hr>
<h1><span id="新东方"> 新东方</span></h1>
<h2><span id="时间分配"> 时间分配</span></h2>
<p>阅读：50min</p>
<p>翻译：20min</p>
<h2><span id="阅读"> 阅读</span></h2>
<h3><span id="定位关键词"> 定位关键词</span></h3>
<p>1.大数符</p>
<blockquote>
<p>大写字母，数字，特殊符号</p>
</blockquote>
<p>2.核心名次（短语）</p>
<p><code>定位词2-3个</code></p>
]]></content>
      <categories>
        <category>英语</category>
        <category>六级</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>六级</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯备考记录</title>
    <url>/2023/02/07/2023-%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E8%80%83%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1><span id="大纲"> </span></h1>
<h2><span id="dp"> DP</span></h2>
<h3><span id="4406-积木画状压dp"> </span></h3>
<p>很重要，必须掌握</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g[<span class="number">4</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//前0列已经摆好，第1列的状态为0（未摆）的摆法为1种</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="comment">// 如果第i列的状态j可以转化到第i+1的状态k，那么就把此时f[i][j]加上</span></span><br><span class="line">                <span class="comment">// 循环 4 * 4 次把所有可能出现的状态加上</span></span><br><span class="line">                f[i + <span class="number">1</span>][k] = (f[i + <span class="number">1</span>][k] + f[i][j] * g[j][k]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n + <span class="number">1</span>][<span class="number">0</span>]; <span class="comment">//前n列已经摆好，且第n+1列的状态为0（未摆）的摆法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="1089-烽火传递"> </span></h3>
<h4><span id="题解"> 题解：</span></h4>
<p><a href="https://www.acwing.com/solution/content/27813/">https://www.acwing.com/solution/content/27813/</a></p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N], f[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> tt = <span class="number">0</span>, hh = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[hh] &lt; i - m) hh++;</span><br><span class="line">        f[i] = f[q[hh]] + w[i];</span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; f[q[tt]] &gt;= f[i]) tt--;</span><br><span class="line">        q[++tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - m + <span class="number">1</span>; i &lt;= n; i++) res = <span class="built_in">min</span>(res, f[i]);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="3417-砝码称重"> </span></h3>
<h4><span id="题解"> </span></h4>
<h4><span id="代码"> 代码:</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f[i][j]， 前i个砝码是否能拼出j </span></span><br><span class="line"><span class="comment">// 最终答案遍历f[n][1~k] </span></span><br><span class="line"><span class="comment">// 最后一步， 选i或者不选i  </span></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">bool</span> f[<span class="number">110</span>][N];</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    	cin &gt;&gt; w[i];</span><br><span class="line">    	sum += w[i];</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">    		f[i][j] = f[i - <span class="number">1</span>][j] || f[i - <span class="number">1</span>][<span class="built_in">abs</span>(j - w[i])] || f[i - <span class="number">1</span>][j + w[i]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sum; j++) <span class="keyword">if</span> (f[n][j]) res++;</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) &#123;</span></span><br><span class="line">    <span class="comment">//     solve();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="1553-蓝桥杯2021初赛-路径"> </span></h3>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到i的最短距离 </span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求到x的最短距离 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">21</span>); i &lt; x; i++) &#123;</span><br><span class="line">		dist[x] = <span class="built_in">min</span>(dist[x], x * i / <span class="built_in">gcd</span>(x, i) + dist[i]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	printf(&quot;dist[%d] = %d\n&quot;, x, dist[x]);</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    a = <span class="number">1</span>, b = <span class="number">2021</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="comment">//    for (int i = 1; i &lt;= 2021; i++) dist[i] = 0;</span></span><br><span class="line">	dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++) &#123;</span><br><span class="line">    	<span class="built_in">dfs</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    cout &lt;&lt; dist[<span class="number">2021</span>] &lt;&lt; endl;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) &#123;</span></span><br><span class="line">    <span class="comment">//     solve();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="3420-括号序列"> </span></h3>
<h4><span id="思路"> 思路：</span></h4>
<p><a href="https://www.acwing.com/solution/content/75961/">https://www.acwing.com/solution/content/75961/</a></p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line">LL dp[N][N];</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function">LL <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)<span class="comment">//一个括号一个括号的判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//不用考虑dp[i][0] 因为dp[i-1][-1]是不合法的情况 不存在 为0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=(dp[i<span class="number">-1</span>][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>])%MOD;<span class="comment">//特判防止越界 这里数据短，用的是优化前的推断</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                 dp[i][j]=(dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + dp[i][j<span class="number">-1</span>])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        <span class="keyword">if</span>(dp[len][i]) <span class="keyword">return</span> dp[len][i];<span class="comment">//我们需要的就是长度为len添加括号的合法情况，而从前往后遍历出现的第一个有可能的情况就是需要括号数最少的情况，因为左括号可以加很多个，我们仅需添加最少的情况</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);<span class="comment">//从下标为1开始</span></span><br><span class="line">    len=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    LL l=<span class="built_in">func</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(str+<span class="number">1</span>,str+len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>) str[i]=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> str[i]=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL r=<span class="built_in">func</span>();</span><br><span class="line">    cout&lt;&lt;l*r%MOD;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="最短hamilton路径状压dp"> </span></h3>
<h4><span id="思路"> 思路：</span></h4>
<p><a href="https://www.acwing.com/solution/content/18533/">https://www.acwing.com/solution/content/18533/</a></p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"><span class="comment">// 所有从0走到了j，且状态是i的步数的最小值</span></span><br><span class="line"><span class="type">int</span> f[M][N], w[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;&gt; k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                        f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - (<span class="number">1</span> &lt;&lt; j)][k] + w[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="链表"> 链表</span></h2>
<hr>
<h3><span id="消除游戏"> </span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[l[x]] == <span class="string">&#x27;@&#x27;</span> || s[r[x]] == <span class="string">&#x27;@&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 将第一次的边缘字符全部加入pos	 </span></span><br><span class="line">	<span class="keyword">if</span> (s[l[x]] == s[x] &amp;&amp; s[x] != s[r[x]]) &#123;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(x), pos.<span class="built_in">push_back</span>(r[x]);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span> (s[l[x]] != s[x] &amp;&amp; s[x] == s[r[x]]) &#123;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(l[x]), pos.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	r[l[x]] = r[x];</span><br><span class="line">	l[r[x]] = l[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">	s[<span class="number">0</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">	s[n + <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		l[i] = i - <span class="number">1</span>; r[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这样可保证将第一次序列要删除的数全部删除 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;  i++) &#123;</span><br><span class="line">		<span class="built_in">check</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; pos.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">		<span class="keyword">for</span> (; i &lt; pos.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="type">int</span> j = pos[i];</span><br><span class="line">			<span class="keyword">if</span> (st[j]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">			<span class="built_in">remove</span>(j);</span><br><span class="line">			st[j] = <span class="literal">true</span>; <span class="comment">//标记删除</span></span><br><span class="line">			<span class="comment">// 将删除后有可能继续组成边缘字符的字符加入p </span></span><br><span class="line">			p.<span class="built_in">push_back</span>(l[j]);</span><br><span class="line">			p.<span class="built_in">push_back</span>(r[j]); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 将下一轮删除的数check一下 </span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!st[p[j]]) &#123;</span><br><span class="line">				<span class="built_in">check</span>(p[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">			cout &lt;&lt; s[i];</span><br><span class="line">			ok = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ok) cout &lt;&lt; <span class="string">&quot;EMPTY&quot;</span> &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="树"> 树</span></h2>
<h3><span id="1497-树的遍历"> </span></h3>
<p>需要牢记</p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos[N]; <span class="comment">// 中序节点对应坐标</span></span><br><span class="line"><span class="type">int</span> h[N], z[N];</span><br><span class="line"><span class="type">int</span> L[N], R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> zl, <span class="type">int</span> zr, <span class="type">int</span> hl, <span class="type">int</span> hr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> root = h[hr];</span><br><span class="line">    <span class="type">int</span> k = pos[root];</span><br><span class="line">    <span class="keyword">if</span> (zl &lt; k) L[root] = <span class="built_in">build</span>(zl, k - <span class="number">1</span>, hl, k - zl + hl - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (zr &gt; k) R[root] = <span class="built_in">build</span>(k + <span class="number">1</span>, zr, k - zl + hl, hr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (L[t]) q.<span class="built_in">push</span>(L[t]);</span><br><span class="line">        <span class="keyword">if</span> (R[t]) q.<span class="built_in">push</span>(R[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; z[i];</span><br><span class="line">        pos[z[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> root = <span class="built_in">build</span>(<span class="number">1</span>, n, <span class="number">1</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="数学"> 数学</span></h2>
<h3><span id="97-约数之和"> </span></h3>
<h3><span id="题解"> 题解：</span></h3>
<p><a href="https://www.acwing.com/solution/content/30343/">https://www.acwing.com/solution/content/30343/</a></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302181150533.png" alt></p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">9901</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    a %= mod;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) <span class="keyword">return</span> (<span class="built_in">sum</span>(p, k - <span class="number">1</span>) + <span class="built_in">qmi</span>(p, k - <span class="number">1</span>)) % mod;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + <span class="built_in">qmi</span>(p, k / <span class="number">2</span>)) * <span class="built_in">sum</span>(p, k / <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a / i; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// s表示i因子的个数</span></span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (a % i == <span class="number">0</span>) &#123;</span><br><span class="line">                s++;</span><br><span class="line">                a /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// sum(i, k)表示算i^0 + i^1 + …… + i^(k - 1)</span></span><br><span class="line">            <span class="comment">// 因为这里是i^0 + i^1 + …… + i^(b * s)，所以是sum(i, b * s + 1)</span></span><br><span class="line">            res = res * <span class="built_in">sum</span>(i, b * s + <span class="number">1</span>) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">1</span>) res = res * <span class="built_in">sum</span>(a, b + <span class="number">1</span>) % mod;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) res = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="kmp"> KMP</span></h2>
<h3><span id="141-周期"> </span></h3>
<h3><span id="题解视频"> 题解视频：</span></h3>
<p><a href="https://www.acwing.com/video/2793/">https://www.acwing.com/video/2793/</a></p>
<h3><span id="代码"> 代码：</span></h3>
<p>这道题要加深记忆</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; str[j + <span class="number">1</span>] != str[i]) j = ne[j];</span><br><span class="line">            <span class="keyword">if</span> (str[i] == str[j + <span class="number">1</span>]) j++;</span><br><span class="line">            ne[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>, T++);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> t = i - ne[i]; </span><br><span class="line">            <span class="keyword">if</span> (i % t == <span class="number">0</span> &amp;&amp; i / t &gt;= <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, i / t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="bfs"> BFS</span></h2>
<h3><span id="限定迭代层数"> 限定迭代层数</span></h3>
<h4><span id="1562-微博转发"> </span></h4>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>, M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, L;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    st[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--) &#123;</span><br><span class="line">            <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = h[t]; ~j; j = ne[j]) &#123;</span><br><span class="line">                <span class="type">int</span> x = e[j];</span><br><span class="line">                <span class="keyword">if</span> (!st[x]) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                    q.<span class="built_in">push</span>(x);</span><br><span class="line">                    st[x] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; L;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cnt);</span><br><span class="line">        <span class="keyword">while</span> (cnt--) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">add</span>(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="博弈论"> 博弈论</span></h2>
<h3><span id="集合-nim游戏"> </span></h3>
<h3><span id="思路"> 思路：</span></h3>
<p><strong>sg</strong>函数</p>
<p><a href="https://www.acwing.com/solution/content/23435/">题解</a></p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k, n;</span><br><span class="line"><span class="type">int</span> s[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (~f[x]) <span class="keyword">return</span> f[x];</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= s[i]) S.<span class="built_in">insert</span>(<span class="built_in">sg</span>(x - s[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!S.<span class="built_in">count</span>(i)) <span class="keyword">return</span> f[x] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        res ^= <span class="built_in">sg</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="并查集"> 并查集</span></h2>
<h3><span id="七段码"> </span></h3>
<h4><span id="代码"> 代码:</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> used[N], res, e[N][N], fa[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*	</span></span><br><span class="line"><span class="comment">		连边建图，e[i][j] == 1表示第i段和第j段灯管相邻</span></span><br><span class="line"><span class="comment">		a b c d e f g</span></span><br><span class="line"><span class="comment">		1 2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	e[<span class="number">1</span>][<span class="number">2</span>] = e[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">2</span>][<span class="number">1</span>] = e[<span class="number">2</span>][<span class="number">7</span>] = e[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">3</span>][<span class="number">2</span>] = e[<span class="number">3</span>][<span class="number">4</span>] = e[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">4</span>][<span class="number">3</span>] = e[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">5</span>][<span class="number">4</span>] = e[<span class="number">5</span>][<span class="number">6</span>] = e[<span class="number">5</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">6</span>][<span class="number">1</span>] = e[<span class="number">6</span>][<span class="number">5</span>] = e[<span class="number">6</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">	e[<span class="number">7</span>][<span class="number">2</span>] = e[<span class="number">7</span>][<span class="number">3</span>] = e[<span class="number">7</span>][<span class="number">5</span>] = e[<span class="number">7</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fa[x] == x ? x : (fa[x] = <span class="built_in">find</span>(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u &gt; <span class="number">7</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++ ) fa[i] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (e[i][j] &amp;&amp; used[i] &amp;&amp; used[j]) &#123;</span><br><span class="line">					<span class="type">int</span> fx = <span class="built_in">find</span>(i), fy = <span class="built_in">find</span>(j);</span><br><span class="line">					<span class="keyword">if</span> (fx != fy) fa[fx] = fy;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fa[i] == i &amp;&amp; used[i]) cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (cnt == <span class="number">1</span>) res++;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		used[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">		used[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="暴力"> 暴力</span></h2>
<h3><span id="日期统计"> 日期统计</span></h3>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">string s = <span class="string">&quot;24919823647759503875815861830379270588570991944686338516346707827689565614010094809128502533&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> days[<span class="number">13</span>] = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    string year = s.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (year != <span class="string">&quot;2023&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    string month = s.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    string day = s.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="string">&quot;00&quot;</span> || month &gt; <span class="string">&quot;12&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        m = m * <span class="number">10</span> + month[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        d = d * <span class="number">10</span> + day[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; <span class="number">1</span> || d &gt; days[m]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">    set&lt;string&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt; s.<span class="built_in">size</span>(); i1++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i1] != <span class="string">&#x27;2&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i2 = i1 + <span class="number">1</span>; i2 &lt; s.<span class="built_in">size</span>(); i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i2] != <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i3 = i2 + <span class="number">1</span>; i3 &lt; s.<span class="built_in">size</span>(); i3++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i3] != <span class="string">&#x27;2&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i4 = i3 + <span class="number">1</span>; i4 &lt; s.<span class="built_in">size</span>(); i4++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[i4] != <span class="string">&#x27;3&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i5 = i4 + <span class="number">1</span>; i5 &lt; s.<span class="built_in">size</span>(); i5++) </span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i6 = i5 + <span class="number">1</span>; i6 &lt; s.<span class="built_in">size</span>(); i6++) </span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> i7 = i6 + <span class="number">1</span>; i7 &lt; s.<span class="built_in">size</span>(); i7++) </span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> i8 = i7 + <span class="number">1</span>; i8 &lt; s.<span class="built_in">size</span>(); i8++) &#123;</span><br><span class="line">                                    string k = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                                    string t = k + s[i1] + s[i2] +s[i3] +s[i4] +s[i5] +s[i6] +s[i7] +s[i8];</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="built_in">check</span>(t)) &#123;</span><br><span class="line">                                        res++;</span><br><span class="line">                                        S.<span class="built_in">insert</span>(t);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; S.size() &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="01-串的熵"> 01 串的熵</span></h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> eps = <span class="number">1e-2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> cnt1, cnt2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">p</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">double</span>)x / <span class="number">23333333.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> p1, <span class="type">double</span> p2)</span> </span>&#123;</span><br><span class="line">	<span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">	res += -p1 * cnt1 * <span class="built_in">log2</span>(p1);</span><br><span class="line">	res += -p2 * cnt2 * <span class="built_in">log2</span>(p2);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">23333333</span> / <span class="number">2</span> + <span class="number">1</span>; i &lt;= <span class="number">23333333</span>; i++) &#123;</span><br><span class="line">		cnt1 = i, cnt2 = <span class="number">23333333</span> - i;</span><br><span class="line">		<span class="type">double</span> p1 = <span class="built_in">p</span>(i), p2 = <span class="built_in">p</span>(<span class="number">23333333</span> - i);</span><br><span class="line">		<span class="type">double</span> res = <span class="built_in">f</span>(p1, p2);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">fabs</span>(res - <span class="number">11625907.5798</span>) &lt; eps) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="number">23333333</span> - i &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//IOS ;</span></span><br><span class="line">	<span class="comment">// int T;</span></span><br><span class="line">	<span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">	<span class="comment">// while (T--) solve();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计笔记</title>
    <url>/2023/01/28/2023-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2><span id="散记"> 散记：</span></h2>
<ol>
<li></li>
</ol>
<p>getline()是string流的函数，只能用于string类型的输入操作。</p>
<p>cin.getline是std流的函数，用于char*类型的输入操作。</p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s); <span class="comment">//后面还可跟一个字符参数，表示输入到这个字符处结束</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[<span class="number">100</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(g, <span class="number">99999</span>) <span class="comment">//第二个参数是输入多少个，后面还可跟一个字符参数，表示输入到这个字符处结束</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>费马小定理</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303152225305.png" alt></p>
<ol start="3">
<li>冒泡排序如果有k个逆序对，那么至少需要交换k次才能使序列有序。无序序列的一个数，如果用冒泡将之排序，如果前面有i个数比它大，后面有j个数比它小，那么它需要操作i+j次才能到有序的位置。</li>
</ol>
<h2><span id="dp"> DP</span></h2>
<hr>
<h3><span id="波动数列原题链接"> 波动数列</span></h3>
<p>观察这个数列：</p>
<p><strong>1 3 0 2 -1 1 -2 …</strong></p>
<p>这个数列中后一项总是比前一项增加2或者减少3，<strong>且每一项都为整数</strong>。</p>
<p>栋栋对这种数列很好奇，他想知道长度为 n和为 s 而且后一项总是比前一项增加 a 或者减少 b 的整数数列可能有多少种呢？</p>
<h4><span id="输入格式"> 输入格式</span></h4>
<p>共一行，包含四个整数 n,s,a,b，含义如前面所述。</p>
<h4><span id="输出格式"> 输出格式</span></h4>
<p>共一行，包含一个整数，表示满足条件的方案数。</p>
<p>由于这个数很大，请输出方案数除以 100000007 的余数。</p>
<h4><span id="数据范围"> 数据范围</span></h4>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>n</mi><mo>&lt;</mo><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">1&lt;=n&lt;=1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>&lt;</mo><mo>=</mo><mi>s</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">-10^9&lt;=s&lt;=10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">1&lt;=a,b&lt;=10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></p>
<h4><span id="输入样例"> 输入样例：</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 10 2 3</span><br></pre></td></tr></table></figure>
<h4><span id="输出样例"> 输出样例：</span></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h4><span id="样例解释"> 样例解释</span></h4>
<p>两个满足条件的数列分别是2 4 1 3和7 4 1 -2。</p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, MOD = <span class="number">100000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_mod</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>   <span class="comment">// 求a除以b的正余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a % b + b) % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, s, a, b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][<span class="built_in">get_mod</span>(j - a * (n - i), n)] + f[i - <span class="number">1</span>][<span class="built_in">get_mod</span>(j + b * (n - i), n)]) % MOD;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n - <span class="number">1</span>][<span class="built_in">get_mod</span>(s, n)] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4><span id="题解"> 题解：</span></h4>
<p><a href="https://www.acwing.com/solution/content/9223/">参考题解</a></p>
<hr>
<h3><span id="最大子阵原题链接"> 最大子阵</span></h3>
<h4><span id="描述"> 描述</span></h4>
<span id="more"></span>
<p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。<br>
其中，A的子矩阵指在A中行和列均连续的一块。</p>
<h4><span id="输入描述"> 输入描述</span></h4>
<p>输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。<br>
接下来n行，每行m个整数，表示矩阵A。<br>
对于50%的数据，1&lt;=n, m&lt;=50；<br>
对于100%的数据，1&lt;=n, m&lt;=500，A中每个元素的绝对值不超过5000。</p>
<h4><span id="输出描述"> 输出描述</span></h4>
<p>输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。</p>
<p>用例输入 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">-1 -4 3</span><br><span class="line">3 4 -1</span><br><span class="line">-5 -2 8</span><br></pre></td></tr></table></figure>
<p>用例输出 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<h4><span id="思路"> 思路：</span></h4>
<p>先用<code>f[i][j]</code>预处理出<strong>前i行第j列前缀和</strong>，再枚举每一个行区间，通过在线算法，得到每个行区间的前j列的最大值，最终得到答案</p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="comment">// # define PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f[i][j] 前i行第j列前缀和</span></span><br><span class="line"><span class="type">int</span> w[N][N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j] + x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">                t += f[j][k] - f[i - <span class="number">1</span>][k];</span><br><span class="line">                res = <span class="built_in">max</span>(res, t);</span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// int T;</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="comment">// while (T--) &#123;</span></span><br><span class="line">    <span class="comment">//     solve();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="282-石子合并"> </span></h3>
<h4><span id="思路"> 思路：</span></h4>
<p>区间dp</p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> f[N][N]; <span class="comment">// f[i][j] 表示 合并 (i, j)的石子的代价的最小值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里我的理解是，长度大的是由长度小的推来的，所以第一维是len从小到大枚举</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i, r = i + len - <span class="number">1</span>;</span><br><span class="line">            f[l][r] = <span class="number">1e8</span>;</span><br><span class="line">            <span class="comment">// 枚举l到r中的分段点k分成两段再合并，而这两段又有更短的len推来</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt; r; k++) &#123;</span><br><span class="line">                f[l][r] = <span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="1051-最大的和"> </span></h3>
<h4><span id="思路"> 思路：</span></h4>
<p>dp + 前后缀分离</p>
<p><strong>题目重点</strong>：序列不重合</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N], g[N], h[N]; <span class="comment">//g是前缀，h是后缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    </span><br><span class="line">    g[<span class="number">0</span>] = -INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, s = -INF; i &lt;= n; i++) &#123;</span><br><span class="line">        s = <span class="built_in">max</span>(s, <span class="number">0</span>) + w[i];</span><br><span class="line">        g[i] = <span class="built_in">max</span>(g[i - <span class="number">1</span>], s); <span class="comment">// g保存连续前缀的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    h[n + <span class="number">1</span>] = -INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n, s = -INF; i; i--) &#123;</span><br><span class="line">        s = <span class="built_in">max</span>(s, <span class="number">0</span>) + w[i];</span><br><span class="line">        h[i] = <span class="built_in">max</span>(h[i + <span class="number">1</span>], s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// g[i]不一定是以i结尾的最大前缀，同理h</span></span><br><span class="line">        <span class="comment">// 因为题目要求不重合</span></span><br><span class="line">        <span class="comment">// 所以答案便是g[i] + h[i + 1]</span></span><br><span class="line">        res = <span class="built_in">max</span>(res, g[i] + h[i + <span class="number">1</span>]); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="1215-小朋友排队"> </span></h3>
<h3><span id="思路"> 思路：</span></h3>
<p>冒泡排序如果有k个逆序对，那么至少需要交换k次才能使序列有序。无序序列的一个数，如果用冒泡将之排序，如果前面有i个数比它大，后面有j个数比它小，那么它需要操作i+j次才能到有序的位置。</p>
<p>这道题每个数都需要i+j次操作，所以用树状数组求出来就行了</p>
<h3><span id="代码"> 代码:</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], tr[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; N; i += <span class="built_in">lowbit</span>(i)) tr[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 树状数组从1开始，所以这里映射从1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">        h[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将坐标出现次数维护到树状数组</span></span><br><span class="line">    <span class="comment">// 找左边出现多少次比当前数大的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum[i] = <span class="built_in">query</span>(N - <span class="number">1</span>) - <span class="built_in">query</span>(h[i]);</span><br><span class="line">        <span class="comment">// 询问之后才将之加入tr，方便后序查询</span></span><br><span class="line">        <span class="built_in">add</span>(h[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="keyword">sizeof</span> tr);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找右边出现多少次比当前数小的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sum[i] += <span class="built_in">query</span>(h[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">add</span>(h[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res += (LL)sum[i] * (sum[i] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2><span id="差分"> 差分</span></h2>
<h3><span id="增减序列"> </span></h3>
<h4><span id="问题"> 问题：</span></h4>
<p>求至少需要多少次操作才能使数列中的所有数都一样，并求出在保证最少次数的前提下，最终得到的数列可能有多少种。</p>
<h4><span id="思路"> 思路</span></h4>
<p>想到差分，差分数组b[i] = a[i] - a[i - 1]，可把本题题意转化为求b[2 ~ n]全为0的状态，因为b[i]=0说明a[i]和a[i-1]相等，而a[1]不受限制可为任意数。所以最小操作次数为b[2 ~ n]中<code>正数和</code>和<code>负数和</code>的差的最小值加上它们的绝对值，即转化为它们的最大值，因为通过+1和-1把某些b[i]转成了0，但它们<code>正数和</code>和<code>负数和</code>的差可能不为0，那么可以通过改变b[1]和剩下的不能改变的数，那么就可以让b[1]不同，也就是最后相等的序列a不同，所以b[i]可以变成的数也就是题目所求最多的可能数，也就是abs(<code>正数和</code>,<code>负数和</code>)+1,为什么+1呢，因为b[1]也可以被剩下的改变0次。</p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) b[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    LL p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>) p += b[i];</span><br><span class="line">        <span class="keyword">else</span> q -= b[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(p, q) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">abs</span>(p - q) + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="二分"> 二分</span></h2>
<h3><span id="acwing-102-最佳牛围栏"> </span></h3>
<h3><span id="思路"> 思路：</span></h3>
<p>s[i]保存的是前缀和减去前i项平均数乘i，即当s[i]大于0即可说明前i项的平均数比给定的mid大，所以只要满足一次**if (s[i] &gt;= min_v)**说明存在一段不小于F的序列平均数比mid大，返回。</p>
<p>因为可能出现r正好为整数的情况,那么l就比r小，得到的数会缺失精度，如l=4.99,r=5，我们希望的数是5，但最终却得到的是4</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, F;</span><br><span class="line"><span class="type">double</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + a[i] - mid;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> min_v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = F; i &lt;= n; i++) &#123;</span><br><span class="line">        min_v = <span class="built_in">min</span>(min_v, s[i - F]);</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= min_v) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; F;</span><br><span class="line">    <span class="type">double</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i], r = <span class="built_in">max</span>(r, a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l &lt; r - <span class="number">1e-5</span>) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)(r * <span class="number">1000</span>) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="最短路"> 最短路</span></h2>
<h3><span id="851-spfa求最短路"> </span></h3>
<h4><span id="理解"> 理解：</span></h4>
<p>这里的队列不用是优先队列，因为随机遍历一条边，这条边与它连接的点的dist可能发生改变，所以就只改变与它连接的点，就达到目的了，不用分先后。如果后面还会被改变，那么一定会将之入队，继续判断与那个点相连的点是否还会改变。</p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, idx;</span><br><span class="line"><span class="type">int</span> h[N], ne[N], w[N], e[N], dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 不用优先队列</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="comment">// 这里是提高效率，被入队的点就不用再入队了，因为如果这个点被更新了，</span></span><br><span class="line">                <span class="comment">// 那么它对应的信息也已经更新，下次再遍历时用的就是更新后的值</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="comment">// 因为是队列优化，每次操作的都是相连的边，不会出现无效边，</span></span><br><span class="line">    <span class="comment">// 即无效边不能被更新，只能是0x3f3f3f3f</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="哈希"> 哈希</span></h2>
<hr>
<h3><span id="笔记"> 笔记：</span></h3>
<ol>
<li>玄学<strong>p = 131 或 p = 13331</strong></li>
<li>不能映射成<strong>0</strong></li>
<li><a href="https://www.acwing.com/solution/content/30169/">拉链法+开放寻址法</a></li>
</ol>
<h3><span id="841-字符串哈希"> </span></h3>
<h4><span id="思路"> 思路：</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302081627605.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302081644186.png" alt></p>
<h4><span id="代码"> 代码：</span></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里用ULL，当爆了之后自动取模</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="comment">// h代表哈希值，p代表进制数</span></span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    比如我要算一个数为123的哈希值，假设进制P为10</span></span><br><span class="line"><span class="comment">    那么他们对应的进位为P^2, P^1, P^0;</span></span><br><span class="line"><span class="comment">    那么我肯定是1  1*P+2 (1*P+2)*P+3</span></span><br><span class="line"><span class="comment">    分别等于 1 12 123</span></span><br><span class="line"><span class="comment">    这样就得到了它们对应的哈希值</span></span><br><span class="line"><span class="comment">    但是我们可以发现</span></span><br><span class="line"><span class="comment">    虽然从左到右进制为是从高到低，但是值却是从小到大(1 12 123)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// h是前缀和哈希值</span></span><br><span class="line">        <span class="comment">// 假如12，那么第i为是3，则前i的哈希h为12 * P + 3</span></span><br><span class="line">        <span class="comment">// 此时说明左边还是最高位</span></span><br><span class="line">        h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">        <span class="comment">// p[i]代表P^i,用来快速求左移i位对应的P^i</span></span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="4407-扫雷"> </span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M 映射成了最大值十倍的质数，越大越不容易起冲突，时间复杂度越低</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, M = <span class="number">999997</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, r;</span><br><span class="line">&#125;cir[N];</span><br><span class="line">LL h[M]; <span class="comment">// h[i]中的i是哈希映射的值，具有唯一性</span></span><br><span class="line"><span class="comment">// id[i]中的i是哈希映射的值，具有唯一性, id[i]保存i处哈希值对应炸弹点的序号</span></span><br><span class="line"><span class="comment">// 可通过这个序号找改序号的炸弹的信息</span></span><br><span class="line"><span class="type">int</span> id[M];  </span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目的是让由x，y得到的哈希数不重复</span></span><br><span class="line"><span class="function">LL <span class="title">get_key</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">1000000001ll</span> + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放定址法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x ,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    LL key = <span class="built_in">get_key</span>(x, y);</span><br><span class="line">    <span class="type">int</span> t = (key % M + M) % M;</span><br><span class="line">    <span class="comment">// 当该处是空位或者该(x, y)已经find过了，就返回</span></span><br><span class="line">    <span class="keyword">while</span> (h[t] != <span class="number">-1</span> &amp;&amp; h[t] != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (++t == M) &#123;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sqr</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将被 引爆的炸弹用st数组标记</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    st[<span class="built_in">find</span>(x, y)] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x - r; i &lt;= x + r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y - r; j &lt;= y + r; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sqr</span>(i - x) + <span class="built_in">sqr</span>(j - y) &lt;= <span class="built_in">sqr</span>(r)) &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="built_in">find</span>(i, j);</span><br><span class="line">                <span class="keyword">if</span> (id[t] &amp;&amp; !st[t]) &#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(i, j, cir[id[t]].r);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;r);</span><br><span class="line">        cir[i] = &#123;x, y, r&#125;; <span class="comment">// 炸弹的信息</span></span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(x, y); <span class="comment">// 用哈希函数find找到该坐标映射的哈希值，在0~M-1之间</span></span><br><span class="line">        <span class="keyword">if</span> (h[t] == <span class="number">-1</span>) h[t] = <span class="built_in">get_key</span>(x, y); <span class="comment">// 第一次的出来的t才给它坐标(根据find函数看)</span></span><br><span class="line">        <span class="comment">// 如果是第一次在这个点发现炸弹或者该处炸弹的爆炸范围没这次的大，则更新</span></span><br><span class="line">        <span class="keyword">if</span> (!id[t] || cir[id[t]].r &lt; r) &#123;</span><br><span class="line">            id[t] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;r);</span><br><span class="line">        <span class="comment">// 枚举圆太麻烦，直接找围成该圆的矩形中满足条件的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x - r; i &lt;= x + r; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y - r; j &lt;= y + r; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果在圆内</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sqr</span>(i - x) + <span class="built_in">sqr</span>(j - y) &lt;= <span class="built_in">sqr</span>(r)) &#123;</span><br><span class="line">                    <span class="type">int</span> t = <span class="built_in">find</span>(i, j); </span><br><span class="line">                    <span class="comment">// 如果该处有炸弹并且没有被爆</span></span><br><span class="line">                    <span class="keyword">if</span> (id[t] &amp;&amp; !st[t]) &#123;</span><br><span class="line">                        <span class="built_in">dfs</span>(i, j, cir[id[t]].r); </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[<span class="built_in">find</span>(cir[i].x, cir[i].y)]) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="矩阵"> 矩阵：</span></h2>
<ol>
<li>求斐波那契前n项和，构造一个向量</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302121046039.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302121049660.png" alt></p>
<h2><span id="堆"> 堆</span></h2>
<h3><span id="7-11-关于堆的判断"> </span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> heap[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x)</span>  <span class="comment">// 建堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heap[pos] = x;</span><br><span class="line">    <span class="keyword">while</span>(pos &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(heap[pos] &lt; heap[pos &gt;&gt; <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[pos], heap[pos &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">            pos &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;p;  <span class="comment">// 用map 来 记录每个节点对应在数组中的下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="built_in">insert</span>(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[heap[i]] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> x, y, flag = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&quot;and&quot;</span>) &#123;                         <span class="comment">// 根据每句话的特性来判断。 我觉得这非常妙</span></span><br><span class="line">            cin &gt;&gt; y &gt;&gt; s &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(heap[p[x] ^ <span class="number">1</span>] == y) flag = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s == <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">                cin &gt;&gt; s &gt;&gt; s &gt;&gt; y;</span><br><span class="line">                <span class="keyword">if</span>(heap[p[x] &gt;&gt; <span class="number">1</span>] == y) flag = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cin &gt;&gt; s;</span><br><span class="line">                <span class="keyword">if</span>(s == <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(heap[<span class="number">1</span>] == x) flag = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cin &gt;&gt; s &gt;&gt; y;</span><br><span class="line">                    <span class="keyword">if</span>(heap[p[y] &gt;&gt; <span class="number">1</span>] == x) flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;F&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言</category>
        <category>C++</category>
        <category>程序设计笔记</category>
      </categories>
      <tags>
        <tag>程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>考研经验链接</title>
    <url>/2023/02/03/2023-%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<ol>
<li><a href="https://bbs.hupu.com/52181002.html">数一408 410分复习经验分享</a></li>
</ol>
]]></content>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/03/15/2023-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1><span id="第一章"> 第一章</span></h1>
<h2><span id="isoosi参考模型"> ISO/OSI参考模型</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303152231242.jpg" alt></p>
<h1><span id="期末笔记"> 期末笔记</span></h1>
<ol>
<li>数据链路层传输的PDU是<strong>数据帧</strong></li>
<li>常用的公钥密码体制是<strong>RSA</strong></li>
<li><strong>RSA</strong>加密和解密都使用相同的算法，但使用不同的密钥</li>
<li>无线局域网的标准是<strong>IEEE 802.11</strong></li>
<li>无线城域网的标准是<strong>IEEE 802.16</strong></li>
<li>常用的对称密钥体制是<strong>DES</strong></li>
<li>IPSec VPN的安全技术用到了<strong>隧道技术、加密技术、身份认证技术</strong></li>
<li>IPSec协议是一组协议，可以作为一个完整的VPN方案，工作在OSI的<strong>网络层</strong></li>
<li>网络拓扑结构可分为<strong>总线型、星型、环形、树形、网状</strong></li>
<li>第一次对路由器进行配置，应该通过<strong>console端口</strong>配置</li>
<li>无线局域网中为实现传输媒体共享而采用的协议是<strong>CSMA/CA</strong></li>
<li>在OSI/RM中，完成路径选择功能的是<strong>网络层</strong></li>
<li>IEEE 802.3的物理层协议10BASE-T规定从网卡到集线器的最大传输距离是<strong>100m</strong></li>
<li>IEEE 802.3标准规定的以太网的物理地址长度是<strong>48bit</strong></li>
<li>交换机与双绞线进行连接的端口是<strong>RJ-45</strong></li>
<li>EGP在<strong>自治系统</strong>之间传播路由</li>
<li>以集线器为核心创建的网络，其物理拓扑结构是<strong>星型</strong></li>
<li>同步传输中的同步是指<strong>时钟同步</strong></li>
<li>从IPv4过渡到IPv6的技术有<strong>双协议栈、隧道技术、网络地址转换</strong></li>
<li>属于宽带接入技术的有<strong>ADSL、HFC、光纤接入、以太网接入、无线接入</strong></li>
<li>使用<strong>NET</strong>技术可以将私有的本地IP地址转换为合法的全球IP地址</li>
<li>波分多路复用技术主要用于<strong>光纤通信</strong></li>
<li>ICMP通常被认为是<strong>网络层</strong>的协议</li>
<li>对付网络安全中的被动攻击可采用各种<strong>数据加密</strong>技术</li>
<li>IPv6采用<strong>冒号十六进制</strong>法书写地址</li>
<li>在OSI/RM的网络层中，数据以<strong>分组</strong>为单位进行传输</li>
<li>声音属于<strong>模拟数据</strong></li>
<li>串行通信中，PPP协议面向的是<strong>字符</strong></li>
<li><strong>通信子网</strong>向端系统提供虚电路和数据报两种网络服务</li>
<li>以太网使用MAC层协议的是<strong>CSMA/CD协议</strong></li>
<li>Hash签名(MD5)生成的摘要长度是<strong>128bit</strong></li>
<li>将网络互相连接起来要使用一些中间设备，在网络层以上使用的中间设备是<strong>网关</strong></li>
<li>IP服务的主要特点是<strong>不可靠，无连接和尽最大努力投递</strong></li>
<li>同一个VLAN中的两台主机<strong>可以跨越多台交换机</strong></li>
<li>当<strong>没有专门申请的全局IP地址，只有一个连接ISP的全局IP地址</strong>时，需要使用<strong>NAPT</strong></li>
<li>以太网的帧格式，其数据部分最大长度是<strong>1500B</strong>，去掉首部1480B</li>
<li>IEEE 802.3或者Ethernet规定数据的传输必须使用<strong>曼彻斯特编码</strong>进行</li>
<li>计算机网络中负责节点间通信任务的那一部分称为<strong>通信子网</strong></li>
<li>ARP通常被认为是<strong>网络层</strong>的协议</li>
<li>TCP的滑动窗口以<strong>字节</strong>为单位</li>
<li>中继器的主要作用是<strong>延长通信距离</strong></li>
<li>OSPF是基于<strong>链路状态</strong>的路由协议</li>
<li>RIP是基于<strong>距离向量</strong>的路由选择协议</li>
<li>高速以太网100BASE-T采用的是<strong>星型</strong>拓扑结构</li>
<li>数据单元的点到点传递由<strong>数据链路</strong>层负责。</li>
<li>在物理层扩展局域网需要使用设备是<strong>集线器</strong></li>
<li>数据通信中举出的三种传输介质是<strong>双绞线 同轴电缆 光缆</strong></li>
<li>发送时延=数据帧长度/发送速率</li>
<li>传播时延=信道长度/电磁波在信道上的传播速率</li>
<li>以太网的端到端来回时延2t称为<strong>争用期</strong>,又称为碰撞窗口。</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>软考笔记</title>
    <url>/2023/02/01/2023-%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1><span id="知识产权"> 知识产权</span></h1>
<ul>
<li>**《中华人民共和国著作权法》<strong>和</strong>《计算机软件保护条例》**是构成我国保护计算机软件著作权的两个基本法律文件</li>
<li>著作权利中，只有<strong>发表权</strong>的保护期受时间限制（作者终生加死后50年）</li>
<li>《计算机软件保护条例》规定，软件著作权人享有<strong>发表权</strong>和<strong>开发者身份权</strong></li>
<li>根据《著作权法》和《计算机软件保护条例》的规定，计算机软件著作权的权利自<strong>软件开发完成之日</strong>起产生，保护期为<strong>50年</strong>。保护期满，除<strong>开发者身份权</strong>以外，其他权利终止。</li>
<li>我国商标的保护期限自核准注册之日起<strong>10年内</strong>有效，但可以根据其所有人的需要无限地延长权利期限，在期限届满前<strong>6个月</strong>内申请续展注册，每次续展注册的有效期为<strong>10年</strong>，续展注册的次数不限。</li>
<li><strong>烟草制品</strong>必须使用注册商标</li>
</ul>
<h1><span id="数据库"> 数据库</span></h1>
<ol>
<li>
<p>数据库系统通常采用三级模式结构：外模式、模式和内模式。这三级模式分别对应数据库的<strong>视图、基本表和存储文件</strong>。</p>
</li>
<li>
<p>数据的物理独立性和逻辑独立性分别是通过修改**(概念)模式与内模式之间的映像、外模式与(概念)模式之间的映像**来完成的</p>
</li>
<li>
<p>主键<strong>primary key</strong>类似于写<strong>not null unique</strong></p>
</li>
<li>
<p><strong>check</strong>是用户自定义约束</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071000317.png" alt></p>
<ol start="5">
<li><strong>distinct</strong>去除列相同的元组(行)</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071017936.png" alt></p>
<ol start="6">
<li>模糊查询</li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302071026694.png" alt></p>
<ol start="7">
<li>确定系统边界和关系规范化分别在数据库设计的<strong>需求分析逻辑设计</strong>阶段进行。</li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302131546999.png" alt></li>
</ol>
<h1><span id="下午题二"> 下午题二</span></h1>
<ol>
<li>在E-R模型中，<strong>联系</strong>用菱形表示，<strong>实体</strong>用矩形表示，<strong>属性</strong>用圆圈表示</li>
</ol>
<h1><span id="计算机基本工作原理"> 计算机基本工作原理</span></h1>
<ol>
<li></li>
</ol>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161002776.png" alt></p>
<h1><span id="面向对象"> 面向对象</span></h1>
<h2><span id="面向对象的设计原则"> 面向对象的设计原则</span></h2>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161314754.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302161314769.png" alt></p>
<p>**注：**6.9.10.11可以不看</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302162006402.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302162007828.png" alt></p>
<h1><span id="设计模式"> 设计模式</span></h1>
<h2><span id="设计模式分类"> 设计模式分类</span></h2>
<p>终结者-&gt;中介者</p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303141518202.jpg" alt></p>
<h1><span id="结构化语言"> 结构化语言</span></h1>
<p><a href="https://blog.csdn.net/WHT869706733/article/details/124777145">语法</a></p>
<h1><span id="上午试题六"> 上午试题六</span></h1>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303181024801.png" alt></p>
<h1><span id="上午题杂记"> 上午题杂记</span></h1>
<h2><span id="知识点"> 知识点</span></h2>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304161804347.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304161810625.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304171350160.png" alt="image-20230417135004766"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304171354326.png" alt="image-20230417135445183"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181604926.jpg" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304242111124.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304242200523.png" alt="image-20230424220000390"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304301901947.png" alt="image-20230430190113876"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305071619264.png" alt="image-20230507161921134"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305071622075.png" alt="image-20230507162224008"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141726870.png" alt="image-20230514172629734"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141727821.png" alt="image-20230514172712706"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141747087.png" alt="image-20230514174711001"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305171723548.png" alt="image-20230517172324439"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305171918458.png" alt="image-20230517191807945"></li>
</ol>
<h2><span id="题目"> 题目</span></h2>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304162143841.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304162145335.png" alt="image-20230416214512098"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304171334675.png" alt="image-20230417133426647"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304181538524.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304182215373.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304191656839.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304191658092.png" alt></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304242113633.png" alt="image-20230424211322488"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304281648272.png" alt="image-20230428164845179"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305141734548.png" alt="image-20230514173420466"></li>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202305171908058.png" alt="image-20230517190813779"></li>
</ol>
<h1><span id="下午题杂记"> 下午题杂记</span></h1>
<h2><span id="题目"> 题目：</span></h2>
<ol>
<li><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202304282100398.png" alt="image-20230428205935406"></li>
</ol>
]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>软著论文备份</title>
    <url>/2023/05/31/2023-%E8%BD%AF%E8%91%97%E8%AE%BA%E6%96%87%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="00e64b391dd530c84952720d2f9bc2455f95c3a0e4f4502e284ecfaddf18d800"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码查看文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2023/06/03/2023-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1><span id="redis"> Redis</span></h1>
<h2><span id="使用场景"> 使用场景</span></h2>
<h3><span id="缓存穿透"> 缓存穿透</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031104412.png" alt="image-20230603110403357"></p>
<h4><span id="方案1"> 方案1</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031105576.png" alt="image-20230603110536524"></p>
<h4><span id="方案二"> 方案二</span></h4>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031107017.png" alt="image-20230603110712925"></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202306031110769.png" alt="image-20230603111024672"></p>
]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>项目</title>
    <url>/2023/09/05/2023-%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1ef8d46bd6690878919c4b9bd1d6c80e1ca55ee68e3be9e4ad9ee78ef015dcfb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码查看文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>高数</title>
    <url>/2023/01/27/2023-%E9%AB%98%E6%95%B0/</url>
    <content><![CDATA[<h2><span id="散记"> 散记</span></h2>
<h3><span id="高等数学预备知识"> 高等数学预备知识</span></h3>
<ol>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091434791.jpg" alt></li>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091435421.jpg" alt></li>
</ol>
<h3><span id="数列极限"> 数列极限</span></h3>
<ol>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091436107.jpg" alt="fsd"></li>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091437621.jpg" alt="dfsdfs (2)"></li>
</ol>
<h3><span id="函数极限与连续性"> 函数极限与连续性</span></h3>
<ol>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091437375.PNG" alt></li>
</ol>
<h2><span id="重要公式及结论"> 重要公式及结论</span></h2>
<hr>
<h3><span id="泰勒公式"> 泰勒公式</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091437432.jpg" alt></p>
<span id="more"></span>
<p>下面是百度搜的泰勒展开式(对上式补充)：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091440490.jpg" alt></p>
<h3><span id="基本求导公式"> 基本求导公式</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091440492.png" alt></p>
<h4><span id="笔记"> 笔记</span></h4>
<ol>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo separator="true">,</mo><mi>x</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mtext>。</mtext><mo stretchy="false">(</mo><mtext>绝对值可视而不见</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(ln|x|)&#x27;=(lnx)&#x27;=\frac{1}{x},x\neq0。(绝对值可视而不见)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord cjk_fallback">。</span><span class="mopen">(</span><span class="mord cjk_fallback">绝</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">视</span><span class="mord cjk_fallback">而</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">见</span><span class="mclose">)</span></span></span></span></li>
</ol>
<p>推广：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>u</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><mrow><msup><mi>u</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>u</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(ln|u(x)|)&#x27;=\frac{u&#x27;(x)}{u(x)},u(x)\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">u</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord">∣</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.58448em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.06448em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">u</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p>
<h3><span id="重要结论"> 重要结论</span></h3>
<p><img src="C:/Users/wubo/Pictures/demo/202302011935110.png" alt></p>
<h3><span id="常用的等价无穷小"> 常用的等价无穷小</span></h3>
<p><img src="C:/Users/wubo/Pictures/demo/202302011935473.png" alt></p>
<p><strong>补充：</strong></p>
<p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x\to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时, 有：</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">x + \sin x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>x</mi></mrow><annotation encoding="application/x-tex">2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\tan x-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\frac{1}{3}x^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">e^x-1-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\frac{1}{2}x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<h3><span id="p67"> P67</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091440495.png" alt></p>
<h3><span id="三角函数"> 三角函数</span></h3>
<p><img src="C:/Users/wubo/Pictures/demo/202302042059828.png" alt></p>
<h3><span id="高阶求导公式"> 高阶求导公式</span></h3>
<p><img src="C:/Users/wubo/Pictures/demo/202302042115433.png" alt></p>
<h2><span id="函数极限及连续性"> 函数极限及连续性</span></h2>
<ul>
<li>当出现无穷小乘无穷大时，可化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>0</mn><mn>0</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{0}{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi mathvariant="normal">∞</mi><mi mathvariant="normal">∞</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{\infty}{\infty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>,但注意要化成的形式分母必须简单才容易做洛必达(倒三角)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091440498.png" alt></p>
<p>口令：<code>设置分母有原则，简单因式才下放</code></p>
<p>简单：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>α</mi></msup></mrow><annotation encoding="application/x-tex">x^\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mi>β</mi><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">e^{\beta x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>复杂：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mi>x</mi><mo separator="true">,</mo><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">lnx, \arcsin x, \arctan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span></span></span></span></p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mi>u</mi><mo>=</mo><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>u</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ln u=ln(1+u-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u \to 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding="application/x-tex">~~~~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span></span></span></span> <code>注:</code>该公式由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ln(1+x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>推导而来</p>
</li>
<li>
<p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>-&gt;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(x)\to0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p>
<p>根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">e^x - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span></p>
<p>有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">[</mo><msup><mi>e</mi><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">e^{f(x)}-e^{g(x)}=e^{g(x)}[e^{f(x)-g(x)}-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9713299999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext></mrow><annotation encoding="application/x-tex">~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace nobreak"> </span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)-g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p>
</li>
</ul>
<p><img src="C:/Users/wubo/Pictures/demo/202302011935549.png" alt></p>
<br>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091442594.png" alt></p>
<ul>
<li>谈论间断点，只看两类点：
<ol>
<li>分段函数的分段点 (如1.3.20和1.3.21)</li>
<li>无意义点 (如1.3.22)</li>
</ol>
</li>
</ul>
<hr>
<h2><span id="一元函数微分学的概念与计算"> 一元函数微分学的概念与计算</span></h2>
<h3><span id="导数定义"> 导数定义：</span></h3>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">f&#x27;(x_0)=\lim_{\Delta x\to0}\frac{\Delta y}{\Delta x}=\lim_{\Delta x\to0}\frac{f({x_0+\Delta x})-f(x_0)}{\Delta x}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1046609999999997em;vertical-align:-0.744331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.355669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.171331em;vertical-align:-0.744331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.355669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<ul>
<li>函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>在点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处可导的充分必要条件是在其左导数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mo>−</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;_-(x_0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.057223em;vertical-align:-0.305331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>与右导数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mo>+</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;_+(x_0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.057223em;vertical-align:-0.305331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>均存在且相等</li>
</ul>
<h3><span id="定理"> 定理：</span></h3>
<ol>
<li></li>
</ol>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>若</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>在</mtext><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mtext>处连续</mtext><mo separator="true">,</mo><mtext>且</mtext><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mfrac><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mtext>存在</mtext><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>则</mtext><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mtext>且</mtext><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">若f(x)在x=x_0处连续,
且\lim_{x\to x_0}\frac{f(x)}{x-x_0}=A(存在),则
f(x_0)=0且f&#x27;(x_0)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">若</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">在</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4550999999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">续</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">且</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">在</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord cjk_fallback">且</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span></p>
<p>证明：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>因为</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>在</mtext><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mtext>处连续</mtext><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">因为f(x)在x=x_0处连续,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">在</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">续</span><span class="mpunct">,</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>则</mtext><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi>x</mi><mn>0</mn></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>x</mi><mo>−</mo><mi>x</mi><mn>0</mn></mrow></mfrac><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>x</mi><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">则f(x_0)=\lim_{x\to x_0}f(x)=\lim_{x\to x0}\frac{f(x)}{x-x0}(x-x0)=0,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.413331em;vertical-align:-0.403331em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mathnormal mtight">x</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">x</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>又</mtext><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mfrac><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">又f&#x27;(x_0)=\lim_{x\to x_0}\frac{f(x)-f(x_0)}{x-x_0}=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">又</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4550999999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span></p>
<h3><span id="笔记"> 笔记</span></h3>
<ol>
<li>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mfrac><mn>1</mn><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt></mfrac><mi>d</mi><mi>x</mi><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int \frac{1}{\sqrt{x^2+a^2}}dx=\ln(x+\sqrt{x^2+a^2})+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5445179999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9221171428571429em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.882117142857143em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11788285714285718em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.163389em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p>
</li>
<li>
<p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>可导，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f&#x27;(x)\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>,则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>必保号(恒正或恒负),<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>必单调</p>
<p>依据：</p>
<p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>∗</mo><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f&#x27;(a)*f&#x27;(b)&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>,则存在一个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ξ</mi><mo>∈</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\xi\in(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>,使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>ξ</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f&#x27;(\xi)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p>
</li>
</ol>
<h2><span id="一元函数微分学的几何运用"> 一元函数微分学的几何运用</span></h2>
<h3><span id="单调性与极值的判别"> 单调性与极值的判别</span></h3>
<ol>
<li>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x=x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处二阶可导，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f&#x27;(x_0)=0,f&#x27;&#x27;(x_0)\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>.</li>
</ol>
<p>则结论一：若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f&#x27;&#x27;(x_0)&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>,则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处取得极大值；</p>
<p>结论二：若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f&#x27;&#x27;(x_0)&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处取得极小值。<br>
<strong>证明：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091444481.png" alt></p>
<h3><span id="凹凸性与拐点的概念"> 凹凸性与拐点的概念</span></h3>
<ol>
<li>
<p><strong>拐点定义</strong>：连续曲线的凹弧与凸弧的分界点称为该曲线的拐点</p>
</li>
<li>
<p><strong>拐点</strong>要求连续，<strong>极值点</strong>不要求连续</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091444265.png" alt></p>
<ol start="3">
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091444237.png" alt></li>
</ol>
<h3><span id="渐近线"> 渐近线</span></h3>
<ol>
<li>有水平渐近线在<strong>这个方向</strong>上就没有斜渐近线</li>
<li>有斜渐近线在<strong>这个方向</strong>上就没有水平渐近线</li>
<li>求渐近线步骤：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091442515.png" alt></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091442934.png" alt></p>
<h3><span id="最值及作函数图形"> 最值及作函数图形</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443104.png" alt></p>
<h2><span id="中值定理"> 中值定理</span></h2>
<ol>
<li><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443716.png" alt></li>
</ol>
<h3><span id="费马定理"> 费马定理</span></h3>
<p>必须自己证一遍</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443996.png" alt></p>
<p>极限保号（脱帽带帽）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443441.png" alt></p>
<h3><span id="罗尔定理"> 罗尔定理</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443842.png" alt="image-20230213132546341"></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443052.png" alt="image-20230214152709435"></p>
<h3><span id="拉格朗日中值定理"> 拉格朗日中值定理</span></h3>
<p>函数和导数有联系（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>与</mtext><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)与f&#x27;(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">与</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>），考虑拉格朗日</p>
<h3><span id="柯西中值定理"> 柯西中值定理</span></h3>
<h3><span id="泰勒公式"> 泰勒公式</span></h3>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443455.png" alt></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443802.png" alt></p>
<h4><span id="笔记"> 笔记：</span></h4>
<ol>
<li>
<p>中值是端点的<strong>函数</strong></p>
</li>
<li>
<p>函数到高阶导数，考虑泰勒公式</p>
</li>
</ol>
<h3><span id="零点问题"> 零点问题</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202302171406575.png" alt></p>
<h2><span id="一元函数积分学的概念与计算"> 一元函数积分学的概念与计算</span></h2>
<p><img src="C:/Users/wubo/Pictures/demo/202302191332555.png" alt></p>
<h3><span id="笔记"> 笔记：</span></h3>
<ol>
<li>如果一个函数可导，有可能导出含震荡间断点的函数</li>
<li><img src="C:/Users/wubo/Pictures/demo/202302231659513.png" alt></li>
</ol>
<p><img src="C:/Users/wubo/Pictures/demo/202302231659837.png" alt></p>
<ol start="3">
<li>点火公式</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443499.png" alt></p>
<ol start="4">
<li>基本不等式（部分）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443637.png" alt></p>
<ol start="5">
<li>例题1.10.6</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443260.png" alt></p>
<ol start="6">
<li>推广的积分中值定理</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443304.png" alt></p>
<h2><span id="无穷级数"> 无穷级数</span></h2>
<h3><span id="散记"> 散记:</span></h3>
<ol>
<li></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311091443573.png" alt></p>
]]></content>
      <categories>
        <category>考研</category>
        <category>高数</category>
      </categories>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>题解备份</title>
    <url>/2023/03/21/2023-%E9%A2%98%E8%A7%A3%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1><span id="2023计科蓝桥杯第一场训练赛"> 2023计科蓝桥杯第一场训练赛</span></h1>
<h2><span id="卡片"> 卡片</span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>签到题，把每一个数字的每一位拆出来，用一位便把对应卡片数量减一，直到没有卡片便退出</p>
<h3><span id="代码"> 代码:</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 卡片0~9的数量初始为2021张，共20210张</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        w[i] = <span class="number">2021</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从1开始拼</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; ; i++) &#123;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        <span class="comment">// 把i的每一位分解，假如数字12，分成1和2</span></span><br><span class="line">        <span class="keyword">while</span> (t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!w[t % <span class="number">10</span>]) &#123; <span class="comment">// 如果该位置的数没有对应卡片了，便退出</span></span><br><span class="line">                cout &lt;&lt; i - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            w[t % <span class="number">10</span>]--;</span><br><span class="line">            <span class="comment">// 否则便继续分</span></span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="成绩统计"> 成绩统计</span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>签到题，把每个数判断一次即可</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ji = <span class="number">0</span>, yo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">60</span>) ji++;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">85</span>) yo++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> res1, res2;</span><br><span class="line">    res1 = ji / (<span class="number">1.0</span> * n);</span><br><span class="line">    res2 = yo / (<span class="number">1.0</span> * n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  // %.0lf表示保留0位小数，即只保留整数部分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf%\n%.0lf%\n&quot;</span>, res1 * <span class="number">100</span>, res2 * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="单词分析"> 单词分析</span></h2>
<h3><span id="思路"> 思路:</span></h3>
<p>先把每个单词出现的次数记录下来，最后遍历26个字母，求出哪个字母出现次数最多</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="comment">// 常用操作，把a-z映射到0-25</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        w[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> res;</span><br><span class="line">    <span class="comment">// 遍历出出现次数最多的字母res和出现的最大次数maxx</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (w[i] &gt; maxx) &#123;</span><br><span class="line">            res = i + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            maxx = w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl &lt;&lt; maxx &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="2023计科蓝桥杯第二场训练赛"> 2023计科蓝桥杯第二场训练赛</span></h1>
<h2><span id="时间显示"> 时间显示</span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p>暴力判断即可，纯体力活。。。</p>
<p>但注意数据是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding="application/x-tex">10^{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>，记得开long long</p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL hs;</span><br><span class="line">    cin &gt;&gt; hs; <span class="comment">// 时间</span></span><br><span class="line">    hs /= <span class="number">1000</span>; <span class="comment">// 舍去毫秒 </span></span><br><span class="line">    LL s = hs % <span class="number">60</span>; <span class="comment">// 秒</span></span><br><span class="line">    LL m = hs / <span class="number">60</span> % <span class="number">60</span>; <span class="comment">// 分</span></span><br><span class="line">    LL h = hs / <span class="number">3600</span> % <span class="number">24</span>; <span class="comment">// 时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; h &lt;&lt; <span class="string">&quot;:&quot;</span>; <span class="comment">// 假如是9点，补零为09</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; h &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; m &lt;&lt; <span class="string">&quot;:&quot;</span>; <span class="comment">// 同理</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; m &lt;&lt; <span class="string">&quot;:&quot;</span>; </span><br><span class="line">    <span class="keyword">if</span> (s &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; s; <span class="comment">// 同理</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="炸弹"> 炸弹</span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303212049600.png" alt></p>
<p><img src="https://raw.githubusercontent.com/GanBro/imgs/main/202303212049728.png" alt></p>
<h3><span id="代码"> 代码:</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Genes on 2020/12/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 激光炸弹</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ios                               \</span></span><br><span class="line"><span class="meta">    ios::sync_with_stdio(false); \</span></span><br><span class="line"><span class="meta">    cin.tie(nullptr);                     \</span></span><br><span class="line"><span class="meta">    cout.tie(nullptr)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">10</span>; <span class="comment">//不能开 1e5+10, 内存限制比较严格</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"><span class="type">int</span> n, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    r = <span class="built_in">min</span>(<span class="number">5001</span>, r); <span class="comment">// 因为r最大可以取 10^9</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, w;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line"><span class="comment">//        s[++x][++y]=w;  //错误</span></span><br><span class="line">        s[++x][++y] += w; <span class="comment">//右移一位, 就不需要考虑边界了, 并且必须是+=, 不能是=, 因为1个位置可能有多个目标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5001</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5001</span>; j++) &#123;</span><br><span class="line"><span class="comment">//            s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + s[i][j];</span></span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt;= <span class="number">5001</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = r; j &lt;= <span class="number">5001</span>; j++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, s[i][j] - s[i - r][j] - s[i][j - r] + s[i - r][j - r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="2023计科蓝桥杯第三四场训练赛"> 2023计科蓝桥杯第三四场训练赛</span></h1>
<h2><span id="差分"> 差分</span></h2>
<h3><span id="思路"> 思路</span></h3>
<p>模板题，不难，但一定要会</p>
<h3><span id="代码"> 代码</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        a[i] += x;</span><br><span class="line">        a[i + <span class="number">1</span>] -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, c;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        a[l] += c;</span><br><span class="line">        a[r + <span class="number">1</span>] -= c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="翻硬币"> 翻硬币</span></h2>
<h3><span id="思路"> 思路</span></h3>
<p>如果通过每次翻转两枚相邻硬币，能从状态一变为状态二，则两个状态之间必定有偶数个不同状态的硬币。</p>
<p>模拟法：</p>
<p>从最左侧开始遍历，如果该位置硬币状态与目标不同，就翻动该位置和该位置后面的两枚硬币。<br>
因为题目说了有解，所以遍历到倒数第二枚的时候，所有硬币状态就与目标相同了。</p>
<p>这个方法也有点贪心的思路，每次追求当前位置状态与目标状态一致。我还是喜欢称它为模拟法。</p>
<p>时间复杂度：遍历了一边输出，时间复杂度是 O(n)。</p>
<p>该思路时间复杂度已是最优，要使起始状态变为目标状态，至少遍历一边来进行判断，时间复杂度最少是 O(n)。</p>
<p>空间复杂度：没有开辟与输入输出有关的空间，空间复杂度是O(1)。</p>
<h3><span id="代码"> 代码</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;<span class="comment">//用不到，看范围就直接写了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1, s2;<span class="comment">//s1:初始状态，s2:目标状态</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//记录翻转次数</span></span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] != s2[i])<span class="comment">//第 i 个位置上状态不同，就翻转该位置和后一个位置硬币</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;<span class="comment">//翻转一次硬币</span></span><br><span class="line">            <span class="keyword">if</span> (s1[i] == <span class="string">&#x27;*&#x27;</span>) s1[i] = <span class="string">&#x27;o&#x27;</span>;<span class="comment">//翻转 i 位置上的硬币</span></span><br><span class="line">            <span class="keyword">else</span> s1[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (s1[i+<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span>) s1[i+<span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;<span class="comment">//翻转 i + 1 位置上的硬币</span></span><br><span class="line">            <span class="keyword">else</span> s1[i+<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;<span class="comment">//输出翻转次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="牡牛和牝牛"> 牡牛和牝牛</span></h2>
<h3><span id="代码"> 代码:</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">5000011</span>, N = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="comment">// 设牝牛为x， 牡牛为y</span></span><br><span class="line">    <span class="comment">// 在1到k+1中，前i头牛只能放一头y， 可以放在1 ~ i的任何位置，也可以不放，所以是i+1种放法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">1</span>; i++) f[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 之后就可以考虑第i为是放x还是y</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = (f[i - <span class="number">1</span>] + f[i - k - <span class="number">1</span>]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="最长上升子序列"> 最长上升子序列</span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230328194535708.png" alt="image-20230328194535708"></p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mx = <span class="number">1</span>;    <span class="comment">// 找出所计算的f[i]之中的最大值，边算边找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;    <span class="comment">// 设f[i]默认为1，找不到前面数字小于自己的时候就为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w[i] &gt; w[j]) f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);    <span class="comment">// 前一个小于自己的数结尾的最大上升子序列加上自己，即+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; mx &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="石子合并"> 石子合并</span></h2>
<h3><span id="思路"> 思路：</span></h3>
<p><img src="C:/Users/wubo/AppData/Roaming/Typora/typora-user-images/image-20230328194700366.png" alt></p>
<h3><span id="代码"> 代码：</span></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">307</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="comment">// 区间 DP 枚举套路：长度+左端点 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; len ++) &#123; <span class="comment">// len表示[i, j]的元素个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>; <span class="comment">// 自动得到右端点</span></span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                f[i][j] = <span class="number">0</span>;  <span class="comment">// 边界初始化</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j - <span class="number">1</span>; k ++) &#123; <span class="comment">// 必须满足k + 1 &lt;= j</span></span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + s[j] - s[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2><span id="quick-start"> Quick Start</span></h2>
<h3><span id="create-a-new-post"> Create a new post</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server"> Run server</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files"> Generate static files</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites"> Deploy to remote sites</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/GanBro/imgs/images/202311112054162.png" alt="022c217b03f745f38f50c88ffa8de6a2"></p>
]]></content>
  </entry>
</search>
